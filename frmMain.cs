using System;
using System.Collections.Generic;
// Main form for all processing
using System.Data.SQLite;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace EVE_Isk_per_Hour
{

    public partial class frmMain : Form
    {

        // Update Prices Variables
        private ControlsCollection m_ControlsCollection;
        private CheckBox[] SystemCheckBoxes;
        private CheckBox[] TechCheckBoxes;
        // For saving the price type that was used in the download
        private List<GroupPriceType> GroupPricesList = new List<GroupPriceType>();
        private GroupPriceType GroupPriceTypetoFind = new GroupPriceType();
        private class GroupPriceType
        {
            public string PriceType;
            public long ItemID;

            public GroupPriceType()
            {
                PriceType = "";
                ItemID = 0L;
            }
        }

        // Datacores
        private CheckBox[] DCSkillCheckBoxes;
        private Label[] DCSkillLabels;
        private ComboBox[] DCSkillCombos;
        private CheckBox[] DCCorpCheckBoxes;
        private Label[] DCCorpLabels;
        private TextBox[] DCCorpTextboxes;

        // Mining ore processing skills
        private CheckBox[] MineProcessingCheckBoxes;
        private Label[] MineProcessingLabels;
        private ComboBox[] MineProcessingCombos;

        // Manufacturing
        private CheckBox[] CalcRelicCheckboxes;
        private CheckBox[] CalcDecryptorCheckBoxes;
        private long TypeIDToFind; // For searching a price list

        // Manufacturing Column stuff
        private string[] ColumnPositions = new string[111]; // For saving the column order
        private bool AddingColumns;
        private int MovedColumn;

        private int DCIPH_COLUMN; // The number of the DC IPH column for totalling up the price

        private bool TechChecked;
        private bool IgnoreRefresh = false;
        private bool RunUpdatePriceList = true; // If we want to run the price list update
        private bool RefreshList = true;
        private bool UpdateAllTechChecks = true; // Whether to update all Tech checks in prices or not
        private bool FirstShowMining = true; // If we have clicked on the Mining tab yet to load initial data
        private bool FirstShowDatacores = true; // If we have clicked on the Datacores tab yet or not (only load initial data on first click)

        // For fixing double-click / check box on listview item box
        private bool inhibitAutoCheck;

        // Blueprints Variables
        private bool cmbBPsLoaded;

        // BP List for Previous/Next
        private List<BPHistoryItem> BPHistory = new List<BPHistoryItem>();

        // For letting manual check/override of build/buy calculations
        private bool IgnoreListViewItemChecks;

        private List<Public_Variables.BuildBuyItem> BBItems = new List<Public_Variables.BuildBuyItem>(); // Just the list of itemid and preference for check
        private long BBItemtoFind = new long();

        public struct BPBBItem
        {
            public int BPID;
            public List<Public_Variables.BuildBuyItem> BBItems;
        }

        private struct BPHistoryItem
        {
            public long BPID;
            public string BPName;
            public string BuildType;
            public string Inputs;
            public Public_Variables.SentFromLocation SentFrom;
            public IndustryFacility BuildFacility;
            public IndustryFacility ComponentFacility;
            public IndustryFacility CapComponentFacility;
            public IndustryFacility InventionFacility;
            public IndustryFacility CopyFacility;
            public bool IncludeTaxes;
            public Public_Variables.BrokerFeeInfo BrokerFeeData;
            public string MEValue;
            public string TEValue;
            public string SentRuns;
            public string ManufacturingLines;
            public string LabLines;
            public string NumBPs;
            public string AddlCosts;
            public bool PPU;
        }

        private int CurrentBPHistoryIndex;
        private bool ResetBPTab; // If we recalled the InitBP to enable all the stuff on the screen

        // BP Combo processing
        public bool ComboMenuDown;
        public bool MouseWheelSelection;
        public bool ComboBoxArrowKeys;
        public bool BPSelected;
        public bool BPComboKeyDown;

        // Relics
        private bool LoadingRelics;
        private bool RelicsLoaded;

        // Decryptors
        private Decryptor SelectedDecryptor = new Decryptor();

        // Invention
        private bool UpdatingInventionChecks;

        private bool LoadingInventionDecryptors;
        private bool LoadingT3Decryptors;

        private bool InventionDecryptorsLoaded;
        private bool T3DecryptorsLoaded;

        // If we are loading from history
        private bool LoadingBPfromHistory;
        private bool PreviousBPfromHistory;

        // Updates for threading
        public int PriceHistoryUpdateCount;
        public int PriceOrdersUpdateCount;

        // BP stats
        private bool OwnedBP;

        // For T2 BPOs mainly so we can load the stored ME/TE if it changes
        private string OwnedBPME;
        private string OwnedBPPE;

        private bool UpdatingCheck;
        private bool UpdatingStructureIDText;

        // For checks that are enabled
        private bool PriceCheckT1Enabled;
        private bool PriceCheckT2Enabled;
        private bool PriceCheckT3Enabled;
        private bool PriceCheckT4Enabled;
        private bool PriceCheckT5Enabled;
        private bool PriceCheckT6Enabled;

        // For updating several checks at once
        private bool IgnoreSystemCheckUpdates;
        private bool IgnoreRegionCheckUpdates;

        private bool PriceToggleButtonHit;

        // Total isk per hour selected on datacore grid
        private double TotalSelectedIPH;

        // Loading the solar system combo on the price page
        private bool FirstPriceShipTypesComboLoad;
        private bool FirstPriceChargeTypesComboLoad;

        // For loading the Manufacturing Grid
        private bool FirstLoadCalcBPTypes;
        private bool FirstManufacturingGridLoad;

        private List<long> UserInventedBPs = new List<long>();  // This is a list of all the BPs that the user will invent from owned T1s (Manufacturing Grid)

        // For ignoring updates to the ship booster combo in mining
        private bool UpdatingMiningShips;

        // If we refresh the manufacturing data or recalcuate
        private bool RefreshCalcData;

        // Reload of Regions on Datacore class
        private bool DCRegionsLoaded;

        // Final list of items for manufacturing (keep form level so we can refresh it if needed)
        private List<ManufacturingItem> FinalManufacturingItemList;
        private long ManufacturingRecordIDToFind; // for Predicate
        private string ManufacturingNameToFind; // for Predicate

        // For column sorting - What column did they click on to sort
        private int ManufacturingColumnClicked;
        private SortOrder ManufacturingColumnSortType;
        private int UpdatePricesColumnClicked;
        private SortOrder UpdatePricesColumnSortType;
        private int BPCompColumnClicked;
        private SortOrder BPCompColumnSortType;
        private int BPRawColumnClicked;
        private SortOrder BPRawColumnSortType;
        private int DCColumnClicked;
        private SortOrder DCColumnSortType;
        private int MiningColumnClicked;
        private SortOrder MiningColumnSortType;
        private int ReactionsColumnClicked;
        private SortOrder ReactionsColumnSortType;

        private string SelectedBPText = "";

        private string ProfitText;
        private string ProfitPercentText;

        private ProgramSettings DefaultSettings = new ProgramSettings(); // For default constants

        private int ListIDIterator; // For setting a unique record id in the manufacturing tab
        private List<RowFormat> ListRowFormats = new List<RowFormat>(); // The lists of formats to use in drawing the manufacturing list

        private int SelectedBPTabIndex; // So we don't move around the different facility/invention/re tabs on the user

        // Inline grid row update variables
        private struct SavedLoc
        {
            public int X;
            public int Y;
        }

        private SavedLoc SavedListClickLoc;
        private bool RefreshingGrid;

        private ListViewItem CurrentRow;
        private ListViewItem PreviousRow;
        private ListViewItem NextRow;

        private ListViewItem NextCellRow;
        private ListViewItem PreviousCellRow;

        private ListViewItem.ListViewSubItem CurrentCell;
        private ListViewItem.ListViewSubItem PreviousCell;
        private ListViewItem.ListViewSubItem NextCell;

        private bool MEUpdate;
        private bool PriceUpdate;
        private bool DataUpdated;
        private bool DataEntered;
        private bool EnterKeyPressed;
        private ListView SelectedGrid;

        private bool PriceTypeUpdate;
        private bool PriceSystemUpdate;
        private bool PriceRegionUpdate;
        private bool PriceModifierUpdate;
        private string PreviousPriceType;
        private string PreviousRegion;
        private string PreviousSystem;
        private string PreviousPriceMod;
        private bool TabPressed;
        private bool UpdatingCombo;

        private bool PPSystemsLoaded;
        private bool PPRegionsLoaded;
        private bool PriceRegionsLoaded;
        private bool PriceSystemsLoaded;
        private string PreviousPPRegion;
        private string PreviousPriceRegion;

        private bool IgnoreFocus;
        private bool IgnoreMarketFocus;

        // Column width consts - may change depending on Ore, Ice or Gas so change the widths of the columns based on these and use them to add and move
        private const int MineOreNameColumnWidth = 114;
        private const int MineRefineYieldColumnWidth = 70;
        private const int MineCrystalColumnWidth = 55;
        private const string PriceListHeaderCSV = "Group Name,Item Name,Price,Price Type,Raw Material,Type ID";
        private const string PriceListHeaderTXT = "Group Name|Item Name|Price|Price Type|Raw Material|Type ID";
        private const string PriceListHeaderSSV = "Group Name;Item Name;Price;Price Type;Raw Material;Type ID";

        private const string JitaID = "30000142";
        private const string PerimeterID = "30000144";

        private string UpdatePricesDataSource;

        #region Initialization Code

        // Set default window theme so tabs in invention window display correctly on all systems
        [DllImport("uxtheme.dll", CharSet = CharSet.Unicode)]
        public static extern int SetWindowTheme(IntPtr hWnd, string pszSubAppName, string pszSubIdList);


        public frmMain() : base()
        {

            Public_Variables.ErrorTracker = "";
            Public_Variables.ESIErrorHandler = new ESIErrorProcessor();

            ErrObject ErrorData = null;
            var ESIData = new ESI();

            string AppFilePath = Path.GetDirectoryName(Application.ExecutablePath);

            // Set developer flag
            if (File.Exists(Path.Combine(AppFilePath, "Developer.txt")))
            {
                Public_Variables.Developer = true;
            }
            else
            {
                Public_Variables.Developer = false;
            }

            // Covert to new ESI registration system to use my registration and PKCE
            // If they registered before, show a pop-up and require registration. Then delete the registration file
            string AppRegistrationFileName = Path.ChangeExtension(Path.Combine(Public_Variables.DynamicFilePath, "", "AppRegistrationInformation"), ".xml");
            if (File.Exists(Path.Combine(AppFilePath, AppRegistrationFileName)))
            {
                var f1 = new frmAppRegistrationNotice();
                f1.ShowDialog();

                // Now delete the registration file
                File.Delete(AppRegistrationFileName);

            }

            // Set test platform
            if (File.Exists(Path.Combine(AppFilePath, "Test.txt")))
            {
                Public_Variables.TestingVersion = true;
            }
            else
            {
                Public_Variables.TestingVersion = false;
            }

            Public_Variables.SetProgress("Initializing...");

            Application.DoEvents();

            // This call is required by the designer.
            InitializeComponent();

            Public_Variables.FirstLoad = true;

            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            // Always use US for now and don't take into account user overrided stuff like the system clock format
            Public_Variables.LocalCulture = new CultureInfo("en-US", false);
            // Sets the CurrentCulture 
            Thread.CurrentThread.CurrentCulture = Public_Variables.LocalCulture;

            // Add any initialization after the InitializeComponent() call.

            // Find out if we are running all in the current folder or with updates and the DB in the appdata folder
            if (File.Exists(Path.Combine(AppFilePath, Public_Variables.SQLiteDBFileName)))
            {
                // Single folder that we are in, so set the path variables to it for updates
                Public_Variables.DynamicFilePath = Path.GetDirectoryName(Application.ExecutablePath);
                Public_Variables.DBFilePath = Path.GetDirectoryName(Application.ExecutablePath);
            }
            else
            {
                // They ran the installer (or we assume they did) and all the files are updated in the appdata/roaming folder
                // Set where files will be updated
                Public_Variables.DynamicFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), Public_Variables.DynamicAppDataPath);
                Public_Variables.DBFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), Public_Variables.DynamicAppDataPath);
            }

            // Get the user settings then check for updates
            SettingsVariables.UserApplicationSettings = SettingsVariables.AllSettings.LoadApplicationSettings();

            // Check for program updates first
            if (SettingsVariables.UserApplicationSettings.CheckforUpdatesonStart)
            {
                // Check for program updates
                Application.UseWaitCursor = true;
                Activate();
                Public_Variables.CheckForUpdates(false, Icon);
                Application.UseWaitCursor = false;
                Application.DoEvents();
            }

            // Initialize stuff
            Public_Variables.SetProgress("Initializing Database...");
            Application.DoEvents();
            Public_Variables.EVEDB = new DBConnection(Public_Variables.DBFilePath, Public_Variables.SQLiteDBFileName);

            // For speed on ESI calls
            ServicePointManager.DefaultConnectionLimit = 20;
            ServicePointManager.UseNagleAlgorithm = false;
            ServicePointManager.Expect100Continue = false;

            // Load the user settings
            Public_Variables.SetProgress("Loading User Settings...");
            SettingsVariables.UserBPTabSettings = SettingsVariables.AllSettings.LoadBPSettings();
            SettingsVariables.UserUpdatePricesTabSettings = SettingsVariables.AllSettings.LoadUpdatePricesSettings();
            SettingsVariables.UserManufacturingTabSettings = SettingsVariables.AllSettings.LoadManufacturingSettings();
            SettingsVariables.UserDCTabSettings = SettingsVariables.AllSettings.LoadDatacoreSettings();
            SettingsVariables.UserMiningTabSettings = SettingsVariables.AllSettings.LoadMiningSettings();
            SettingsVariables.UserIndustryJobsColumnSettings = SettingsVariables.AllSettings.LoadIndustryJobsColumnSettings();
            SettingsVariables.UserManufacturingTabColumnSettings = SettingsVariables.AllSettings.LoadManufacturingTabColumnSettings();
            SettingsVariables.UserShoppingListSettings = SettingsVariables.AllSettings.LoadShoppingListSettings();
            SettingsVariables.UserMHViewerSettings = SettingsVariables.AllSettings.LoadMarketHistoryViewerSettingsSettings();
            SettingsVariables.UserBPViewerSettings = SettingsVariables.AllSettings.LoadBPViewerSettings();
            SettingsVariables.UserUpwellStructureSettings = SettingsVariables.AllSettings.LoadUpwellStructureViewerSettings();
            SettingsVariables.StructureBonusPopoutViewerSettings = SettingsVariables.AllSettings.LoadStructureBonusPopoutViewerSettings();

            SettingsVariables.UserIndustryFlipBeltSettings = SettingsVariables.AllSettings.LoadIndustryFlipBeltColumnSettings();
            SettingsVariables.UserIndustryFlipBeltOreCheckSettings1 = SettingsVariables.AllSettings.LoadIndustryBeltOreChecksSettings(Public_Variables.BeltType.Small);
            SettingsVariables.UserIndustryFlipBeltOreCheckSettings2 = SettingsVariables.AllSettings.LoadIndustryBeltOreChecksSettings(Public_Variables.BeltType.Medium);
            SettingsVariables.UserIndustryFlipBeltOreCheckSettings3 = SettingsVariables.AllSettings.LoadIndustryBeltOreChecksSettings(Public_Variables.BeltType.Large);
            SettingsVariables.UserIndustryFlipBeltOreCheckSettings4 = SettingsVariables.AllSettings.LoadIndustryBeltOreChecksSettings(Public_Variables.BeltType.Enormous);
            SettingsVariables.UserIndustryFlipBeltOreCheckSettings5 = SettingsVariables.AllSettings.LoadIndustryBeltOreChecksSettings(Public_Variables.BeltType.Colossal);

            SettingsVariables.UserIceBeltFlipSettings = SettingsVariables.AllSettings.LoadIceFlipBeltColumnSettings();
            SettingsVariables.UserIceBeltCheckSettings = SettingsVariables.AllSettings.LoadIceBeltOreChecksSettings();

            SettingsVariables.UserAssetWindowManufacturingTabSettings = SettingsVariables.AllSettings.LoadAssetWindowSettings(AssetWindow.ManufacturingTab);
            SettingsVariables.UserAssetWindowShoppingListSettings = SettingsVariables.AllSettings.LoadAssetWindowSettings(AssetWindow.ShoppingList);
            SettingsVariables.UserAssetWindowRefinerySettings = SettingsVariables.AllSettings.LoadAssetWindowSettings(AssetWindow.Refinery);
            SettingsVariables.UserAssetWindowDefaultSettings = SettingsVariables.AllSettings.LoadAssetWindowSettings(AssetWindow.DefaultView);

            // These will be used for all areas in the program - I may make specific to each reprocessing facility if requested, then will move to the manufacturing facility object
            SettingsVariables.UserConversiontoOreSettings = SettingsVariables.AllSettings.LoadConversiontoOreSettings();

            // frmConversionOptions = New frmConversiontoOreSettings()

            // Display to the user any issues with ESI endpoints
            Public_Variables.SetProgress("Checking Status of ESI...");
            Label argUpdateLabel = null;
            ProgressBar argPB = null;
            ESIData.GetESIStatus(UpdateLabel: ref argUpdateLabel, PB: ref argPB);
            if (!SettingsVariables.UserApplicationSettings.SupressESIStatusMessages)
            {
                DisplayESIStatusMessages();
            }

            // Load the default character data
            Public_Variables.SetProgress("Loading Character Data from ESI...");
            Public_Variables.LoadCharacter(SettingsVariables.UserApplicationSettings.LoadAssetsonStartup, SettingsVariables.UserApplicationSettings.LoadBPsonStartup);
            LoadCharacterNamesinMenu();

            // Type of skills loaded
            UpdateSkillPanel();

            // Update System Cost Indicies
            if (SettingsVariables.UserApplicationSettings.LoadESISystemCostIndiciesDataonStartup)
            {
                Application.UseWaitCursor = true;
                Public_Variables.SetProgress("Updating Industry System Indicies...");
                Application.DoEvents();
                Label argUpdateLabel1 = null;
                ProgressBar argPB1 = null;
                ESIData.UpdateIndustrySystemsCostIndex(UpdateLabel: ref argUpdateLabel1, PB: ref argPB1);
                Application.UseWaitCursor = false;
                Application.DoEvents();
            }

            Public_Variables.DBCommand = null;

            // ESI Market Data
            if (SettingsVariables.UserApplicationSettings.LoadESIMarketDataonStartup)
            {
                Application.UseWaitCursor = true;
                Application.DoEvents();
                Public_Variables.SetProgress("Updating Avg/Adj Market Prices...");
                Label argUpdateLabel2 = null;
                ProgressBar argPB2 = null;
                ESIData.UpdateAdjAvgMarketPrices(UpdateLabel: ref argUpdateLabel2, PB: ref argPB2);
                Application.UseWaitCursor = false;
                Application.DoEvents();
            }

            // Refresh Public Structures
            if (SettingsVariables.UserApplicationSettings.LoadESIPublicStructuresonStartup & Public_Variables.SelectedCharacter.PublicStructuresAccess)
            {
                Application.UseWaitCursor = true;
                Application.DoEvents();
                Public_Variables.SetProgress("Updating Public Structures Data...");
                Label argUpdateLabel3 = null;
                ProgressBar argPB3 = null;
                ESIData.UpdatePublicStructureswithMarkets(UpdateLabel: ref argUpdateLabel3, PB: ref argPB3);
                Application.UseWaitCursor = false;
                Application.DoEvents();
            }

            if (Public_Variables.TestingVersion)
            {
                Text = Text + " - Testing";
            }

            if (Public_Variables.Developer)
            {
                Text = Text + " - Developer";
            }
            else
            {
                // Hide all the development stuff
                tabMain.TabPages.Remove(tabPI);
            }

            // Load all the forms' facilities
            LoadFacilities();

            // Init Tool tips
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP = new ToolTip(components);
                ttBP.IsBalloon = true;
            }

            // Nothing in shopping List
            pnlShoppingList.Text = "No Items in Shopping List";

            Public_Variables.SetProgress("Finalizing Forms...");

            // ****************************************
            // **** Blueprints Tab Initializations ****
            // ****************************************
            // Width is now 556, scrollbar is 21 
            // lstBPComponentMats.Columns.Add("", -2, HorizontalAlignment.Center) ' For check (25 size)
            lstBPComponentMats.Columns.Add("Material", 215, HorizontalAlignment.Left); // added 25 temp
            lstBPComponentMats.Columns.Add("Quantity", 90, HorizontalAlignment.Right);
            lstBPComponentMats.Columns.Add("ME", 35, HorizontalAlignment.Center);
            lstBPComponentMats.Columns.Add("Cost Per Item", 90, HorizontalAlignment.Right);
            lstBPComponentMats.Columns.Add("Total Cost", 110, HorizontalAlignment.Right);

            // Width is now 556, scrollbar is 21 
            // lstBPBuiltComponents.Columns.Add("", -2, HorizontalAlignment.Center) ' For check (25 size)
            lstBPBuiltComponents.Columns.Add("Material", 215, HorizontalAlignment.Left); // added 25 temp
            lstBPBuiltComponents.Columns.Add("Quantity", 90, HorizontalAlignment.Right);
            lstBPBuiltComponents.Columns.Add("ME", 35, HorizontalAlignment.Center);
            lstBPBuiltComponents.Columns.Add("Excess Sell Cost", 90, HorizontalAlignment.Right);
            lstBPBuiltComponents.Columns.Add("Built Cost", 110, HorizontalAlignment.Right);

            // No check for raw mats since the check will be used to toggle build/buy for each item
            lstBPRawMats.Columns.Add("Material", 215, HorizontalAlignment.Left);
            lstBPRawMats.Columns.Add("Quantity", 90, HorizontalAlignment.Right);
            lstBPRawMats.Columns.Add("ME", 35, HorizontalAlignment.Center);
            lstBPRawMats.Columns.Add("Cost Per Item", 90, HorizontalAlignment.Right);
            lstBPRawMats.Columns.Add("Total Cost", 110, HorizontalAlignment.Right);

            // We haven't checked any tech levels yet
            TechChecked = false;

            InitBPTab();

            InitInventionTab();

            // Base Decryptor
            SelectedDecryptor.MEMod = 0;
            SelectedDecryptor.TEMod = 0;
            SelectedDecryptor.RunMod = 0;
            SelectedDecryptor.ProductionMod = 1d;
            SelectedDecryptor.Name = Public_Variables.None;

            // For the disabling of the price update form
            PriceCheckT1Enabled = true;
            PriceCheckT2Enabled = true;
            PriceCheckT3Enabled = true;
            PriceCheckT4Enabled = true;
            PriceCheckT5Enabled = true;
            PriceCheckT6Enabled = true;

            // Tool Tips
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblBPInventionCost, "Invention Cost for Runs entered = (Datacores + Decryptors) / Invented Runs * Runs (based on the probability of success)" + Constants.vbCrLf + "Double-Click for material list needed for enough successful BPCs for runs entered");
                ttBP.SetToolTip(lblBPRECost, "Invention Cost for Runs entered = (Datacores + Decryptors + Relics) / Invented Runs * Runs (based on the probability of success)" + Constants.vbCrLf + "Double-Click for material list needed for enough successful BPCs for runs entered");
                ttBP.SetToolTip(lblBPCopyCosts, "Total Cost of materials to make enough BPCs for the number of invention jobs needed" + Constants.vbCrLf + "Double-Click for material list needed for enough successful BPCs for runs entered");
                ttBP.SetToolTip(lblBPRuns, "Total number of items to produce. I.e. If you have 5 blueprints with 4 runs each, then enter 20");
                ttBP.SetToolTip(lblBPTaxes, "Sales Taxes to set up a sell order at an NPC Station");
                ttBP.SetToolTip(lblBPBrokerFees, "Broker's Fees to set up a sell order at an NPC Station");
                ttBP.SetToolTip(lblBPTotalCompCost, "Total Cost of Component Materials, InventionCosts, Usage, Taxes and Fees - Double Click for list of costs");
                ttBP.SetToolTip(lblBPRawTotalCost, "Total Cost of Raw Materials, InventionCosts, Usage, Taxes and Fees - Double Click for list of costs");
                ttBP.SetToolTip(lblBPPT, "This is the time to build the item (including skill and implant modifiers) from the blueprint after all materials are gathered");
                ttBP.SetToolTip(lblBPCPTPT, "This is the total time to build the item and components and if selected, time to complete invention and copying");
                ttBP.SetToolTip(lblBPCanMakeBP, "Double-Click here to see required skills to make this BP");
                ttBP.SetToolTip(lblBPCanMakeBPAll, "Double-Click here to see required skills to make all the items for this BP");
                ttBP.SetToolTip(lblBPT2InventStatus, "Double-Click here to see required skills to invent this BP");
                ttBP.SetToolTip(lblT3InventStatus, "Double-Click here to see required skills to invent this BP");
                ttBP.SetToolTip(chkBPPricePerUnit, "Show Price per Unit - All price data in this frame will be updated to show the prices for 1 unit");
                ttBP.SetToolTip(lblBPProductionTime, "Total time to build this blueprint with listed components");
                ttBP.SetToolTip(lblBPTotalItemPT, "Total time to build selected build components and this blueprint");
                ttBP.SetToolTip(lblBPComponentMats, "Total list of components, which can be built, and materials to build this blueprint");
                ttBP.SetToolTip(lblBPRawMats, "Total list of materials to build all components and base materials for this blueprint");
                ttBP.SetToolTip(lblBPDecryptorStats, "Selected Decryptor Stats and Runs per BPC");
                ttBP.SetToolTip(lblBPT3Stats, "Selected Decryptor Stats and Runs per BPC");
                ttBP.SetToolTip(lblBPSimpleCopy, "When checked, this will copy the list into a format that will work with Multi-Buy when pressing the Copy button.");
                ttBP.SetToolTip(lblBPRawProfit, "Double-Click to toggle value between Profit and Profit Percent");
                ttBP.SetToolTip(lblBPCompProfit, "Double-Click to toggle value between Profit and Profit Percent");
            }

            // *******************************************
            // **** Update Prices Tab Initializations ****
            // *******************************************
            // Create the controls collection class
            m_ControlsCollection = new ControlsCollection(this);
            // Get Region check boxes (note index starts at 1)
            TechCheckBoxes = (CheckBox[])ControlArrayUtils.getControlArray(this, MyControls, "chkPricesT");
            SystemCheckBoxes = (CheckBox[])ControlArrayUtils.getControlArray(this, MyControls, "chkSystems");

            // Columns of Update Prices Listview (width = 639) + 21 for scroll = 660
            lstPricesView.Columns.Add("TypeID", 0, HorizontalAlignment.Left); // Hidden
            lstPricesView.Columns.Add("Group", 220, HorizontalAlignment.Left);
            lstPricesView.Columns.Add("Item", 319, HorizontalAlignment.Left);
            lstPricesView.Columns.Add("Price", 100, HorizontalAlignment.Right);
            lstPricesView.Columns.Add("Manufacture", 0, HorizontalAlignment.Right); // Hidden
            lstPricesView.Columns.Add("Market ID", 0, HorizontalAlignment.Right); // Hidden
            lstPricesView.Columns.Add("Price Type", 0, HorizontalAlignment.Right); // Hidden

            // Columns of update prices raw mats in price profiles - width= 443
            lstRawPriceProfile.Columns.Add("Group", 136, HorizontalAlignment.Left);
            lstRawPriceProfile.Columns.Add("Price Type", 74, HorizontalAlignment.Left);
            lstRawPriceProfile.Columns.Add("Region", 92, HorizontalAlignment.Left); // 119 is to fit all regions
            lstRawPriceProfile.Columns.Add("Solar System", 73, HorizontalAlignment.Left); // 104 is to fit all systems
            lstRawPriceProfile.Columns.Add("PMod", 41, HorizontalAlignment.Right); // Hidden

            // Columns of update prices manufactured mats in price profiles
            lstManufacturedPriceProfile.Columns.Add("Group", 136, HorizontalAlignment.Left);
            lstManufacturedPriceProfile.Columns.Add("Price Type", 74, HorizontalAlignment.Left);
            lstManufacturedPriceProfile.Columns.Add("Region", 92, HorizontalAlignment.Left); // 119 is to fit all regions
            lstManufacturedPriceProfile.Columns.Add("Solar System", 73, HorizontalAlignment.Left); // 104 is to fit all systems
            lstManufacturedPriceProfile.Columns.Add("PMod", 41, HorizontalAlignment.Right); // Hidden

            // If they don't have access to the correct scopes for structures, then don't enable the structure ID look up option
            if (!Public_Variables.SelectedCharacter.StructureMarketsAccess & !Public_Variables.SelectedCharacter.PublicStructuresAccess)
            {
                btnAddStructureIDs.Enabled = false;
                btnViewSavedStructures.Enabled = false;
            }
            else
            {
                btnAddStructureIDs.Enabled = true;
                btnViewSavedStructures.Enabled = true;
            }

            // Tool Tips
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttUpdatePrices.SetToolTip(cmbRawMatsSplitPrices, "Buy = Use Buy orders only" + Constants.vbCrLf + "Sell = Use Sell orders only" + Constants.vbCrLf + "Buy & Sell = Use All orders" + Constants.vbCrLf + "Min = Minimum" + Constants.vbCrLf + "Max = Maximum" + Constants.vbCrLf + "Avg = Average" + Constants.vbCrLf + "Med = Median" + Constants.vbCrLf + "Percentile = 5% of the top prices (Buy) or bottom (Sell, All) ");
                ttUpdatePrices.SetToolTip(cmbItemsSplitPrices, "Buy = Use Buy orders only" + Constants.vbCrLf + "Sell = Use Sell orders only" + Constants.vbCrLf + "Buy & Sell = Use All orders" + Constants.vbCrLf + "Min = Minimum" + Constants.vbCrLf + "Max = Maximum" + Constants.vbCrLf + "Avg = Average" + Constants.vbCrLf + "Med = Median" + Constants.vbCrLf + "Percentile = 5% of the top prices (Buy) or bottom (Sell, All) ");
                ttUpdatePrices.SetToolTip(btnAddStructureIDs, "Use to add structures you have access to using with markets for downloading prices from structures.");
            }

            FirstPriceChargeTypesComboLoad = true;
            FirstPriceShipTypesComboLoad = true;
            IgnoreSystemCheckUpdates = false;

            PriceTypeUpdate = false;
            PriceSystemUpdate = false;
            PriceRegionUpdate = false;
            PriceModifierUpdate = false;
            PreviousPriceType = "";
            PreviousRegion = "";
            PreviousSystem = "";
            PreviousPriceMod = "";
            TabPressed = false;
            UpdatingCombo = false;

            PPSystemsLoaded = false;
            PPRegionsLoaded = false;

            PriceHistoryUpdateCount = 0;
            PriceOrdersUpdateCount = 0;
            Public_Variables.CancelUpdatePrices = false;
            Public_Variables.CancelManufacturingTabCalc = false;
            Public_Variables.CancelThreading = false;

            InitUpdatePricesTab();

            // ****************************************
            // **** Manufacturing Tab Initializations ****
            // ****************************************
            CalcRelicCheckboxes = (CheckBox[])ControlArrayUtils.getControlArray(this, MyControls, "chkCalcRERelic");
            CalcDecryptorCheckBoxes = (CheckBox[])ControlArrayUtils.getControlArray(this, MyControls, "chkCalcDecryptor");

            // Add the columns based on settings
            RefreshManufacturingTabColumns();

            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                // Decryptor Tool tips
                ttUpdatePrices.SetToolTip(chkCalcDecryptor2, "Augmentation - (PM: 0.6, Runs: +9, ME: -2, TE: +1)");
                ttUpdatePrices.SetToolTip(chkCalcDecryptor3, "Optimized Augmentation - (PM: 0.9, Runs: +7, ME +2 TE: 0)");
                ttUpdatePrices.SetToolTip(chkCalcDecryptor4, "Symmetry - (PM: 1.0, Runs: +2, ME: +1, TE: +4)");
                ttUpdatePrices.SetToolTip(chkCalcDecryptor5, "Process - (PM: 1.1, Runs: 0, ME: +3, TE: +3)");
                ttUpdatePrices.SetToolTip(chkCalcDecryptor6, "Accelerant - (PM: 1.2, Runs: +1, ME: +2, TE: +5)");
                ttUpdatePrices.SetToolTip(chkCalcDecryptor7, "Parity - (PM: 1.5, Runs: +3, ME: +1, TE: -1)");
                ttUpdatePrices.SetToolTip(chkCalcDecryptor8, "Attainment - (PM: 1.8, Runs: +4, ME: -1, TE: +2)");
                ttUpdatePrices.SetToolTip(chkCalcDecryptor9, "Optimized Attainment - (PM: 1.9, Runs: +2, ME: +1, TE: -1)");

                ttUpdatePrices.SetToolTip(txtCalcProdLines, "Will assume Number of BPs is same as Number of Production lines for Calculations");
                ttUpdatePrices.SetToolTip(chkCalcTaxes, "Sales Taxes to set up a sell order at an NPC Station for the Item");
                ttUpdatePrices.SetToolTip(chkCalcFees, "Broker's Fees to set up a sell order at an NPC Station for the Item");

                ttUpdatePrices.SetToolTip(txtCalcProdLines, "Enter the number of Manufacturing Lines you have to build items per day for calculations. Calculations will assume the same number of BPs used." + Constants.vbCrLf + "Calculations for components will also use this value. Double-Click to enter max runs for this character.");
                ttUpdatePrices.SetToolTip(txtCalcLabLines, "Enter the number of Laboratory Lines you have to invent per day for calculations. Double-Click to enter max runs for this character.");

                ttUpdatePrices.SetToolTip(txtCalcSVRThreshold, "No results with an SVR lower than the number entered will be returned.");

            }
            FirstLoadCalcBPTypes = true;
            FirstManufacturingGridLoad = true;

            // If there is an error in price updates, only show once
            Public_Variables.ShownPriceUpdateError = false;

            UpdatingStructureIDText = false;

            InitManufacturingTab();

            // ****************************************
            // **** Datacores Tab Initializations *****
            // ****************************************
            DCSkillCheckBoxes = (CheckBox[])ControlArrayUtils.getControlArray(this, MyControls, "chkDC");
            DCSkillLabels = (Label[])ControlArrayUtils.getControlArray(this, MyControls, "lblDatacore");
            DCSkillCombos = (ComboBox[])ControlArrayUtils.getControlArray(this, MyControls, "cmbDCSkillLevel");
            DCCorpCheckBoxes = (CheckBox[])ControlArrayUtils.getControlArray(this, MyControls, "chkDCCorp");
            DCCorpLabels = (Label[])ControlArrayUtils.getControlArray(this, MyControls, "lblDCCorp");
            DCCorpTextboxes = (TextBox[])ControlArrayUtils.getControlArray(this, MyControls, "txtDCStanding");

            FirstShowDatacores = true;
            DCRegionsLoaded = false;
            rbtnDCUpdatedPrices.Checked = true;
            TotalSelectedIPH = 0d;

            txtDCTotalOptIPH.Text = "0.00";
            txtDCTotalSelectedIPH.Text = "0.00";

            // Width 1124, 21 for scrollbar, 25 for check
            lstDC.Columns.Add("", -2, HorizontalAlignment.Center); // For check
            lstDC.Columns.Add("Corporation", 120, HorizontalAlignment.Left);
            lstDC.Columns.Add("Agent", 152, HorizontalAlignment.Left);
            lstDC.Columns.Add("LVL", 40, HorizontalAlignment.Center);
            lstDC.Columns.Add("Standing", 60, HorizontalAlignment.Right);
            lstDC.Columns.Add("Location", 250, HorizontalAlignment.Left); // System name and security (station name?)
            lstDC.Columns.Add("DataCore Skill", 166, HorizontalAlignment.Left);
            lstDC.Columns.Add("DataCore Price", 88, HorizontalAlignment.Right);
            lstDC.Columns.Add("Price From", 65, HorizontalAlignment.Center); // Load with system name, region, or multiple
            lstDC.Columns.Add("Core/Day", 62, HorizontalAlignment.Right);
            lstDC.Columns.Add("Isk per Hour", 75, HorizontalAlignment.Right);
            DCIPH_COLUMN = 10; // For totaling up the price

            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttDatacores.SetToolTip(rbtnDCSystemPrices, "Max Buy Order from System used for Datacore Price");
                ttDatacores.SetToolTip(rbtnDCRegionPrices, "Max Buy Order from Region used for Datacore Price");
                ttDatacores.SetToolTip(lblDCGreenBackColor, "Green Background: Max IPH Agent");
                ttDatacores.SetToolTip(lblDCBlueText, "Blue Text: Current Research Agents");
                ttDatacores.SetToolTip(lblDCGrayText, "Gray Text: Unavailable Research Agent");
                ttDatacores.SetToolTip(lblDCOrangeText, "Orange Text: Research Agent is in Low Sec");
                ttDatacores.SetToolTip(lblDCRedText, "Red Text: Research Agent is in Null Sec");
            }

            // ****************************************
            // **** Mining Tab Initializations ********
            // ****************************************
            // Width 700, 21 for scrollbar - 679 total space
            lstMineGrid.Columns.Add("Ore ID", 0, HorizontalAlignment.Right); // Hidden
            lstMineGrid.Columns.Add("Ore Name", MineOreNameColumnWidth, HorizontalAlignment.Left);
            lstMineGrid.Columns.Add("Refine Type", 70, HorizontalAlignment.Left);
            lstMineGrid.Columns.Add("Unit Price", 67, HorizontalAlignment.Right);
            lstMineGrid.Columns.Add("Refine Yield", MineRefineYieldColumnWidth, HorizontalAlignment.Center);
            lstMineGrid.Columns.Add("Crystal", MineCrystalColumnWidth, HorizontalAlignment.Left);
            // lstMineGrid.Columns.Add("m3/Cycle", 60, HorizontalAlignment.Right)
            lstMineGrid.Columns.Add("RP", 47, HorizontalAlignment.Right);
            lstMineGrid.Columns.Add("RV", 27, HorizontalAlignment.Right);
            lstMineGrid.Columns.Add("Drone yield", 65, HorizontalAlignment.Right);
            lstMineGrid.Columns.Add("Units/Hour", 64, HorizontalAlignment.Right);
            lstMineGrid.Columns.Add("Isk per Hour", 100, HorizontalAlignment.Right);
            lstMineGrid.Columns.Add("CycleTime", 0, HorizontalAlignment.Right); // Hidden

            MineProcessingCheckBoxes = (CheckBox[])ControlArrayUtils.getControlArray(this, MyControls, "chkOreProcessing");
            MineProcessingLabels = (Label[])ControlArrayUtils.getControlArray(this, MyControls, "lblOreProcessing");
            MineProcessingCombos = (ComboBox[])ControlArrayUtils.getControlArray(this, MyControls, "cmbOreProcessing");

            InitMiningTab();

            // Tool Tips
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttMining.SetToolTip(chkMineT2Crystals, "Use T2 Crystals when skills and equipment allow");
                ttMining.SetToolTip(gbMineHauling, "If no hauling, results will take into account Round Trip time to the station based on M3 of Ship and fill times");
                ttMining.SetToolTip(btnMineSaveAllSettings, "Saves all current options on Mining Screen");
                ttMining.SetToolTip(chkMineForemanLaserOpBoost, "Click to cycle through No Booster, T1 or T2");
                ttMining.SetToolTip(chkMineForemanLaserRangeBoost, "Click to cycle through No Booster, T1 or T2");
                ttMining.SetToolTip(cmbMineIndustReconfig, "Select skill level to include Heavy Water costs per hour, set to 0 to ignore");
                ttMining.SetToolTip(chkMineIndyCoreDeployedMode, "To include Heavy Water costs for deployed mode, select Industrial Reconfiguration skill other than 0");
                ttMining.SetToolTip(lblMineExhumers, "For Prospect Mining Frigate, use the Exhumers Combobox to set the Expedition Frigate skill level.");
                ttMining.SetToolTip(chkMineBoosterDroneRig1, "Check again for T2 Links");
                ttMining.SetToolTip(chkMineBoosterDroneRig2, "Check again for T2 Links");
                ttMining.SetToolTip(chkMineBoosterDroneRig3, "Check again for T2 Links");
                ttMining.SetToolTip(chkMineForemanLaserRangeBoost, "Check again For T2 Links");
                ttMining.SetToolTip(chkMineForemanLaserOpBoost, "Check again For T2 Links");
            }

            // ****************************************
            // **** All Tabs **************************
            // ****************************************

            // For indy jobs viewer
            Public_Variables.FirstIndustryJobsViewerLoad = true;

            // For handling click events
            UpdatingCheck = false;

            Public_Variables.ReprocessingPlantOpen = false;
            Public_Variables.OreBeltFlipOpen = false;
            Public_Variables.IceBeltFlipOpen = false;

            // All set, we are done loading
            Public_Variables.FirstLoad = false;

            // Refresh the refining rates on the mining tab now that it's loaded
            RefreshMiningTabRefiningRates();
            ttBP = _ttBP;
            chkSystems1 = _chkSystems1;
            _chkSystems1.Name = "chkSystems1";

        }

        ~frmMain()
        {
            try
            {
                Application.DoEvents();
                Public_Variables.EVEDB.CloseDB();
            }
            catch (Exception)
            {
            }
        }

        private void frmMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            Application.DoEvents();

            if (ShowSupportSplash())
            {
                var f1 = new frmsupportSplash();
                f1.ShowDialog();
            }
        }

        // If the text file is there, read the counter in it. Only show the splash on the first run and after every 100 uses
        private bool ShowSupportSplash()
        {
            bool ReturnValue = true;

            try
            {
                string FilePath = Path.Combine(Public_Variables.DynamicFilePath, "SupportCounter.txt");

                if (File.Exists(FilePath))
                {
                    // See what the count is
                    string fileReader;
                    fileReader = File.ReadAllText(FilePath);

                    int Counter;

                    if (!string.IsNullOrEmpty(fileReader))
                    {
                        Counter = Conversions.ToInteger(fileReader) + 1;
                    }
                    else
                    {
                        Counter = 1;
                    }

                    // If the counter divides evenly by 100, show the form
                    if (Counter % 100 != 0)
                    {
                        ReturnValue = false;
                    }

                    // Always increment counter
                    File.Delete(FilePath);
                    File.Create(FilePath).Dispose();
                    StreamWriter tfile;
                    tfile = My.MyProject.Computer.FileSystem.OpenTextFileWriter(FilePath, true);
                    tfile.WriteLine(Counter.ToString());
                    tfile.Close();
                }

                else
                {
                    // Make the file for counting
                    File.Create(FilePath).Dispose();
                    var objWriter = new StreamWriter(FilePath);
                    objWriter.Write("1");
                    objWriter.Close();
                }
            }

            catch (Exception ex)
            {
                ReturnValue = false;
            }

            return ReturnValue;

        }

        public Collection MyControls
        {
            get
            {
                return m_ControlsCollection.Controls;
            }
        }

        // Loads up the facilities for the selected character
        public void LoadFacilities(ProgramLocation FacilityLocation = default, ProductionType FacilityType = ProductionType.None)
        {

            // See what ID we use for the facilities
            long CharID = 0L;
            if (SettingsVariables.UserApplicationSettings.SaveFacilitiesbyChar)
            {
                // Use the ID sent
                CharID = Public_Variables.SelectedCharacter.ID;
            }
            else
            {
                CharID = Public_Variables.CommonLoadBPsID;
            }

            if (FacilityType == ProductionType.None)
            {
                // Initialize the BP facility
                Form argControlForm = this;
                BPTabFacility.InitializeControl(CharID, ProgramLocation.BlueprintTab, ProductionType.Manufacturing, ref argControlForm);

                // Load up the Manufacturing tab facilities
                Form argControlForm1 = this;
                CalcBaseFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.Manufacturing, ref argControlForm1);
                Form argControlForm2 = this;
                CalcInventionFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.Invention, ref argControlForm2);
                Form argControlForm3 = this;
                CalcT3InventionFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.T3Invention, ref argControlForm3);
                Form argControlForm4 = this;
                CalcCopyFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.Copying, ref argControlForm4);
                Form argControlForm5 = this;
                CalcSupersFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.SuperManufacturing, ref argControlForm5);
                Form argControlForm6 = this;
                CalcCapitalsFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.CapitalManufacturing, ref argControlForm6);
                Form argControlForm7 = this;
                CalcSubsystemsFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.SubsystemManufacturing, ref argControlForm7);
                Form argControlForm8 = this;
                CalcReactionsFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.Reactions, ref argControlForm8);
                Form argControlForm9 = this;
                CalcBoostersFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.BoosterManufacturing, ref argControlForm9);

                // Two facilities with check options - load the one they save
                if (SettingsVariables.UserManufacturingTabSettings.CheckCapitalComponentsFacility)
                {
                    Form argControlForm10 = this;
                    CalcComponentsFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.CapitalComponentManufacturing, ref argControlForm10);
                }
                else
                {
                    Form argControlForm11 = this;
                    CalcComponentsFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.ComponentManufacturing, ref argControlForm11);
                }

                if (SettingsVariables.UserManufacturingTabSettings.CheckT3DestroyerFacility)
                {
                    Form argControlForm12 = this;
                    CalcT3ShipsFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.T3DestroyerManufacturing, ref argControlForm12);
                }
                else
                {
                    Form argControlForm13 = this;
                    CalcT3ShipsFacility.InitializeControl(CharID, ProgramLocation.ManufacturingTab, ProductionType.T3CruiserManufacturing, ref argControlForm13);
                }

                // Load the mining tab refinery
                Form argControlForm14 = this;
                MineRefineFacility.InitializeControl(CharID, ProgramLocation.MiningTab, ProductionType.Reprocessing, ref argControlForm14);
            }

            else // Multi-save
            {
                // Need to see what facility to reload
                ProductionType SavedPT;

                // They saved a facility on the manufacturing tab, so init all the facilities on the bp tab and reload the current facility
                if (FacilityLocation == ProgramLocation.BlueprintTab)
                {
                    // Get the current facility that's viewed
                    SavedPT = BPTabFacility.GetSelectedFacility().FacilityProductionType;
                    // Just reload all the facilities
                    BPTabFacility.InitializeFacilities(FacilityLocation);
                }
                // Now reload the one that was shown
                // Call BPTabFacility.InitializeControl(CharID, FacilityLocation, SavedPT, Me)
                else if (FacilityLocation == ProgramLocation.MiningTab)
                {
                    // Load the mining tab refinery
                    MineRefineFacility.InitializeFacilities(FacilityLocation);
                }
                else
                {
                    // Init the manufacturing tab facilities
                    switch (FacilityType)
                    {
                        case ProductionType.BoosterManufacturing:
                            {
                                CalcBoostersFacility.InitializeFacilities(FacilityLocation, ProductionType.BoosterManufacturing);
                                break;
                            }
                        case ProductionType.CapitalComponentManufacturing:
                            {
                                CalcComponentsFacility.InitializeFacilities(FacilityLocation, ProductionType.CapitalComponentManufacturing);
                                break;
                            }
                        case ProductionType.CapitalManufacturing:
                            {
                                CalcCapitalsFacility.InitializeFacilities(FacilityLocation, ProductionType.CapitalManufacturing);
                                break;
                            }
                        case ProductionType.ComponentManufacturing:
                            {
                                CalcComponentsFacility.InitializeFacilities(FacilityLocation, ProductionType.ComponentManufacturing);
                                break;
                            }
                        case ProductionType.Copying:
                            {
                                CalcCopyFacility.InitializeFacilities(FacilityLocation, ProductionType.Copying);
                                break;
                            }
                        case ProductionType.Invention:
                            {
                                CalcInventionFacility.InitializeFacilities(FacilityLocation, ProductionType.Invention);
                                break;
                            }
                        case ProductionType.Manufacturing:
                            {
                                CalcBaseFacility.InitializeFacilities(FacilityLocation, ProductionType.Manufacturing);
                                break;
                            }
                        case ProductionType.Reactions:
                            {
                                CalcReactionsFacility.InitializeFacilities(FacilityLocation, ProductionType.Reactions);
                                break;
                            }
                        case ProductionType.SubsystemManufacturing:
                            {
                                CalcSubsystemsFacility.InitializeFacilities(FacilityLocation, ProductionType.SubsystemManufacturing);
                                break;
                            }
                        case ProductionType.SuperManufacturing:
                            {
                                CalcSupersFacility.InitializeFacilities(FacilityLocation, ProductionType.SuperManufacturing);
                                break;
                            }
                        case ProductionType.T3CruiserManufacturing:
                            {
                                CalcT3ShipsFacility.InitializeFacilities(FacilityLocation, ProductionType.T3CruiserManufacturing);
                                break;
                            }
                        case ProductionType.T3DestroyerManufacturing:
                            {
                                CalcT3ShipsFacility.InitializeFacilities(FacilityLocation, ProductionType.T3DestroyerManufacturing);
                                break;
                            }
                        case ProductionType.T3Invention:
                            {
                                CalcT3InventionFacility.InitializeFacilities(FacilityLocation, ProductionType.T3Invention);
                                break;
                            }
                    }
                }
            }

        }

        // Checks the status of ESI since last updated and displays any messageboxes on yellow or red endpoints
        private void DisplayESIStatusMessages()
        {
            string SQL = "";
            SQLiteDataReader rsStatus;

            var CharacterTokenData = Public_Variables.SelectedCharacter.CharacterTokenData;

            SQL = "SELECT scope, status, purpose FROM ESI_STATUS_ITEMS, ESI_ENDPOINT_ROUTE_TO_SCOPE WHERE route = endpoint_route";
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsStatus = Public_Variables.DBCommand.ExecuteReader();

            while (rsStatus.Read())
            {
                // Read through each status and show only those that they have scopes for
                {
                    ref var withBlock = ref CharacterTokenData.Scopes;
                    // Required
                    if ((rsStatus.GetString(0) ?? "") == ESI.ESICharacterSkillsScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    // Personal Scopes
                    if (withBlock.Contains(ESI.ESICharacterIndustryJobsScope) & (rsStatus.GetString(0) ?? "") == ESI.ESICharacterIndustryJobsScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    if (withBlock.Contains(ESI.ESICharacterStandingsScope) & (rsStatus.GetString(0) ?? "") == ESI.ESICharacterStandingsScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    if (withBlock.Contains(ESI.ESICharacterResearchAgentsScope) & (rsStatus.GetString(0) ?? "") == ESI.ESICharacterResearchAgentsScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    if (withBlock.Contains(ESI.ESICharacterBlueprintsScope) & (rsStatus.GetString(0) ?? "") == ESI.ESICharacterBlueprintsScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    if (withBlock.Contains(ESI.ESICharacterAssetScope) & (rsStatus.GetString(0) ?? "") == ESI.ESICharacterAssetScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    // Corporation scopes
                    if (withBlock.Contains(ESI.ESICorporationMembership) & (rsStatus.GetString(0) ?? "") == ESI.ESICorporationMembership & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    if (withBlock.Contains(ESI.ESICorporationIndustryJobsScope) & (rsStatus.GetString(0) ?? "") == ESI.ESICorporationIndustryJobsScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    if (withBlock.Contains(ESI.ESICorporationBlueprintsScope) & (rsStatus.GetString(0) ?? "") == ESI.ESICorporationBlueprintsScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    if (withBlock.Contains(ESI.ESICorporationAssetScope) & (rsStatus.GetString(0) ?? "") == ESI.ESICorporationAssetScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    // Structures
                    if (withBlock.Contains(ESI.ESIUniverseStructuresScope) & (rsStatus.GetString(0) ?? "") == ESI.ESIUniverseStructuresScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }

                    if (withBlock.Contains(ESI.ESIStructureMarketsScope) & (rsStatus.GetString(0) ?? "") == ESI.ESIStructureMarketsScope & rsStatus.GetString(1) != "green")
                    {
                        DisplayESIStatusMessage(rsStatus.GetString(1), rsStatus.GetString(0), rsStatus.GetString(2));
                    }
                }

            }

            rsStatus.Close();

        }

        private void DisplayESIStatusMessage(string Status, string Scope, string Purpose)
        {
            switch (Status ?? "")
            {
                case "yellow":
                    {
                        Interaction.MsgBox("ESI Is experincing issues with the " + Scope + " scope " + Purpose + " And you may Not have access to certain data until fixed.");
                        break;
                    }
                case "red":
                    {
                        Interaction.MsgBox("The " + Scope + " ESI scope Is down And will Not be able to " + Purpose + ". You may Not have access to certain data until fixed.");
                        break;
                    }

                default:
                    {
                        Application.DoEvents();
                        break;
                    }
            }
        }

        #endregion

        #region Form Functions/Procedures

        #region Tool Tip Processing
        // Datacore Tab
        private void lblDCGreenBackColor_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblDCGreenBackColor, "Green Background: Max IPH Agent");
            }
        }

        private void lblDCBlueText_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblDCBlueText, "Blue Text: Current Research Agents");
            }
        }

        private void lblDCGrayText_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblDCGrayText, "Gray Text: Unavailable Research Agent");
            }
        }

        /* TODO ERROR: Skipped WarningDirectiveTrivia
        #Disable Warning IDE1006 ' Naming Styles
        */
        private void lblDCOrangeText_MouseEnter(object sender, EventArgs e)
        {
            /* TODO ERROR: Skipped WarningDirectiveTrivia
            #Enable Warning IDE1006 ' Naming Styles
            */
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblDCOrangeText, "Orange Text: Research Agent is in Low Sec");
            }
        }

        private void lblDCRedText_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblDCRedText, "Red Text: Research Agent is in Null Sec");
            }
        }

        private void rbtnDCSystemPrices_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(rbtnDCSystemPrices, "Max Buy Order from System used for Datacore Price");
            }
        }

        private void rbtnDCRegionPrices_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(rbtnDCRegionPrices, "Max Buy Order from Region used for Datacore Price");
            }
        }

        // Manufacturing Tab
        private void lblCalcColorCode1_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblCalcColorCode1, "Beige Background: Owned Blueprint");
            }
        }

        private void lblCalcColorCode2_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblCalcColorCode2, "Light Blue Background: T2 item with Owned T1 Blueprint (for invention)");
            }
        }

        private void lblCalcColorCode3_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblCalcColorCode3, "Green Text: Unable to T3 Invent Item");
            }
        }

        private void lblCalcColorCode4_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblCalcColorCode4, "Orange Text: Unable to Invent Item");
            }
        }

        private void lblCalcColorCode5_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblCalcColorCode5, "Red Text: Unable to Build Item");
            }
        }

        private void lblCalcColorCode6_MouseEnter(object sender, EventArgs e)
        {
            if (SettingsVariables.UserApplicationSettings.ShowToolTips)
            {
                ttBP.SetToolTip(lblCalcColorCode6, "Green Background: Corp Owned Blueprint");
            }
        }

        #endregion

        #region SVR Functions

        // Determine the Sales per Volume Ratio, which will be the amount of items we can build in 24 hours (include fractions) when sent the region, avg days, and production time in seconds to make ItemsProduced (runs * portion size)
        public string GetItemSVR(long TypeID, long RegionID, int AvgDays, double ProductionTimeSeconds, long ItemsProduced)
        {
            string SQL;
            SQLiteDataReader readerAverage;
            double ItemsperDay;

            // The amount of items we can build in 24 hours (include fractions) divided by the average volume (volume/avgdays)
            // The data is stored as a record per day, so just count up the number of records in the time period (days - might not be the same as days shown)
            // and divide by the sum of the volumes over that time period
            SQL = "SELECT SUM(TOTAL_VOLUME_FILLED)/COUNT(PRICE_HISTORY_DATE) FROM MARKET_HISTORY ";
            SQL += "WHERE TYPE_ID = " + TypeID + " AND REGION_ID = " + RegionID + " ";
            SQL += "AND DATETIME(PRICE_HISTORY_DATE) >= " + " DateTime('" + Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -(AvgDays + 1), DateTime.UtcNow.Date), Public_Variables.SQLiteDateFormat) + "') ";
            SQL += "AND DATETIME(PRICE_HISTORY_DATE) < " + " DateTime('" + Strings.Format(DateTime.UtcNow.Date, Public_Variables.SQLiteDateFormat) + "') ";
            SQL += "AND TOTAL_VOLUME_FILLED IS NOT NULL ";

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerAverage = Public_Variables.DBCommand.ExecuteReader();

            readerAverage.Read();

            if (!(readerAverage.GetValue(0) is DBNull))
            {
                if (ProductionTimeSeconds != 0d)
                {
                    // The number of blueprint runs we can build with the sent production time in a day - Seconds to produce 1, then divide that into seconds per day
                    ItemsperDay = 24 * 60 * 60 / (ProductionTimeSeconds / ItemsProduced);
                    // Take the items per day and compare to the avg sales volume per day, if it's greater than one you can't make enough items in a day to meet demand = good item to build
                    return Strings.FormatNumber(readerAverage.GetDouble(0) / ItemsperDay, 2);
                }
                else
                {
                    // Just want the volume for the day
                    return Strings.FormatNumber(readerAverage.GetDouble(0), 2);
                }
            }
            else
            {
                // Since 0.00 SVR is possible, return nothing instead
                return "-";
            }
        }

        // Updates the SVR value and then returns it as a string for the item associated with the Selected BP
        private string GetBPItemSVR(double ProductionTime)
        {
            ToolStripProgressBar argSentPG = null;
            var MH = new MarketPriceInterface(ref argSentPG);

            Application.UseWaitCursor = true;
            Application.DoEvents();
            var TypeID = new List<long>(); // for just one
            long RegionID = Public_Variables.GetRegionID(SettingsVariables.UserApplicationSettings.SVRAveragePriceRegion);

            TypeID.Add(Public_Variables.SelectedBlueprint.GetItemID());
            PriceHistoryUpdateCount = 0;
            if (!MH.UpdateESIPriceHistory(TypeID, RegionID))
            {
                Interaction.MsgBox("Some prices did not update. Please try again.", Constants.vbInformation, Application.ProductName);
            }

            string ReturnValue = GetItemSVR(TypeID[0], RegionID, Conversions.ToInteger(SettingsVariables.UserApplicationSettings.SVRAveragePriceDuration), ProductionTime, Public_Variables.SelectedBlueprint.GetTotalUnits());

            Application.UseWaitCursor = false;
            Application.DoEvents();

            return ReturnValue;

        }

        #endregion

        private void mnuViewErrorLog_Click(object sender, EventArgs e)
        {
            var f1 = new frmErrorLog();

            f1.Show();

        }

        public void LoadCharacterNamesinMenu()
        {
            // Default character set, now set the menu name on the panel
            mnuCharacter.Text = "Character Loaded: " + Public_Variables.SelectedCharacter.Name;
            // Also, load all characters we have
            SQLiteDataReader rsCharacters;
            string SQL = "SELECT CHARACTER_NAME, CASE WHEN GENDER IS NULL THEN 'male' ELSE GENDER END AS GENDER ";
            SQL += "FROM ESI_CHARACTER_DATA ORDER BY CHARACTER_NAME";
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsCharacters = Public_Variables.DBCommand.ExecuteReader();

            int Counter = 0;

            // Reset all 
            tsCharacter1.Text = "";
            tsCharacter1.Visible = false;
            tsCharacter2.Text = "";
            tsCharacter2.Visible = false;
            tsCharacter3.Text = "";
            tsCharacter3.Visible = false;
            tsCharacter4.Text = "";
            tsCharacter4.Visible = false;
            tsCharacter5.Text = "";
            tsCharacter5.Visible = false;
            tsCharacter6.Text = "";
            tsCharacter6.Visible = false;
            tsCharacter7.Text = "";
            tsCharacter7.Visible = false;
            tsCharacter8.Text = "";
            tsCharacter8.Visible = false;
            tsCharacter9.Text = "";
            tsCharacter9.Visible = false;
            tsCharacter10.Text = "";
            tsCharacter10.Visible = false;
            tsCharacter11.Text = "";
            tsCharacter11.Visible = false;
            tsCharacter12.Text = "";
            tsCharacter12.Visible = false;
            tsCharacter13.Text = "";
            tsCharacter13.Visible = false;
            tsCharacter14.Text = "";
            tsCharacter14.Visible = false;
            tsCharacter15.Text = "";
            tsCharacter15.Visible = false;
            tsCharacter16.Text = "";
            tsCharacter16.Visible = false;
            tsCharacter17.Text = "";
            tsCharacter17.Visible = false;
            tsCharacter18.Text = "";
            tsCharacter18.Visible = false;
            tsCharacter19.Text = "";
            tsCharacter19.Visible = false;
            tsCharacter20.Text = "";
            tsCharacter20.Visible = false;

            while (rsCharacters.Read())
            {
                // Add all the character names to the list for the number we have - only load 20 characters
                switch (Counter)
                {
                    case 0:
                        {
                            tsCharacter1.Text = rsCharacters.GetString(0);
                            var argTS = tsCharacter1;
                            SetCharToolStripImage(ref argTS, rsCharacters.GetString(1));
                            tsCharacter1 = argTS;
                            tsCharacter1.Visible = true;
                            break;
                        }
                    case 1:
                        {
                            tsCharacter2.Text = rsCharacters.GetString(0);
                            var argTS1 = tsCharacter2;
                            SetCharToolStripImage(ref argTS1, rsCharacters.GetString(1));
                            tsCharacter2 = argTS1;
                            tsCharacter2.Visible = true;
                            break;
                        }
                    case 2:
                        {
                            tsCharacter3.Text = rsCharacters.GetString(0);
                            var argTS2 = tsCharacter3;
                            SetCharToolStripImage(ref argTS2, rsCharacters.GetString(1));
                            tsCharacter3 = argTS2;
                            tsCharacter3.Visible = true;
                            break;
                        }
                    case 3:
                        {
                            tsCharacter4.Text = rsCharacters.GetString(0);
                            var argTS3 = tsCharacter4;
                            SetCharToolStripImage(ref argTS3, rsCharacters.GetString(1));
                            tsCharacter4 = argTS3;
                            tsCharacter4.Visible = true;
                            break;
                        }
                    case 4:
                        {
                            tsCharacter5.Text = rsCharacters.GetString(0);
                            var argTS4 = tsCharacter5;
                            SetCharToolStripImage(ref argTS4, rsCharacters.GetString(1));
                            tsCharacter5 = argTS4;
                            tsCharacter5.Visible = true;
                            break;
                        }
                    case 5:
                        {
                            tsCharacter6.Text = rsCharacters.GetString(0);
                            var argTS5 = tsCharacter6;
                            SetCharToolStripImage(ref argTS5, rsCharacters.GetString(1));
                            tsCharacter6 = argTS5;
                            tsCharacter6.Visible = true;
                            break;
                        }
                    case 6:
                        {
                            tsCharacter7.Text = rsCharacters.GetString(0);
                            var argTS6 = tsCharacter7;
                            SetCharToolStripImage(ref argTS6, rsCharacters.GetString(1));
                            tsCharacter7 = argTS6;
                            tsCharacter7.Visible = true;
                            break;
                        }
                    case 7:
                        {
                            tsCharacter8.Text = rsCharacters.GetString(0);
                            var argTS7 = tsCharacter8;
                            SetCharToolStripImage(ref argTS7, rsCharacters.GetString(1));
                            tsCharacter8 = argTS7;
                            tsCharacter8.Visible = true;
                            break;
                        }
                    case 8:
                        {
                            tsCharacter9.Text = rsCharacters.GetString(0);
                            var argTS8 = tsCharacter9;
                            SetCharToolStripImage(ref argTS8, rsCharacters.GetString(1));
                            tsCharacter9 = argTS8;
                            tsCharacter9.Visible = true;
                            break;
                        }
                    case 9:
                        {
                            tsCharacter10.Text = rsCharacters.GetString(0);
                            var argTS9 = tsCharacter10;
                            SetCharToolStripImage(ref argTS9, rsCharacters.GetString(1));
                            tsCharacter10 = argTS9;
                            tsCharacter10.Visible = true;
                            break;
                        }
                    case 10:
                        {
                            tsCharacter11.Text = rsCharacters.GetString(0);
                            var argTS10 = tsCharacter11;
                            SetCharToolStripImage(ref argTS10, rsCharacters.GetString(1));
                            tsCharacter11 = argTS10;
                            tsCharacter11.Visible = true;
                            break;
                        }
                    case 11:
                        {
                            tsCharacter12.Text = rsCharacters.GetString(0);
                            var argTS11 = tsCharacter12;
                            SetCharToolStripImage(ref argTS11, rsCharacters.GetString(1));
                            tsCharacter12 = argTS11;
                            tsCharacter12.Visible = true;
                            break;
                        }
                    case 12:
                        {
                            tsCharacter13.Text = rsCharacters.GetString(0);
                            var argTS12 = tsCharacter13;
                            SetCharToolStripImage(ref argTS12, rsCharacters.GetString(1));
                            tsCharacter13 = argTS12;
                            tsCharacter13.Visible = true;
                            break;
                        }
                    case 13:
                        {
                            tsCharacter14.Text = rsCharacters.GetString(0);
                            var argTS13 = tsCharacter14;
                            SetCharToolStripImage(ref argTS13, rsCharacters.GetString(1));
                            tsCharacter14 = argTS13;
                            tsCharacter14.Visible = true;
                            break;
                        }
                    case 14:
                        {
                            tsCharacter15.Text = rsCharacters.GetString(0);
                            var argTS14 = tsCharacter15;
                            SetCharToolStripImage(ref argTS14, rsCharacters.GetString(1));
                            tsCharacter15 = argTS14;
                            tsCharacter15.Visible = true;
                            break;
                        }
                    case 15:
                        {
                            tsCharacter16.Text = rsCharacters.GetString(0);
                            var argTS15 = tsCharacter16;
                            SetCharToolStripImage(ref argTS15, rsCharacters.GetString(1));
                            tsCharacter16 = argTS15;
                            tsCharacter16.Visible = true;
                            break;
                        }
                    case 16:
                        {
                            tsCharacter17.Text = rsCharacters.GetString(0);
                            var argTS16 = tsCharacter17;
                            SetCharToolStripImage(ref argTS16, rsCharacters.GetString(1));
                            tsCharacter17 = argTS16;
                            tsCharacter17.Visible = true;
                            break;
                        }
                    case 17:
                        {
                            tsCharacter18.Text = rsCharacters.GetString(0);
                            var argTS17 = tsCharacter18;
                            SetCharToolStripImage(ref argTS17, rsCharacters.GetString(1));
                            tsCharacter18 = argTS17;
                            tsCharacter18.Visible = true;
                            break;
                        }
                    case 18:
                        {
                            tsCharacter19.Text = rsCharacters.GetString(0);
                            var argTS18 = tsCharacter19;
                            SetCharToolStripImage(ref argTS18, rsCharacters.GetString(1));
                            tsCharacter19 = argTS18;
                            tsCharacter19.Visible = true;
                            break;
                        }
                    case 19:
                        {
                            tsCharacter20.Text = rsCharacters.GetString(0);
                            var argTS19 = tsCharacter20;
                            SetCharToolStripImage(ref argTS19, rsCharacters.GetString(1));
                            tsCharacter20 = argTS19;
                            tsCharacter20.Visible = true;
                            break;
                        }
                }
                Counter += 1; // increment
            }

            rsCharacters.Close();

        }

        private void SetCharToolStripImage(ref ToolStripMenuItem TS, string Gender)
        {
            if ((Gender ?? "") == Public_Variables.Male)
            {
                TS.Image = My.Resources.Resources._46_64_1;
            }
            else
            {
                TS.Image = My.Resources.Resources._46_64_2;
            }
            TS.ImageTransparentColor = Color.White;
        }

        private void LoadSelectedCharacter(string ToolStripText)
        {
            Cursor = Cursors.WaitCursor;
            Public_Variables.LoadCharacter(ToolStripText, false);
            ResetTabs(); // Reload all tabs
                         // New character so make sure the facilities reflect that
            LoadFacilities();
            // Refresh bp in case the facility was different for that bp
            RefreshBP();
            Public_Variables.PlayNotifySound();
            mnuCharacter.Text = "Character Loaded: " + ToolStripText;
        }

        // Predicate for finding the BuildBuyItem in full list
        public bool FindBBItem(Public_Variables.BuildBuyItem Item)
        {
            if (BBItemtoFind == Item.ItemID)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private void ProcessT2MatSelection()
        {
            if (!Public_Variables.FirstLoad & !UpdatingCheck)
            {
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    RefreshBP();
                }
            }
        }

        private void frmMain_Activated(object sender, EventArgs e)
        {
            // If they don't have access to the correct scopes for structures, then don't enable the structure ID look up option
            if (!Public_Variables.SelectedCharacter.StructureMarketsAccess & !Public_Variables.SelectedCharacter.PublicStructuresAccess)
            {
                btnAddStructureIDs.Enabled = false;
                btnViewSavedStructures.Enabled = false;
            }
            else
            {
                btnAddStructureIDs.Enabled = true;
                btnViewSavedStructures.Enabled = true;
            }

        }

        // Set all the tool strips for characters since I can't process them if they aren't set at runtime
        private void CharacterNameToolStrip_Click(object sender, EventArgs e)
        {
            LoadSelectedCharacter(((ToolStripMenuItem)sender).Text);
        }


        // After initializing everything, refresh the tabs so they draw fast on first click
        private void frmMain_Load(object sender, EventArgs e)
        {
            foreach (TabPage temptab in tabMain.TabPages)
            {
                tabMain.SelectTab(temptab.Name);
                tabMain.SelectedTab.Refresh();
            }

            // Reset to bp tab
            tabMain.SelectTab(0);

            // Add a mouse down handler for the blueprint tab to enable forward and back loading of bps from mouse
            tabBlueprints.MouseDown += MouseDownHandling;
            MouseDownSetting(tabBlueprints);

            // Done loading
            Public_Variables.SetProgress("");

        }

        // Adds mouse down handlers for all controls of the parent
        private void MouseDownSetting(Control parentCtr)
        {

            foreach (Control ctr in parentCtr.Controls)
            {
                ctr.MouseDown += MouseDownHandling;
                MouseDownSetting(ctr);
            }

        }

        // Function to deal with mouse down events to load next or previous blueprint
        private void MouseDownHandling(object sender, MouseEventArgs e)
        {

            // Pause handler for txtbpruns from losing focus so the num bps are updated correctly
            txtBPRuns.LostFocus -= txtBPRuns_LostFocus;
            if (e.Button == MouseButtons.XButton1)
            {
                LoadPreviousBlueprint();
            }
            else if (e.Button == MouseButtons.XButton2)
            {
                LoadNextBlueprint();
            }
            txtBPRuns.LostFocus += txtBPRuns_LostFocus;

        }

        private void pictBP_DoubleClick(object sender, EventArgs e)
        {
            SelectBlueprint();
        }

        // Loads a BP sent from a double click on shopping list or manufacturing list, or loading history
        public void LoadBPfromEvent(long BPID, string BuildType, string Inputs, Public_Variables.SentFromLocation SentFrom, IndustryFacility BuildFacility, IndustryFacility ComponentFacility, IndustryFacility CapCompentFacility, IndustryFacility InventionFacility, IndustryFacility CopyFacility, bool IncludeTaxes, Public_Variables.BrokerFeeInfo BrokerFeeData, string MEValue, string TEValue, string SentRuns, string ManufacturingLines, string LaboratoryLines, string NumBPs, string AddlCosts, bool PPUCheck, string CompareType = "", BuildMatType T2T3MatType = default)
        {
            int BPTech;
            string DecryptorName = Public_Variables.None;
            var BPDecryptor = new Decryptor();
            SQLiteDataReader readerBP;
            string SQL;
            int AdjustedRuns = 0;

            int TempLines = Conversions.ToInteger(ManufacturingLines);

            SQL = "SELECT BLUEPRINT_NAME, TECH_LEVEL, PORTION_SIZE FROM ALL_BLUEPRINTS WHERE BLUEPRINT_ID = " + BPID;

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerBP = Public_Variables.DBCommand.ExecuteReader();

            readerBP.Read();
            cmbBPBlueprintSelection.TextChanged -= cmbBPBlueprintSelection_TextChanged;
            cmbBPBlueprintSelection.Text = readerBP.GetString(0);
            SelectedBPText = readerBP.GetString(0);
            cmbBPBlueprintSelection.TextChanged += cmbBPBlueprintSelection_TextChanged;
            BPTech = readerBP.GetInt32(1);
            if (SentFrom == Public_Variables.SentFromLocation.BlueprintTab)
            {
                AdjustedRuns = (int)Math.Round(Math.Ceiling(Conversions.ToInteger(SentRuns) / (double)readerBP.GetInt64(2)));
            }
            else
            {
                AdjustedRuns = Conversions.ToInteger(SentRuns);
            }

            if (BPTech == (int)Public_Variables.BPTechLevel.T2 | BPTech == (int)Public_Variables.BPTechLevel.T3)
            {
                // Set the decryptor
                if ((Inputs ?? "") != Public_Variables.None)
                {
                    if (!Conversions.ToBoolean(Strings.InStr(Inputs, "No Decryptor")))
                    {
                        if (BPTech == 2)
                        {
                            DecryptorName = Inputs;
                        }
                        else if (Strings.InStr(Inputs, "|") != 0) // For T3
                        {
                            DecryptorName = Inputs.Substring(0, Strings.InStr(Inputs, "|") - 1);
                        }
                        else if (Strings.InStr(Inputs, " - ") != 0)
                        {
                            DecryptorName = Inputs.Substring(0, Strings.InStr(Inputs, "-") - 2);
                        }
                    }
                }

                BPDecryptor = SelectDecryptor(DecryptorName);

                if (BPTech == 3)
                {
                    LoadingT3Decryptors = true;
                    cmbBPT3Decryptor.Text = BPDecryptor.Name;
                    LoadingT3Decryptors = false;

                    // Also load the relic
                    LoadingRelics = true;
                    string TempRelic = "";
                    if (Strings.InStr(Inputs, "|") != 0) // For T3
                    {
                        TempRelic = Inputs.Substring(Strings.InStr(Inputs, "|")); // Removed the -1 in the substring it was including | in the SQL Query
                    }
                    else if (Strings.InStr(Inputs, " - ") != 0)
                    {
                        TempRelic = Inputs.Substring(Strings.InStr(Inputs, "-") + 1);
                    }

                    SQL = "SELECT typeName FROM INVENTORY_TYPES, INDUSTRY_ACTIVITY_PRODUCTS WHERE productTypeID =" + BPID + " ";
                    SQL += "And typeID = blueprintTypeID And activityID = 8 And typeName Like '%" + TempRelic + "%'";

                    Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                    SQLiteDataReader readerRelic;
                    readerRelic = Public_Variables.DBCommand.ExecuteReader();
                    readerRelic.Read();
                    cmbBPRelic.Items.Clear();
                    cmbBPRelic.Text = readerRelic.GetString(0);
                    readerRelic.Close();
                    LoadingRelics = false;
                    RelicsLoaded = false; // Allow reload on drop down

                    // Check the include cost/time
                    chkBPIncludeT3Costs.Checked = InventionFacility.IncludeActivityCost;
                    chkBPIncludeT3Time.Checked = InventionFacility.IncludeActivityTime;
                }

                // Check the include cost/time
                else if (Inputs != "Unknown") // T2
                                              // Unknown inputs is T2 BPO or pre-industry patch
                {
                    LoadingInventionDecryptors = true;
                    cmbBPInventionDecryptor.Text = BPDecryptor.Name;
                    LoadingInventionDecryptors = false;

                    if (!(InventionFacility == null))
                    {
                        chkBPIncludeInventionCosts.Checked = InventionFacility.IncludeActivityCost;
                        chkBPIncludeInventionTime.Checked = InventionFacility.IncludeActivityTime;
                    }
                    else
                    {
                        chkBPIncludeInventionCosts.Checked = true;
                        chkBPIncludeInventionTime.Checked = true;
                    }

                    if (!(CopyFacility == null))
                    {
                        chkBPIncludeCopyCosts.Checked = CopyFacility.IncludeActivityCost;
                        chkBPIncludeCopyTime.Checked = CopyFacility.IncludeActivityTime;
                    }
                    else
                    {
                        chkBPIncludeCopyCosts.Checked = true;
                        chkBPIncludeCopyTime.Checked = true;
                    }

                    chkBPIgnoreInvention.Checked = false;
                }
                else
                {
                    chkBPIgnoreInvention.Checked = true;

                } // mark as t2 bpo or any T2 BPC that wasn't invented

                // Need to calculate the number of bps based on the bp
                if (chkCalcAutoCalcT2NumBPs.Checked)
                {
                    txtBPNumBPs.Text = GetUsedNumBPs(BPID, BPTech, AdjustedRuns, TempLines, Conversions.ToInteger(NumBPs), BPDecryptor.RunMod).ToString();
                }
            }
            else
            {
                // T1
                txtBPNumBPs.Text = NumBPs;
            }

            // We need to set each facility individually for later use
            if (SentFrom != Public_Variables.SentFromLocation.ShoppingList) // shopping list doesn't send facilities so just use what is already loaded on bp tab
            {
                BPTabFacility.UpdateFacility((IndustryFacility)BuildFacility.Clone());
                BPTabFacility.UpdateFacility((IndustryFacility)ComponentFacility.Clone());
                BPTabFacility.UpdateFacility((IndustryFacility)CapCompentFacility.Clone());
                if (BPTech == (int)Public_Variables.BPTechLevel.T2 | BPTech == 3)
                {
                    BPTabFacility.UpdateFacility((IndustryFacility)InventionFacility.Clone());
                }
                if (BPTech == 2)
                {
                    BPTabFacility.UpdateFacility((IndustryFacility)CopyFacility.Clone());
                }
            }

            // Common to all settings
            if (!string.IsNullOrEmpty(CompareType)) // if "" then let the BP tab handle it
            {
                if (CompareType == "Components")
                {
                    rbtnBPComponentCopy.Checked = true;
                }
                else
                {
                    rbtnBPRawmatCopy.Checked = true;
                }
            }

            chkBPTaxes.Checked = IncludeTaxes;
            switch (BrokerFeeData.IncludeFee)
            {
                case Public_Variables.BrokerFeeType.SpecialFee:
                    {
                        chkBPBrokerFees.CheckState = CheckState.Indeterminate;
                        txtBPBrokerFeeRate.Text = Strings.FormatPercent(BrokerFeeData.FixedRate, 1);
                        txtBPBrokerFeeRate.Visible = true;
                        break;
                    }
                case Public_Variables.BrokerFeeType.Fee:
                    {
                        chkBPBrokerFees.Checked = true;
                        break;
                    }
                case Public_Variables.BrokerFeeType.NoFee:
                    {
                        chkBPBrokerFees.Checked = false;
                        break;
                    }
            }

            txtBPLines.Text = ManufacturingLines;
            txtBPInventionLines.Text = LaboratoryLines;
            txtBPRelicLines.Text = LaboratoryLines;
            txtBPRuns.Text = AdjustedRuns.ToString();

            txtBPAddlCosts.Text = AddlCosts;
            txtBPME.Text = MEValue;
            txtBPTE.Text = TEValue;
            UpdatingCheck = true;
            chkBPPricePerUnit.Checked = PPUCheck;
            UpdatingCheck = false;

            // T2/T3 Mat
            if (!(T2T3MatType == null))
            {
                switch (T2T3MatType)
                {
                    case BuildMatType.AdvMaterials:
                        {
                            rbtnBPAdvT2MatType.Checked = true;
                            break;
                        }
                    case BuildMatType.ProcessedMaterials:
                        {
                            rbtnBPProcT2MatType.Checked = true;
                            break;
                        }
                    case BuildMatType.RawMaterials:
                        {
                            rbtnBPRawT2MatType.Checked = true;
                            break;
                        }
                }
            }

            // Set the optimize check
            UpdatingCheck = true;
            if (BuildType == "Build/Buy")
            {
                chkBPBuildBuy.Checked = true;
            }
            else
            {
                chkBPBuildBuy.Checked = false;
            }
            UpdatingCheck = false;

            // Show the BP tab 
            tabMain.SelectedTab = tabBlueprints;
            readerBP.Close();

            // Finally, load the blueprint with data in the row selected like it was just selected
            SelectBlueprint(true, SentFrom, true);

        }

        // Loads the popup with all the material break down and usage for invention
        private void lblBPInventionCost_DoubleClick(object sender, EventArgs e)
        {
            var f1 = new frmInventionMats();

            Cursor = Cursors.WaitCursor;

            if (!(Public_Variables.SelectedBlueprint == null))
            {
                if (Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2)
                {
                    f1.MatType = "T2 Invention Materials needed for enough successful BPCs for " + Public_Variables.SelectedBlueprint.GetUserRuns().ToString();
                    if (Public_Variables.SelectedBlueprint.GetUserRuns() == 1L)
                    {
                        f1.MatType = f1.MatType + " Run";
                    }
                    else
                    {
                        f1.MatType = f1.MatType + " Runs";
                    }
                    f1.MaterialList = Public_Variables.SelectedBlueprint.GetInventionMaterials();
                    f1.TotalInventedRuns = Public_Variables.SelectedBlueprint.GetTotalInventedRuns();
                    f1.UserRuns = Public_Variables.SelectedBlueprint.GetUserRuns();
                    f1.ListType = "Invention";
                }
                Cursor = Cursors.Default;
                f1.Show();
            }

        }

        // Loads the popup with all the copy materials and usage for copy jobs
        private void lblBPCopyCosts_DoubleClick(object sender, EventArgs e)
        {
            var f1 = new frmInventionMats();

            if (!(Public_Variables.SelectedBlueprint == null))
            {
                if (Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2)
                {
                    f1.MatType = "T2 Copy Materials needed for enough successful BPCs for " + Public_Variables.SelectedBlueprint.GetUserRuns().ToString();
                    if (Public_Variables.SelectedBlueprint.GetUserRuns() == 1L)
                    {
                        f1.MatType = f1.MatType + " Run";
                    }
                    else
                    {
                        f1.MatType = f1.MatType + " Runs";
                    }
                    f1.MaterialList = Public_Variables.SelectedBlueprint.GetCopyMaterials();
                    f1.TotalInventedRuns = Public_Variables.SelectedBlueprint.GetInventionJobs();
                    f1.ListType = "Copying";
                }
                f1.Show();
            }

        }

        // Loads the popup with all the material break down and usage for T3 invention
        private void lblBPRECost_DoubleClick(object sender, EventArgs e)
        {
            var f1 = new frmInventionMats();

            if (!(Public_Variables.SelectedBlueprint == null))
            {
                if (Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3)
                {
                    f1.MatType = "T3 Invention Materials needed for enough successful BPCs for " + Public_Variables.SelectedBlueprint.GetUserRuns().ToString();
                    if (Public_Variables.SelectedBlueprint.GetUserRuns() == 1L)
                    {
                        f1.MatType = f1.MatType + " Run";
                    }
                    else
                    {
                        f1.MatType = f1.MatType + " Runs";
                    }
                    f1.MaterialList = Public_Variables.SelectedBlueprint.GetInventionMaterials();
                    f1.TotalInventedRuns = Public_Variables.SelectedBlueprint.GetTotalInventedRuns();
                    f1.UserRuns = Public_Variables.SelectedBlueprint.GetUserRuns();
                    f1.ListType = "T3 Invention";
                }
                f1.Show();
            }

        }

        // Loads the popup with all the costs for total raw
        private void lblBPRawTotalCost_DoubleClick(object sender, EventArgs e)
        {
            ShowCostSplitViewer(Public_Variables.SelectedBlueprint.GetRawMaterials().GetTotalMaterialsCost(), "Raw");
        }

        // Loads the popup with all the costs for total components
        private void lblBPTotalCompCost_DoubleClick(object sender, EventArgs e)
        {
            ShowCostSplitViewer(Public_Variables.SelectedBlueprint.GetComponentMaterials().GetTotalMaterialsCost(), "Component");
        }

        // Loads the popup with all the costs for the material cost sent
        private void ShowCostSplitViewer(double MaterialsCost, string MaterialType)
        {
            var f1 = new frmCostSplitViewer();
            CostSplit RawCostSplit;

            // Fill up the array to display
            if (!(Public_Variables.SelectedBlueprint == null))
            {
                f1.CostSplitType = "Total " + MaterialType + " Material Cost Split";
                // Mat cost
                RawCostSplit.SplitName = MaterialType + " Materials Cost";
                RawCostSplit.SplitValue = MaterialsCost;
                f1.CostSplits.Add(RawCostSplit);

                // Add reaction usage if it's a reaction for main bp
                if (Public_Variables.ReactionTypes.Contains(Public_Variables.SelectedBlueprint.GetItemData().GroupName))
                {
                    RawCostSplit.SplitName = "Reaction Facility Usage";
                    RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetReactionFacilityUsage();
                }
                else
                {
                    // Manufacturing Facility usage
                    RawCostSplit.SplitName = "Manufacturing Facilities Usage";
                    RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetManufacturingFacilityUsage();
                }

                f1.CostSplits.Add(RawCostSplit);

                if (Public_Variables.SelectedBlueprint.HasComponents() & chkBPBuildBuy.Checked == true | MaterialType == "Raw")
                {
                    if (Public_Variables.ReactionTypes.Contains(Public_Variables.SelectedBlueprint.GetItemData().GroupName))
                    {
                        // Reactions Facility Usage
                        if (Public_Variables.SelectedBlueprint.GetTotalReactionFacilityUsage() - Public_Variables.SelectedBlueprint.GetReactionFacilityUsage() > 0d)
                        {
                            RawCostSplit.SplitName = "Component Reaction Facilities Usage";
                            RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetTotalReactionFacilityUsage() - Public_Variables.SelectedBlueprint.GetReactionFacilityUsage();
                            f1.CostSplits.Add(RawCostSplit);
                        }
                        // Manufacturing Facility usage for fuel blocks
                        RawCostSplit.SplitName = "Manufacturing Facilities Usage";
                        RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetManufacturingFacilityUsage();
                        f1.CostSplits.Add(RawCostSplit);
                    }

                    // The reaction blueprint won't have components or cap components
                    if (!Public_Variables.ReactionTypes.Contains(Public_Variables.SelectedBlueprint.GetItemData().GroupName))
                    {
                        // Component Facility Usage
                        RawCostSplit.SplitName = "Component Facilities Usage";
                        RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetComponentFacilityUsage();
                        f1.CostSplits.Add(RawCostSplit);

                        // Capital Component Facility Usage
                        switch (Public_Variables.SelectedBlueprint.GetItemGroupID())
                        {
                            case (int)Public_Variables.ItemIDs.TitanGroupID:
                            case (int)Public_Variables.ItemIDs.SupercarrierGroupID:
                            case (int)Public_Variables.ItemIDs.CarrierGroupID:
                            case (int)Public_Variables.ItemIDs.DreadnoughtGroupID:
                            case (int)Public_Variables.ItemIDs.JumpFreighterGroupID:
                            case (int)Public_Variables.ItemIDs.FreighterGroupID:
                            case (int)Public_Variables.ItemIDs.IndustrialCommandShipGroupID:
                            case (int)Public_Variables.ItemIDs.CapitalIndustrialShipGroupID:
                            case (int)Public_Variables.ItemIDs.FAXGroupID:
                                {
                                    // Only add cap component usage for ships that use them
                                    RawCostSplit.SplitName = "Capital Component Facilities Usage";
                                    RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetCapComponentFacilityUsage();
                                    f1.CostSplits.Add(RawCostSplit);
                                    break;
                                }
                        }
                    }
                }

                // Reprocessing usage
                if (Public_Variables.SelectedBlueprint.GetReprocessingFacility().ConvertToOre & Public_Variables.SelectedBlueprint.GetReprocessingUsage() > 0d)
                {
                    RawCostSplit.SplitName = "Reprocessing Usage";
                    RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetReprocessingUsage();
                    f1.CostSplits.Add(RawCostSplit);
                }

                // Taxes
                RawCostSplit.SplitName = "Taxes";
                RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetSalesTaxes();
                f1.CostSplits.Add(RawCostSplit);

                // Broker fees
                RawCostSplit.SplitName = "Broker Fees";
                RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetSalesBrokerFees();
                f1.CostSplits.Add(RawCostSplit);

                // Additional Costs the user added
                if (Public_Variables.SelectedBlueprint.GetAdditionalCosts() != 0d)
                {
                    RawCostSplit.SplitName = "Additional Costs";
                    RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetAdditionalCosts();
                    f1.CostSplits.Add(RawCostSplit);
                }

                if (Public_Variables.SelectedBlueprint.GetTechLevel() != (int)Public_Variables.BPTechLevel.T1)
                {
                    // Total Invention Costs
                    RawCostSplit.SplitName = "Invention Costs";
                    RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetInventionCost();
                    f1.CostSplits.Add(RawCostSplit);

                    RawCostSplit.SplitName = "Invention Usage";
                    RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetInventionUsage();
                    f1.CostSplits.Add(RawCostSplit);

                    // Total Copy Costs
                    RawCostSplit.SplitName = "Copy Costs";
                    RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetCopyCost();
                    f1.CostSplits.Add(RawCostSplit);

                    RawCostSplit.SplitName = "Copy Usage";
                    RawCostSplit.SplitValue = Public_Variables.SelectedBlueprint.GetCopyUsage();
                    f1.CostSplits.Add(RawCostSplit);
                }

                // Show the decrease if any excess items sold
                if (chkBPSellExcessItems.Checked)
                {
                    if (!chkBPBuildBuy.Checked & MaterialType == "Raw" | chkBPBuildBuy.Checked)
                    {
                        RawCostSplit.SplitName = "Sold Excess Items";
                        RawCostSplit.SplitValue = -1 * Public_Variables.SelectedBlueprint.GetSellExcessAmount(); // show as negative
                        f1.CostSplits.Add(RawCostSplit);
                    }
                }

                f1.Show();

            }

        }

        // Opens the refinery window from menu
        private void mnuReprocessingPlant_Click(object sender, EventArgs e)
        {
            Public_Variables.frmRepoPlant = new frmReprocessingPlant();

            Public_Variables.frmRepoPlant.Show();
            Public_Variables.ReprocessingPlantOpen = true;

        }

        private void mnuMETECalculator_Click(object sender, EventArgs e)
        {
            My.MyProject.Forms.frmMETE = new frmMETE();

            My.MyProject.Forms.frmMETE.Show();

        }

        // Clears the BP history (forward / back) functionality
        private void mnuClearBPHistory_Click(object sender, EventArgs e)
        {
            BPHistory = new List<BPHistoryItem>();
            // Reset the index
            CurrentBPHistoryIndex = -1;
            // Save the current bp we are on
            UpdateBPHistory(true);
        }

        // Menu update to show the patch notes
        private void mnuPatchNotes_Click(object sender, EventArgs e)
        {
            var f1 = new frmPatchNotes();

            Application.UseWaitCursor = true;
            Application.DoEvents();

            f1.Show();

        }

        private void mnuDiscord_Click(object sender, EventArgs e)
        {
            Process.Start("https://discord.com/invite/rGMMqft");
        }

        private void mnuYouTube_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.youtube.com/channel/UC77gzUD18mXkltZyhxJPCjg");
        }

        private void mnuViewESIStatus_Click(object sender, EventArgs e)
        {
            var f1 = new frmESIStatus();

            f1.Show();
        }

        private void mnuAnomalyOreBeltsUpgradeBelts_Click(object sender, EventArgs e)
        {
            var f1 = new frmIndustryBeltFlip();

            f1.Show();
            Public_Variables.OreBeltFlipOpen = true;
        }

        private void mnuIceBelts_Click(object sender, EventArgs e)
        {
            var f1 = new frmIceBeltFlip();

            f1.Show();
            Public_Variables.IceBeltFlipOpen = true;
        }

        // Full reset - will delete all data downloaded, updated, or otherwise set by the user
        private void mnuResetAllData_Click(object sender, EventArgs e)
        {
            MsgBoxResult Response;

            Response = Interaction.MsgBox("This will reset all data for the program including ESI Tokens, Blueprints, Assets, Industry Jobs, and Price data." + Environment.NewLine + "Are you sure you want to do this?", Constants.vbYesNo, Application.ProductName);

            if (Response == Constants.vbYes)
            {
                Application.UseWaitCursor = true;
                Application.DoEvents();

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM ESI_CHARACTER_DATA");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM ESI_CORPORATION_DATA");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM CHARACTER_STANDINGS");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM CHARACTER_SKILLS");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM OWNED_BLUEPRINTS");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM ITEM_PRICES_CACHE");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM ASSETS");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM INDUSTRY_JOBS");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM CURRENT_RESEARCH_AGENTS");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("UPDATE ITEM_PRICES_FACT SET PRICE = 0");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM MARKET_HISTORY");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM MARKET_HISTORY_UPDATE_CACHE");

                Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM SAVED_FACILITIES WHERE CHARACTER_ID <> 0");

                // Load the dummy char
                Public_Variables.SelectedCharacter.LoadDummyCharacter(true);

                // Re-load all the forms' facilities
                LoadFacilities();

                // Reset all the cache dates
                ResetESIDates(true);

                // Reset ESI data
                ResetESIIndustrySystemIndicies(true);
                ResetESIAdjustedMarketPrices(true);

                // Reload the menu
                LoadCharacterNamesinMenu();

                Public_Variables.FirstLoad = true; // Temporarily just to get screen to show correctly

                Application.UseWaitCursor = false;
                Application.DoEvents();

                // Reset the tabs
                ResetTabs();

                Public_Variables.FirstLoad = false;

                Interaction.MsgBox("All Data Reset", Constants.vbInformation, Application.ProductName);

            }

        }

        private void mnuResetPriceData_Click(object sender, EventArgs e)
        {
            MsgBoxResult Response;
            string SQL;

            Response = Interaction.MsgBox("This will reset all stored price data for this character." + Environment.NewLine + "Are you sure you want to do this?", Constants.vbYesNo, Application.ProductName);

            if (Response == Constants.vbYes)
            {
                Application.UseWaitCursor = true;
                Application.DoEvents();

                SQL = "DELETE FROM ITEM_PRICES_CACHE";
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                SQL = "DELETE FROM MARKET_ORDERS";
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                SQL = "DELETE FROM MARKET_ORDERS_UPDATE_CACHE";
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                SQL = "DELETE FROM MARKET_HISTORY";
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                SQL = "DELETE FROM MARKET_HISTORY_UPDATE_CACHE";
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                SQL = "UPDATE ITEM_PRICES_FACT SET PRICE = 0";
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                Application.UseWaitCursor = false;
                Application.DoEvents();

                Interaction.MsgBox("Prices reset", Constants.vbInformation, Application.ProductName);

            }

            Public_Variables.UpdateProgramPrices();

        }

        private void mnuResetESIDates_Click(object sender, EventArgs e)
        {
            ResetESIDates();
        }

        private void ResetESIDates(bool SupressMessage = false)
        {
            string SQL;

            // Simple update, just set all the ESI cache dates to null
            SQL = "DELETE FROM ESI_PUBLIC_CACHE_DATES";
            Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

            if (!SupressMessage)
            {
                Interaction.MsgBox("ESI cache dates reset", Constants.vbInformation, Application.ProductName);
            }
        }

        private void ResetESIIndustrySystemIndicies(bool SupressMessage = false)
        {

            // Simple update, just set all the ESI cache dates to null
            Public_Variables.EVEDB.ExecuteNonQuerySQL("UPDATE ESI_PUBLIC_CACHE_DATES SET INDUSTRY_SYSTEMS_CACHED_UNTIL = NULL");

            if (!SupressMessage)
            {
                Interaction.MsgBox("ESI Industry System Indicies reset", Constants.vbInformation, Application.ProductName);
            }
        }

        public void ResetESIAdjustedMarketPrices(bool SupressMessage = false)
        {

            // Simple update, just set all the data back to zero
            Public_Variables.EVEDB.ExecuteNonQuerySQL("UPDATE ITEM_PRICES_FACT SET ADJUSTED_PRICE = 0, AVERAGE_PRICE = 0");
            Public_Variables.EVEDB.ExecuteNonQuerySQL("UPDATE ESI_PUBLIC_CACHE_DATES SET MARKET_PRICES_CACHED_UNTIL = NULL");

            if (!SupressMessage)
            {
                Interaction.MsgBox("ESI Adjusted Market Prices reset", Constants.vbInformation, Application.ProductName);
            }
        }

        private void mnuResetESIPublicStructures_Click(object sender, EventArgs e)
        {
            // Delete all the public structures
            Public_Variables.ResetPublicStructureData();
            Public_Variables.EVEDB.ExecuteNonQuerySQL("UPDATE ESI_PUBLIC_CACHE_DATES SET PUBLIC_STRUCTURES_CACHED_UNTIL = NULL");

            Interaction.MsgBox("ESI Public Structure data reset", Constants.vbInformation, Application.ProductName);

        }

        private void mnuResetSavedFacilities_Click(object sender, EventArgs e)
        {

            Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM SAVED_FACILITIES WHERE CHARACTER_ID <> 0");
            Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM UPWELL_STRUCTURES_INSTALLED_MODULES");
            // Re-load all the forms' facilities
            LoadFacilities();

            Interaction.MsgBox("Saved Facility data reset", Constants.vbInformation, Application.ProductName);

        }

        private void mnuResetMarketOrders_Click(object sender, EventArgs e)
        {

            Application.UseWaitCursor = true;
            Application.DoEvents();

            // Simple update, just set all the data back to zero
            Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM MARKET_ORDERS_UPDATE_CACHE");
            Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM MARKET_ORDERS");
            Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM STRUCTURE_MARKET_ORDERS_UPDATE_CACHE");
            Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM STRUCTURE_MARKET_ORDERS");

            Interaction.MsgBox("Market Orders reset", Constants.vbInformation, Application.ProductName);

            Application.UseWaitCursor = false;
            Application.DoEvents();
        }

        private void mnuResetMarketHistory_Click(object sender, EventArgs e)
        {

            Application.UseWaitCursor = true;
            Application.DoEvents();

            // Simple update, just set all the data back to zero
            Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM MARKET_HISTORY_UPDATE_CACHE");
            Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM MARKET_HISTORY");

            Interaction.MsgBox("Market History reset", Constants.vbInformation, Application.ProductName);

            Application.UseWaitCursor = false;
            Application.DoEvents();
        }

        private void mnuResetBlueprintData_Click(object sender, EventArgs e)
        {
            MsgBoxResult Response;

            Response = Interaction.MsgBox("This will reset all blueprints for this character" + Environment.NewLine + "deleting all scanned data and stored ME/TE values." + Environment.NewLine + Environment.NewLine + "Are you sure you want to do this?", Constants.vbYesNo, Application.ProductName);

            if (Response == Constants.vbYes)
            {
                Application.UseWaitCursor = true;
                Application.DoEvents();

                Public_Variables.ResetAllBPData();

                Application.UseWaitCursor = false;
                Application.DoEvents();

            }

        }

        private void mnuResetAgents_Click(object sender, EventArgs e)
        {
            MsgBoxResult Response;
            string SQL;

            Response = Interaction.MsgBox("This will reset all stored Research Agents for this character." + Environment.NewLine + "Are you sure you want to do this?", Constants.vbYesNo, Application.ProductName);

            if (Response == Constants.vbYes)
            {
                Application.UseWaitCursor = true;
                Application.DoEvents();

                SQL = "DELETE FROM CURRENT_RESEARCH_AGENTS WHERE CHARACTER_ID =" + Public_Variables.SelectedCharacter.ID;
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                SQL = "UPDATE ESI_CHARACTER_DATA SET RESEARCH_AGENTS_CACHE_DATE = NULL WHERE CHARACTER_ID = " + Public_Variables.SelectedCharacter.ID.ToString();
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                Application.UseWaitCursor = false;
                Application.DoEvents();

                Interaction.MsgBox("Research Agents reset", Constants.vbInformation, Application.ProductName);
            }

        }

        private void mnuResetIndustryJobs_Click(object sender, EventArgs e)
        {
            MsgBoxResult Response;
            string SQL;

            Response = Interaction.MsgBox("This will reset all stored Industry Jobs for this character." + Environment.NewLine + "Are you sure you want to do this?", Constants.vbYesNo, Application.ProductName);

            if (Response == Constants.vbYes)
            {
                Application.UseWaitCursor = true;
                Application.DoEvents();

                SQL = "DELETE FROM INDUSTRY_JOBS WHERE InstallerID =" + Public_Variables.SelectedCharacter.ID + " AND JobType =" + ((int)Public_Variables.ScanType.Personal).ToString();
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                SQL = "UPDATE ESI_CHARACTER_DATA SET INDUSTRY_JOBS_CACHE_DATE = NULL WHERE CHARACTER_ID =" + Public_Variables.SelectedCharacter.ID.ToString();
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                Application.UseWaitCursor = false;
                Application.DoEvents();

                Interaction.MsgBox("Industry Jobs reset", Constants.vbInformation, Application.ProductName);
            }

        }

        private void mnuResetIgnoredBPs_Click(object sender, EventArgs e)
        {
            MsgBoxResult Response;
            string SQL;

            Response = Interaction.MsgBox("This will reset all blueprints to non-ignored" + Environment.NewLine + "Are you sure you want to do this?", Constants.vbYesNo, Application.ProductName);

            if (Response == Constants.vbYes)
            {
                Application.UseWaitCursor = true;
                Application.DoEvents();

                SQL = "UPDATE ALL_BLUEPRINTS_FACT SET IGNORE = 0";
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                Application.UseWaitCursor = false;
                Application.DoEvents();

                Interaction.MsgBox("Ignored Blueprints reset", Constants.vbInformation, Application.ProductName);
            }
        }

        private void mnuResetAssets_Click(object sender, EventArgs e)
        {
            MsgBoxResult Response;
            string SQL;

            Response = Interaction.MsgBox("This will reset all stored Assets for this character." + Environment.NewLine + "Are you sure you want to do this?", Constants.vbYesNo, Application.ProductName);

            if (Response == Constants.vbYes)
            {
                Application.UseWaitCursor = true;
                Application.DoEvents();

                // Personal
                SQL = "DELETE FROM ASSETS WHERE ID =" + Public_Variables.SelectedCharacter.ID;
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                SQL = "UPDATE ESI_CHARACTER_DATA SET ASSETS_CACHE_DATE = NULL WHERE CHARACTER_ID =" + Public_Variables.SelectedCharacter.ID.ToString();
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                // Corp
                SQL = "DELETE FROM ASSETS WHERE ID =" + Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID;
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                SQL = "UPDATE ESI_CORPORATION_DATA SET ASSETS_CACHE_DATE = NULL WHERE CORPORATION_ID =" + Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID.ToString();
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                // Reload the asset variables for the character, which will load nothing but clear the assets out
                Public_Variables.SelectedCharacter.GetAssets().LoadAssets(Public_Variables.SelectedCharacter.ID, Public_Variables.SelectedCharacter.CharacterTokenData, SettingsVariables.UserApplicationSettings.LoadAssetsonStartup);
                Public_Variables.SelectedCharacter.CharacterCorporation.GetAssets().LoadAssets(Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID, Public_Variables.SelectedCharacter.CharacterTokenData, SettingsVariables.UserApplicationSettings.LoadAssetsonStartup);

                Application.UseWaitCursor = false;
                Application.DoEvents();

                Interaction.MsgBox("Assets reset", Constants.vbInformation, Application.ProductName);
            }

        }

        private void mnuCurrentIndustryJobs_Click(object sender, EventArgs e)
        {
            var f1 = new frmIndustryJobsViewer();
            f1.Show();
        }

        private void mnuResetESIMarketPrices_Click(object sender, EventArgs e)
        {
            ResetESIAdjustedMarketPrices();
        }

        private void mnuResetESIIndustryFacilities_Click(object sender, EventArgs e)
        {
            ResetESIIndustrySystemIndicies();
        }

        // Checks the ME and TE boxes to make sure they are ok and errors if not
        private bool CorrectMETE(string inME, string inTE, ref TextBox METextBox, ref TextBox TETextBox)
        {

            if (!Information.IsNumeric(inME) | string.IsNullOrEmpty(Strings.Trim(inME)))
            {
                Interaction.MsgBox("Invalid ME Value", Constants.vbExclamation);
                METextBox.SelectAll();
                METextBox.Focus();
                return false;
            }

            if (!Information.IsNumeric(inTE) | string.IsNullOrEmpty(Strings.Trim(inTE)))
            {
                Interaction.MsgBox("Invalid TE Value", Constants.vbExclamation);
                TETextBox.SelectAll();
                TETextBox.Focus();
                return false;
            }

            return true;

        }

        private void tabMain_Click(object sender, EventArgs e)
        {
            if (tabMain.SelectedTab.Name == "tabDatacores")
            {
                if (FirstShowDatacores)
                {
                    // Load up the data first
                    Cursor = Cursors.WaitCursor;

                    // DC Skills and Levels plus the standings
                    LoadDatacoreTab();

                    Cursor = Cursors.Default;
                    FirstShowDatacores = false; // Don't run this for successive clicks to this tab
                }
            }
            else if (tabMain.SelectedTab.Name == "tabMining")
            {
                if (FirstShowMining)
                {
                    // Load up the data first
                    Cursor = Cursors.WaitCursor;

                    // DC Skills and Levels plus the standings
                    LoadMiningTab();

                    Cursor = Cursors.Default;

                    FirstShowMining = false; // Don't run for successive clicks
                }
            }
        }

        private void mnuCurrentResearchAgents_Click(object sender, EventArgs e)
        {
            var f1 = new frmResearchAgents();
            f1.Show();
        }

        private void mnuSelectionAddChar_Click(object sender, EventArgs e)
        {

            // Open up the default select box here
            var f1 = new frmAddCharacter();
            f1.ShowDialog();

            LoadCharacterNamesinMenu();

            // Always reset the selected character id

            // Reinit form
            ResetTabs();

        }

        private void mnuSelectionManageCharacters_Click(object sender, EventArgs e)
        {
            var f1 = new frmManageAccounts();

            f1.ShowDialog();

            // Default character set, now set the panel if it changed
            if ((Public_Variables.SelectedCharacter.Name ?? "") != (mnuCharacter.Text.Substring(mnuCharacter.Text.IndexOf(":") + 2) ?? ""))
            {
                // If we returned, we got a default character set
                ResetTabs();
                LoadCharacterNamesinMenu();
            }

        }

        private void mnuChangeDummyCharacterName_Click(object sender, EventArgs e)
        {
            var f1 = new frmChangeDummyCharacter();

            f1.ShowDialog();

            if (Public_Variables.SelectedCharacter.ID == Public_Variables.DummyCharacterID)
            {
                // Reload with new information
                Public_Variables.SelectedCharacter.LoadDefaultCharacter(false, false, true);
                LoadCharacterNamesinMenu();
            }
        }

        private void mnuItemUpdatePrices_Click(object sender, EventArgs e)
        {
            var f1 = new frmManualPriceUpdate();
            f1.ShowDialog();
            ResetRefresh();
        }

        private void mnuCheckforUpdates_Click(object sender, EventArgs e)
        {
            Cursor = Cursors.WaitCursor;
            Application.DoEvents();
            Public_Variables.CheckForUpdates(true, Icon);
            Cursor = Cursors.Default;
        }

        private void btnCancelUpdate_Click(object sender, EventArgs e)
        {
            Public_Variables.CancelUpdatePrices = true;
        }

        private void btnOpenMarketBrowser_Click(object sender, EventArgs e)
        {
            // 'Call Process.Start("https://evetycoon.com/market")
            // ' Take them to eve marketer page
            // Call Process.Start("https://evemarketer.com/")

            // Temp change while EVE Market History down
            var f1 = new frmUploadPriceHistoryData();
            f1.Show();

        }

        private void mnuSelectionExit_Click(object sender, EventArgs e)
        {
            Environment.Exit(0);
        }

        private void mnuSelectionShoppingList_Click_1(object sender, EventArgs e)
        {
            ShowShoppingList();
        }

        private void mnuViewAssets_Click(object sender, EventArgs e)
        {
            // Make sure it's not disposed
            if (Public_Variables.frmDefaultAssets == null)
            {
                // Make new form
                Public_Variables.frmDefaultAssets = new frmAssetsViewer(AssetWindow.DefaultView);
            }
            else if (Public_Variables.frmDefaultAssets.IsDisposed)
            {
                // Make new form
                Public_Variables.frmDefaultAssets = new frmAssetsViewer(AssetWindow.DefaultView);
            }

            // Now open the Asset List
            Public_Variables.frmDefaultAssets.Show();
            Public_Variables.frmDefaultAssets.Focus();

            Application.DoEvents();
        }

        private void mnuManageBlueprintsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var f1 = new frmBlueprintManagement();
            f1.Show();
            ResetRefresh();
            // Reload the bp if there is one loaded so we get the most updated bps
            // If Not IsNothing(SelectedBlueprint) Then
            // Call SelectBlueprint(False)
            // End If
        }

        private void mnuSelectDefaultChar_Click(object sender, EventArgs e)
        {
            var f1 = new frmSetCharacterDefault();
            string PreviousChar;

            PreviousChar = Public_Variables.SelectedCharacter.Name;
            f1.ShowDialog();
            // If we returned, we got a default character set
            LoadCharacterNamesinMenu();

            // If they cancel or choose the same one, don't re load everything
            if ((PreviousChar ?? "") != (Public_Variables.SelectedCharacter.Name ?? ""))
            {
                ResetTabs();
                ResetRefresh();
            }
        }

        private void pnlShoppingList_Click(object sender, EventArgs e)
        {
            ShowShoppingList();
        }

        private void mnuSelectionShoppingList_Click(object sender, EventArgs e)
        {
            ShowShoppingList();
        }

        private void mnuSelectionAbout_Click(object sender, EventArgs e)
        {
            var f1 = new frmAbout();
            // Open the Shopping List
            f1.ShowDialog();
        }

        private void mnuCharacterSkills_Click(object sender, EventArgs e)
        {
            OpenCharacterSkills();
        }

        private void pnlSkills_Click(object sender, EventArgs e)
        {
            OpenCharacterSkills();
        }

        private void OpenCharacterSkills()
        {
            var f1 = new frmCharacterSkills();
            // Open the character screen
            Public_Variables.SkillsUpdated = false;
            f1.ShowDialog();

            if (Public_Variables.SkillsUpdated)
            {
                UpdateSkillPanel();
                // Need to reload screens that have skills displayed on it
                InitDatacoreTab();
                InitMiningTab();

                // Refresh the BP Tab if there is a blueprint selected since skills could affect build
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    RefreshBP();
                }
            }
        }

        private void mnuCharacterStandings_Click(object sender, EventArgs e)
        {
            var f1 = new frmCharacterStandings();
            // Open the character screen
            f1.ShowDialog();
        }

        private void mnuUserSettings_Click(object sender, EventArgs e)
        {
            var f1 = new frmSettings();
            bool OldFacilitySaveSetting = SettingsVariables.UserApplicationSettings.SaveFacilitiesbyChar;

            // Open the settings form
            f1.ShowDialog();

            // Now that we return, see if the facility setting changed and update as necessary
            if (SettingsVariables.UserApplicationSettings.SaveFacilitiesbyChar != OldFacilitySaveSetting)
            {
                ResetCharacterIDonFacilties();
            }

        }

        public void ResetCharacterIDonFacilties()
        {
            // If they change the character ID for saving facilities, we need to update the objects
            if (SettingsVariables.UserApplicationSettings.SaveFacilitiesbyChar)
            {
                {
                    ref var withBlock = ref Public_Variables.SelectedCharacter;
                    BPTabFacility.ResetSelectedCharacterID(withBlock.ID);

                    CalcBaseFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcInventionFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcT3InventionFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcCopyFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcSupersFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcCapitalsFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcSubsystemsFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcReactionsFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcBoostersFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcComponentsFacility.ResetSelectedCharacterID(withBlock.ID);
                    CalcT3ShipsFacility.ResetSelectedCharacterID(withBlock.ID);

                    MineRefineFacility.ResetSelectedCharacterID(withBlock.ID);
                }
            }
            else
            {
                BPTabFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);

                CalcBaseFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcInventionFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcT3InventionFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcCopyFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcSupersFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcCapitalsFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcSubsystemsFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcReactionsFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcBoostersFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcComponentsFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
                CalcT3ShipsFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);

                MineRefineFacility.ResetSelectedCharacterID(Public_Variables.CommonSavedFacilitiesID);
            }

            // Finally, refresh the bptab facility
            BPTabFacility.InitializeFacilities(ProgramLocation.BlueprintTab);

        }

        private void ShowShoppingList()
        {

            // Make sure it's not disposed
            if (Public_Variables.frmShop.IsDisposed)
            {
                // Make new form
                Public_Variables.frmShop = new frmShoppingList();
            }

            // First refresh the lists
            Public_Variables.frmShop.RefreshLists();

            // Now open the Shopping List
            Public_Variables.frmShop.Show();
            Public_Variables.frmShop.Focus();

            Application.DoEvents();

        }

        private void UpdateSkillPanel()
        {
            if (SettingsVariables.UserApplicationSettings.AllowSkillOverride)
            {
                pnlSkills.ForeColor = Color.Red;
                pnlSkills.Text = "Skills Overridden";
            }
            else
            {
                pnlSkills.ForeColor = Color.Black;
                pnlSkills.Text = "Skills Loaded";
            }
        }

        public void ResetTabs(bool ResetBPTab = true)
        {
            string LoadedBPText = cmbBPBlueprintSelection.Text;
            Enabled = false;
            Application.DoEvents();
            // Init all forms
            Cursor = Cursors.WaitCursor;
            InitBPTab(ResetBPTab);
            InitDatacoreTab();
            InitManufacturingTab();
            InitUpdatePricesTab();
            InitMiningTab();

            // Update skill override
            UpdateSkillPanel();

            // Reload the BP if there was one prior
            if (!string.IsNullOrEmpty(LoadedBPText))
            {
                cmbBPBlueprintSelection.Text = LoadedBPText;
                SelectBlueprint();
            }

            Cursor = Cursors.Default;
            Enabled = true;
            Application.DoEvents();
        }

        private void mnuRestoreDefaultBP_Click(object sender, EventArgs e)
        {
            SettingsVariables.AllSettings.SetDefaultBPSettings();

            // Also need to reset the shared variables
            SettingsVariables.UserApplicationSettings.CheckBuildBuy = DefaultSettings.DefaultCheckBuildBuy;

            // Save them
            SettingsVariables.AllSettings.SaveBPSettings(SettingsVariables.AllSettings.GetBPSettings());
            SettingsVariables.AllSettings.SaveApplicationSettings(SettingsVariables.UserApplicationSettings);

            // Load them again
            SettingsVariables.UserBPTabSettings = SettingsVariables.AllSettings.LoadBPSettings();
            SettingsVariables.UserApplicationSettings = SettingsVariables.AllSettings.LoadApplicationSettings();

            // Reload the tab
            InitBPTab();

            Interaction.MsgBox("BP Tab Default Settings Restored", Constants.vbInformation, Application.ProductName);

        }

        private void mnuRestoreDefaultUpdatePrices_Click(object sender, EventArgs e)
        {
            SettingsVariables.AllSettings.SetDefaultUpdatePriceSettings();
            // Save them
            SettingsVariables.AllSettings.SaveUpdatePricesSettings(SettingsVariables.AllSettings.GetUpdatePricesSettings());
            // Load them again
            SettingsVariables.UserUpdatePricesTabSettings = SettingsVariables.AllSettings.LoadUpdatePricesSettings();

            // Reload the tab
            InitUpdatePricesTab();

            Interaction.MsgBox("Update Prices Tab Default Settings Restored", Constants.vbInformation, Application.ProductName);

        }

        private void mnuRestoreDefaultDatacores_Click(object sender, EventArgs e)
        {
            SettingsVariables.AllSettings.SetDefaultDatacoreSettings();
            // Save them
            SettingsVariables.AllSettings.SaveDatacoreSettings(SettingsVariables.AllSettings.GetDatacoreSettings());
            // Load them again
            SettingsVariables.UserDCTabSettings = SettingsVariables.AllSettings.LoadDatacoreSettings();

            // Reload the tab
            InitDatacoreTab();

            Interaction.MsgBox("Datacores Tab Default Settings Restored", Constants.vbInformation, Application.ProductName);

        }

        private void mnuRestoreDefaultManufacturing_Click(object sender, EventArgs e)
        {
            SettingsVariables.AllSettings.SetDefaultManufacturingSettings();

            // Also need to reset the shared variables
            SettingsVariables.UserApplicationSettings.DefaultBPME = DefaultSettings.DefaultSettingME;
            SettingsVariables.UserApplicationSettings.DefaultBPTE = DefaultSettings.DefaultSettingTE;

            // Save them
            SettingsVariables.AllSettings.SaveManufacturingSettings(SettingsVariables.AllSettings.GetManufacturingSettings());
            SettingsVariables.AllSettings.SaveApplicationSettings(SettingsVariables.UserApplicationSettings);

            // Load them again
            SettingsVariables.UserManufacturingTabSettings = SettingsVariables.AllSettings.LoadManufacturingSettings();
            SettingsVariables.UserApplicationSettings = SettingsVariables.AllSettings.LoadApplicationSettings();

            // Reload the tab
            InitManufacturingTab();
            // Also update these shared form variables
            // cmbBPBuildMod.Text = DefaultSettings.DefaultBuildSlotModifier

            Interaction.MsgBox("Manufacturing Tab Default Settings Restored", Constants.vbInformation, Application.ProductName);

        }

        private void mnuRestoreDefaultMining_Click(object sender, EventArgs e)
        {
            SettingsVariables.AllSettings.SetDefaultMiningSettings();
            // Save them
            SettingsVariables.AllSettings.SaveMiningSettings(SettingsVariables.AllSettings.GetMiningSettings());
            // Load them again
            SettingsVariables.UserMiningTabSettings = SettingsVariables.AllSettings.LoadMiningSettings();

            // Reload the tab
            InitMiningTab();

            Interaction.MsgBox("Minings Tab Default Settings Restored", Constants.vbInformation, Application.ProductName);
        }

        private void mnuResetBuildBuyManualSelections_Click(object sender, EventArgs e)
        {
            // Reset the list
            BBItems = new List<Public_Variables.BuildBuyItem>();
            RefreshBP();
            Interaction.MsgBox("Manual Build/Buy List Reset");
        }

        private void chkBPIncludeCopyTime_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & !UpdatingInventionChecks)
            {
                // Set the copy time check
                BPTabFacility.GetFacility(ProductionType.Copying).IncludeActivityTime = chkBPIncludeCopyTime.Checked;
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    // Use the original ME and TE values when they change the meta level
                    UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);

                }
            }
        }

        private void chkBPIncludeCopyCosts_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & !UpdatingInventionChecks)
            {
                // Include copy costs
                BPTabFacility.GetFacility(ProductionType.Copying).IncludeActivityCost = chkBPIncludeCopyCosts.Checked;
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);
                }
            }
        }

        private void chkBPIncludeInventionTime_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & !UpdatingInventionChecks)
            {
                // Include invention time
                BPTabFacility.GetFacility(ProductionType.Invention).IncludeActivityTime = chkBPIncludeInventionTime.Checked;
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);
                }
            }
        }

        private void chkBPIncludeInventionCosts_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & !UpdatingInventionChecks)
            {
                // Include cost for invention
                BPTabFacility.GetFacility(ProductionType.Invention).IncludeActivityCost = chkBPIncludeInventionCosts.Checked;
                // Use the original ME and TE values when they change the meta level
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);
                }
            }
        }

        private void chkBPIncludeT3Time_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & !UpdatingInventionChecks)
            {
                // Set the time for T3 invention
                BPTabFacility.GetFacility(ProductionType.T3Invention).IncludeActivityTime = chkBPIncludeT3Time.Checked;
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);
                }
            }
        }

        private void chkBPIncludeT3Costs_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & !UpdatingInventionChecks)
            {
                // Set the usage for T3 invention
                BPTabFacility.GetFacility(ProductionType.T3Invention).IncludeActivityCost = chkBPIncludeT3Costs.Checked;
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);
                }
            }
        }

        private void UpdateIndustryFacilitiesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var ESIData = new ESI();
            var f1 = new frmStatus();

            Application.UseWaitCursor = true;
            f1.Show();
            Application.DoEvents();

            // Always do indicies first since facilities has a field it uses
            bool localUpdateIndustrySystemsCostIndex() { var argUpdateLabel = f1.lblStatus; var argPB = f1.pgStatus; var ret = ESIData.UpdateIndustrySystemsCostIndex(ref argUpdateLabel, ref argPB); f1.lblStatus = argUpdateLabel; f1.pgStatus = argPB; return ret; }

            if (localUpdateIndustrySystemsCostIndex())
            {
                // Reload the industry facilities now
                BPTabFacility.InitializeFacilities(ProgramLocation.BlueprintTab);

                // Refresh the BP Tab if there is a blueprint selected
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    RefreshBP(true);
                }

                Interaction.MsgBox("Industry System Indicies Updated", Constants.vbInformation, Application.ProductName);
            }

            f1.Dispose();
            Application.UseWaitCursor = false;
        }

        private void UpdateMarketPricesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var ESIData = new ESI();
            var f1 = new frmStatus();

            Application.UseWaitCursor = true;
            f1.Show();
            Application.DoEvents();
            bool localUpdateAdjAvgMarketPrices() { var argUpdateLabel1 = f1.lblStatus; var argPB1 = f1.pgStatus; var ret = ESIData.UpdateAdjAvgMarketPrices(ref argUpdateLabel1, ref argPB1); f1.lblStatus = argUpdateLabel1; f1.pgStatus = argPB1; return ret; }

            if (localUpdateAdjAvgMarketPrices())
            {

                // Update all the prices in the program
                Public_Variables.UpdateProgramPrices();

                Interaction.MsgBox("Market Prices Updated", Constants.vbInformation, Application.ProductName);
            }

            f1.Dispose();
            Application.UseWaitCursor = false;
        }

        private void mnuUpdateESIPublicStructures_Click(object sender, EventArgs e)
        {
            var ESIData = new ESI();
            var f1 = new frmStatus();

            Application.UseWaitCursor = true;
            f1.Show();
            Application.DoEvents();
            bool localUpdatePublicStructureswithMarkets() { var argUpdateLabel2 = f1.lblStatus; var argPB2 = f1.pgStatus; var ret = ESIData.UpdatePublicStructureswithMarkets(ref argUpdateLabel2, ref argPB2); f1.lblStatus = argUpdateLabel2; f1.pgStatus = argPB2; return ret; }

            if (localUpdatePublicStructureswithMarkets())
            {
                Interaction.MsgBox("Public Structure Data Updated", Constants.vbInformation, Application.ProductName);
            }

            f1.Dispose();
            Application.UseWaitCursor = false;

        }

        #endregion

        #region InlineListUpdate

        // Determines where to show the text box when clicking on the list sent
        private void ListClicked(ListView ListRef, object sender, MouseEventArgs e)
        {
            int iSubIndex = 0;

            // Hide the text box when a new line is selected
            txtListEdit.Hide();
            cmbEdit.Hide();

            CurrentRow = ListRef.GetItemAt(e.X, e.Y); // which listviewitem was clicked
            SelectedGrid = ListRef;

            if (CurrentRow is null)
            {
                return;
            }

            CurrentCell = CurrentRow.GetSubItemAt(e.X, e.Y);  // which subitem was clicked

            // Determine where the previous and next item boxes will be based on what they clicked - used in tab event handling
            SetNextandPreviousCells(ListRef);

            // See which column has been clicked
            iSubIndex = CurrentRow.SubItems.IndexOf(CurrentCell);

            if ((ListRef.Name ?? "") != (lstPricesView.Name ?? "") & (ListRef.Name ?? "") != (lstMineGrid.Name ?? "") & (ListRef.Name ?? "") != (lstRawPriceProfile.Name ?? "") & (ListRef.Name ?? "") != (lstManufacturedPriceProfile.Name ?? ""))
            {
                // Set the columns that can be edited, just ME and Price
                if (iSubIndex == 2 | iSubIndex == 3)
                {

                    if (iSubIndex == 2)
                    {
                        MEUpdate = true;
                    }
                    else
                    {
                        MEUpdate = false;
                    }

                    if (iSubIndex == 3)
                    {
                        PriceUpdate = true;
                    }
                    else
                    {
                        PriceUpdate = false;
                    }

                    // For the update grids in the Blueprint Tab, only show the box if
                    // 1 - If the ME is clicked and it has something other than a '-' in it (meaning no BP)
                    // 2 - If the Price is clicked and the ME box has '-' in it
                    if (CurrentRow.SubItems[2].Text != "-" & MEUpdate | PriceUpdate)
                    {
                        ShowEditBox(ListRef);
                    }

                }
            }

            else if ((ListRef.Name ?? "") == (lstPricesView.Name ?? "") | (ListRef.Name ?? "") == (lstMineGrid.Name ?? "")) // Price update for update prices and mining grid
            {

                // Only process the price box logic on rows that are unrefined and compressed ore on mining tab
                if ((ListRef.Name ?? "") == (lstMineGrid.Name ?? "") & CurrentRow.SubItems[2].Text == "Refined")
                {
                    return;
                }

                // Set the columns that can be edited, just Price
                if (iSubIndex == 3)
                {
                    ShowEditBox(ListRef);
                    PriceUpdate = true;
                }
            }

            else if ((ListRef.Name ?? "") == (lstRawPriceProfile.Name ?? "") | (ListRef.Name ?? "") == (lstManufacturedPriceProfile.Name ?? ""))
            {

                if (iSubIndex > 0)
                {
                    // Reset update type
                    SetPriceProfileVariables(iSubIndex);
                    ShowEditBox(ListRef);
                }

            }

        }

        // For updating the items in the list by clicking on them
        private void ProcessKeyDownEdit(Keys SentKey, ListView ListRef)
        {
            string SQL = "";
            SQLiteDataReader rsData;

            string MEValue = "";
            double PriceValue = 0d;
            bool PriceUpdated = false;

            // Change blank entry to 0
            if (string.IsNullOrEmpty(Strings.Trim(txtListEdit.Text)))
            {
                txtListEdit.Text = "0";
            }

            DataUpdated = false;

            // If they hit enter or tab away, mark the BP as owned in the DB with the values entered
            if ((SentKey == Keys.Enter | SentKey == Keys.ShiftKey | SentKey == Keys.Tab) & DataEntered)
            {

                // Check the input first
                if (!Information.IsNumeric(txtListEdit.Text) & MEUpdate)
                {
                    Interaction.MsgBox("Invalid ME Value", Constants.vbExclamation);
                    return;
                }

                if (!Information.IsNumeric(txtListEdit.Text) & PriceUpdate)
                {
                    Interaction.MsgBox("Invalid Price Value", Constants.vbExclamation);
                    return;
                }

                // Save the data depending on what we are updating
                if (MEUpdate)
                {
                    MEValue = txtListEdit.Text;
                }

                if (PriceUpdate)
                {
                    PriceValue = Conversions.ToDouble(txtListEdit.Text);
                }

                // Now do the update for the grids
                if ((ListRef.Name ?? "") != (lstPricesView.Name ?? "") & (ListRef.Name ?? "") != (lstMineGrid.Name ?? "") & (ListRef.Name ?? "") != (lstRawPriceProfile.Name ?? "") & (ListRef.Name ?? "") != (lstManufacturedPriceProfile.Name ?? ""))
                {
                    // BP Grid update

                    // Check the numbers, if the same then don't update
                    if ((MEValue ?? "") == (CurrentRow.SubItems[2].Text ?? "") & PriceValue == Conversions.ToDouble(CurrentRow.SubItems[3].Text))
                    {
                        // Skip down
                        goto Tabs;
                    }

                    // First, see if we are updating an ME or a price, then deal with each separately
                    if (MEUpdate)
                    {
                        // First we need to look up the Blueprint ID
                        SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_ID, ALL_BLUEPRINTS.BLUEPRINT_NAME, TECH_LEVEL, ";
                        SQL += "CASE WHEN ALL_BLUEPRINTS.FAVORITE IS NULL THEN 0 ELSE ALL_BLUEPRINTS.FAVORITE END AS FAVORITE, IGNORE, ";
                        SQL += "CASE WHEN TE IS NULL THEN 0 ELSE TE END AS BP_TE ";
                        SQL += "FROM ALL_BLUEPRINTS LEFT JOIN OWNED_BLUEPRINTS ON ALL_BLUEPRINTS.BLUEPRINT_ID = OWNED_BLUEPRINTS.BLUEPRINT_ID  ";
                        SQL += "WHERE ITEM_NAME = '" + Public_Variables.RemoveItemNameRuns(CurrentRow.SubItems[0].Text) + "'";

                        Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                        rsData = Public_Variables.DBCommand.ExecuteReader();
                        rsData.Read();

                        // If they update the ME of the blueprint, then we mark it as Owned and a 0 for TE value, but set the type depending on the bp loaded
                        Public_Variables.BPType TempBPType;
                        double AdditionalCost;
                        int TempTE = rsData.GetInt32(5);

                        if (rsData.GetInt64(2) == (long)Public_Variables.BPTechLevel.T1)
                        {
                            // T1 BPO
                            TempBPType = Public_Variables.BPType.Original;
                        }
                        else
                        {
                            // Remaining T2 and T3 must be invited
                            TempBPType = Public_Variables.BPType.InventedBPC;
                        }

                        // Check additional costs for saving with this bp
                        if (Information.IsNumeric(txtBPAddlCosts.Text))
                        {
                            AdditionalCost = Conversions.ToDouble(txtBPAddlCosts.Text);
                        }
                        else
                        {
                            AdditionalCost = 0d;
                        }

                        // If there is no TE for an invented BPC then set it to the base
                        if (TempBPType == Public_Variables.BPType.InventedBPC & TempTE == 0)
                        {
                            TempTE = Public_Variables.BaseT2T3TE;
                        }

                        Public_Variables.UpdateBPinDB(rsData.GetInt64(0), Conversions.ToInteger(MEValue), TempTE, TempBPType, Conversions.ToInteger(MEValue), 0, Conversions.ToBoolean(rsData.GetInt32(3)), Conversions.ToBoolean(rsData.GetInt32(4)), AdditionalCost);

                        // Mark the line with white color since it's no longer going to be unowned
                        CurrentRow.BackColor = Color.White;

                        rsData.Close();
                    }

                    else // Price per unit update
                    {

                        SQL = "UPDATE ITEM_PRICES_FACT SET PRICE = " + Conversions.ToDouble(txtListEdit.Text).ToString() + ", PRICE_TYPE = 'User' WHERE ITEM_ID = " + Public_Variables.GetTypeID(Public_Variables.RemoveItemNameRuns(CurrentRow.SubItems[0].Text));
                        Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                        // Mark the line text with black incase it is red for no price
                        CurrentRow.ForeColor = Color.Black;

                        PriceUpdated = true;

                    }

                    // Update the data in the current row
                    CurrentRow.SubItems[2].Text = MEValue;
                    CurrentRow.SubItems[3].Text = Strings.FormatNumber(PriceValue, 2);

                    // For both ME and Prices, we need to re-calculate the blueprint (hit the Refresh Button) to reflect the new numbers
                    // First save the current grid for locations
                    RefreshingGrid = true;
                    RefreshBP();
                    RefreshingGrid = false;
                }

                else if ((ListRef.Name ?? "") != (lstRawPriceProfile.Name ?? "") & (ListRef.Name ?? "") != (lstManufacturedPriceProfile.Name ?? ""))
                {
                    // Price List Update
                    SQL = "UPDATE ITEM_PRICES_FACT SET PRICE = " + Conversions.ToDouble(txtListEdit.Text).ToString() + ", PRICE_TYPE = 'User' WHERE ITEM_ID = " + CurrentRow.SubItems[0].Text;
                    Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                    // Change the value in the price grid, but don't update the grid
                    CurrentRow.SubItems[3].Text = Strings.FormatNumber(txtListEdit.Text, 2);

                    PriceUpdated = true;
                }
                else
                {
                    // Price Profile update
                    string RawMat;
                    if ((ListRef.Name ?? "") == (lstRawPriceProfile.Name ?? ""))
                    {
                        RawMat = "1";
                    }
                    else
                    {
                        RawMat = "0";
                    }

                    // See if they have the profile set already
                    SQL = "SELECT 'X' FROM PRICE_PROFILES WHERE ID = " + Public_Variables.SelectedCharacter.ID.ToString() + " ";
                    SQL += "AND GROUP_NAME = '" + CurrentRow.SubItems[0].Text + "' ";
                    SQL += "AND RAW_MATERIAL = " + RawMat;

                    Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                    rsData = Public_Variables.DBCommand.ExecuteReader();

                    if (rsData.Read())
                    {
                        // Update
                        SQL = "UPDATE PRICE_PROFILES SET ";
                        if (PriceTypeUpdate)
                        {
                            // Save current region/system
                            SQL += "PRICE_TYPE = '" + cmbEdit.Text + "' ";
                            CurrentRow.SubItems[1].Text = cmbEdit.Text;
                        }
                        else if (PriceSystemUpdate)
                        {
                            // Just update system, save others
                            SQL += "SOLAR_SYSTEM_NAME = '" + cmbEdit.Text + "' ";
                            CurrentRow.SubItems[3].Text = cmbEdit.Text;
                        }
                        else if (PriceRegionUpdate)
                        {
                            // Set region, but set system to all systems (blank)
                            SQL += "REGION_NAME ='" + cmbEdit.Text + "', SOLAR_SYSTEM_NAME = 'All Systems' ";
                            CurrentRow.SubItems[2].Text = cmbEdit.Text;
                            CurrentRow.SubItems[3].Text = Public_Variables.AllSystems;
                        }
                        else if (PriceModifierUpdate)
                        {
                            double PM = Conversions.ToDouble(txtListEdit.Text.Replace("%", "")) / 100d;
                            SQL += "PRICE_MODIFIER = " + PM.ToString() + " ";
                            CurrentRow.SubItems[4].Text = Strings.FormatPercent(PM, 1);
                        }

                        SQL += "WHERE ID = " + Public_Variables.SelectedCharacter.ID.ToString() + " ";
                        SQL += "AND GROUP_NAME ='" + CurrentRow.SubItems[0].Text + "' ";
                        SQL += "AND RAW_MATERIAL = " + RawMat;

                        rsData.Close();
                    }

                    else
                    {
                        // Insert new record
                        string TempPercent = (Conversions.ToDouble(CurrentRow.SubItems[4].Text.Replace("%", "")) / 100d).ToString();
                        SQL = "INSERT INTO PRICE_PROFILES VALUES (" + Public_Variables.SelectedCharacter.ID.ToString() + ",'" + CurrentRow.SubItems[0].Text + "','";
                        if (PriceTypeUpdate)
                        {
                            // Save current region/system
                            SQL += Public_Variables.FormatDBString(cmbEdit.Text) + "','" + CurrentRow.SubItems[2].Text + "','" + CurrentRow.SubItems[3].Text + "'," + TempPercent + "," + RawMat + ")";
                            CurrentRow.SubItems[1].Text = cmbEdit.Text;
                        }
                        else if (PriceSystemUpdate)
                        {
                            // Just update system, save others
                            SQL += CurrentRow.SubItems[1].Text + "','" + CurrentRow.SubItems[2].Text + "','" + Public_Variables.FormatDBString(cmbEdit.Text) + "'," + TempPercent + "," + RawMat + ")";
                            CurrentRow.SubItems[3].Text = cmbEdit.Text;
                        }
                        else if (PriceRegionUpdate)
                        {
                            // Set region, but set system to all systems (blank)
                            SQL += CurrentRow.SubItems[1].Text + "','" + Public_Variables.FormatDBString(cmbEdit.Text) + "','All Systems'," + TempPercent + "," + RawMat + ")";
                            // Set the text
                            CurrentRow.SubItems[2].Text = cmbEdit.Text;
                            CurrentRow.SubItems[3].Text = Public_Variables.AllSystems;
                        }
                        else if (PriceModifierUpdate)
                        {
                            // Save current region/system/type
                            SQL += CurrentRow.SubItems[1].Text + "','" + CurrentRow.SubItems[2].Text + "','" + CurrentRow.SubItems[3].Text + "',";
                            double PM = Conversions.ToDouble(txtListEdit.Text.Replace("%", "")) / 100d;
                            SQL += PM.ToString() + "," + RawMat + ")";
                            CurrentRow.SubItems[4].Text = Strings.FormatPercent(PM, 1);
                        }

                    }

                    Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                    // Reset these
                    PriceTypeUpdate = false;
                    PriceRegionUpdate = false;
                    PriceSystemUpdate = false;
                    PreviousPriceType = "";
                    PreviousRegion = "";
                    PreviousSystem = "";
                    PriceUpdated = false;

                }

                // If we updated a price, then update the program everywhere to be consistent
                if (PriceUpdated)
                {
                    IgnoreFocus = true;
                    Public_Variables.UpdateProgramPrices(false); // Don't refresh the grid, we are already updating it
                    IgnoreFocus = false;
                }

                // Play sound to indicate update complete
                if (PriceUpdated)
                {
                    Public_Variables.PlayNotifySound();
                }

                // Reset text they entered if tabbed
                if (SentKey == Keys.ShiftKey | SentKey == Keys.Tab)
                {
                    txtListEdit.Text = "";
                    cmbEdit.Text = "";
                }

                if (SentKey == Keys.Enter)
                {
                    // Just refresh and select the current row
                    CurrentRow.Selected = true;
                    txtListEdit.Visible = false;
                }

                // Data updated, so reset
                DataEntered = false;
                DataUpdated = true;

            }

        Tabs:
            ;

            // If they hit tab, then tab to the next cell
            if (SentKey == Keys.Tab)
            {
                if (CurrentRow.Index == -1)
                {
                    // Reset the current row based on the original click
                    CurrentRow = ListRef.GetItemAt(SavedListClickLoc.X, SavedListClickLoc.Y);
                    CurrentCell = CurrentRow.GetSubItemAt(SavedListClickLoc.X, SavedListClickLoc.Y);
                    // Reset the next and previous cells
                    SetNextandPreviousCells(ListRef);
                }

                CurrentCell = NextCell;
                // Reset these each time
                SetNextandPreviousCells(ListRef, "Next");
                if (CurrentRow.Index == 0)
                {
                    // Scroll to top
                    ListRef.Items[0].Selected = true;
                    ListRef.EnsureVisible(0);
                    ListRef.Update();
                }
                else
                {
                    // Make sure the row is visible
                    ListRef.EnsureVisible(CurrentRow.Index);
                }

                // Show the text box
                ShowEditBox(ListRef);
            }

            // If shift+tab, then go to the previous cell 
            if (SentKey == Keys.ShiftKey)
            {
                if (CurrentRow.Index == -1)
                {
                    // Reset the current row based on the original click
                    CurrentRow = ListRef.GetItemAt(SavedListClickLoc.X, SavedListClickLoc.Y);
                    CurrentCell = CurrentRow.GetSubItemAt(SavedListClickLoc.X, SavedListClickLoc.Y);
                    // Reset the next and previous cells
                    SetNextandPreviousCells(ListRef);
                }

                CurrentCell = PreviousCell;
                // Reset these each time
                SetNextandPreviousCells(ListRef, "Previous");
                if (CurrentRow.Index == ListRef.Items.Count - 1)
                {
                    // Scroll to bottom
                    ListRef.Items[ListRef.Items.Count - 1].Selected = true;
                    ListRef.EnsureVisible(ListRef.Items.Count - 1);
                    ListRef.Update();
                }
                else
                {
                    // Make sure the row is visible
                    ListRef.EnsureVisible(CurrentRow.Index);
                }

                // Show the text box
                ShowEditBox(ListRef);
            }

        }

        // Determines where the previous and next item boxes will be based on what they clicked - used in tab event handling
        private void SetNextandPreviousCells(ListView ListRef, string CellType = "")
        {
            int iSubIndex = 0;

            // Normal Row
            if (CellType == "Next")
            {
                CurrentRow = NextCellRow;
            }
            else if (CellType == "Previous")
            {
                CurrentRow = PreviousCellRow;
            }

            // Get index of column
            iSubIndex = CurrentRow.SubItems.IndexOf(CurrentCell);

            // Get next and previous rows. If at end, wrap to top. If at top, wrap to bottom
            if (ListRef.Items.Count == 1)
            {
                NextRow = CurrentRow;
                PreviousRow = CurrentRow;
            }
            else if (CurrentRow.Index != ListRef.Items.Count - 1 & CurrentRow.Index != 0)
            {
                // Not the last line, so set the next and previous
                NextRow = ListRef.Items[CurrentRow.Index + 1];
                PreviousRow = ListRef.Items[CurrentRow.Index - 1];
            }
            else if (CurrentRow.Index == 0)
            {
                NextRow = ListRef.Items[CurrentRow.Index + 1];
                // Wrap to bottom
                PreviousRow = ListRef.Items[ListRef.Items.Count - 1];
            }
            else if (CurrentRow.Index == ListRef.Items.Count - 1)
            {
                // Need to wrap up to top
                NextRow = ListRef.Items[0];
                PreviousRow = ListRef.Items[CurrentRow.Index - 1];
            }

            if ((ListRef.Name ?? "") != (lstPricesView.Name ?? "") & (ListRef.Name ?? "") != (lstMineGrid.Name ?? "") & (ListRef.Name ?? "") != (lstRawPriceProfile.Name ?? "") & (ListRef.Name ?? "") != (lstManufacturedPriceProfile.Name ?? ""))
            {

                // For the update grids in the Blueprint Tab, only show the box if
                // 1 - If the ME is clicked and it has something other than a '-' in it (meaning no BP)
                // 2 - If the Price is clicked and the ME box has '-' in it

                // The next row must be an ME or Price box on the next row 
                // or a previous ME or price box on the previous row
                if (iSubIndex == 2 | iSubIndex == 3)
                {
                    // Set the next and previous ME boxes (subitems)
                    // If the next row ME box is a '-' then the next row cell is Price
                    if (NextRow.SubItems[2].Text == "-")
                    {
                        NextCell = NextRow.SubItems[3]; // Next row price box
                    }
                    else // It can be the ME box in the next row
                    {
                        NextCell = NextRow.SubItems[2];
                    } // Next row ME box

                    NextCellRow = NextRow;

                    // If the previous row ME box is a '-' then the previous row is Price
                    if (PreviousRow.SubItems[2].Text == "-")
                    {
                        PreviousCell = PreviousRow.SubItems[3]; // Next row price box
                    }
                    else // It can be the ME box in the next row
                    {
                        PreviousCell = PreviousRow.SubItems[2];
                    } // Next row ME box

                    PreviousCellRow = PreviousRow;

                    if (iSubIndex == 2)
                    {
                        MEUpdate = true;
                        PriceUpdate = false;
                    }
                    else
                    {
                        MEUpdate = false;
                        PriceUpdate = true;
                    }
                }

                else
                {
                    NextCell = null;
                    PreviousCell = null;
                    CurrentCell = null;
                }
            }

            else if ((ListRef.Name ?? "") == (lstRawPriceProfile.Name ?? "") | (ListRef.Name ?? "") == (lstManufacturedPriceProfile.Name ?? ""))
            {

                if (iSubIndex != 0)
                {
                    // Set the next and previous combo boxes
                    if (iSubIndex == 4)
                    {
                        NextCell = NextRow.SubItems[1]; // Next now price type box
                        NextCellRow = NextRow;
                    }
                    else
                    {
                        NextCell = CurrentRow.SubItems[iSubIndex + 1]; // current row, next cell
                        NextCellRow = CurrentRow;
                    }

                    if (iSubIndex == 1)
                    {
                        PreviousCell = PreviousRow.SubItems[4]; // Previous row price mod
                        PreviousCellRow = PreviousRow;
                    }
                    else
                    {
                        PreviousCell = CurrentRow.SubItems[iSubIndex - 1]; // Same row, just back a cell
                        PreviousCellRow = CurrentRow;
                    }

                    // Reset update type
                    SetPriceProfileVariables(iSubIndex);
                }

                else
                {
                    NextCell = null;
                    PreviousCell = null;
                    CurrentCell = null;
                }
            }

            else // Price list 
            {
                // For this, just go up and down the rows
                NextCell = NextRow.SubItems[3];
                NextCellRow = NextRow;
                PreviousCell = PreviousRow.SubItems[3];
                PreviousCellRow = PreviousRow;
                PriceUpdate = true;
                MEUpdate = false;
            }

        }

        // Shows the text box on the grid where clicked if enabled
        private void ShowEditBox(ListView ListRef)
        {

            // Save the center location of the edit box
            SavedListClickLoc.X = CurrentCell.Bounds.Left + (int)Math.Round(CurrentCell.Bounds.Width / 2d);
            SavedListClickLoc.Y = CurrentCell.Bounds.Top + (int)Math.Round(CurrentCell.Bounds.Height / 2d);

            // Get the boundry data for the control now
            int pTop = ListRef.Top + CurrentCell.Bounds.Top;
            int pLeft = ListRef.Left + CurrentCell.Bounds.Left + 2; // pad right by 2 to align better
            Control CurrentParent;

            CurrentParent = ListRef.Parent;
            // Look up all locations of parent controls to get the location for the control boundaries when shown
            while (CurrentParent.Name != "frmMain")
            {
                pTop = pTop + CurrentParent.Top;
                pLeft = pLeft + CurrentParent.Left;
                CurrentParent = CurrentParent.Parent;
            }

            if ((ListRef.Name ?? "") != (lstRawPriceProfile.Name ?? "") & (ListRef.Name ?? "") != (lstManufacturedPriceProfile.Name ?? "") | PriceModifierUpdate)
            {
                {
                    var withBlock = txtListEdit;
                    withBlock.Hide();
                    // Set the bounds of the control
                    withBlock.SetBounds(pLeft, pTop, CurrentCell.Bounds.Width, CurrentCell.Bounds.Height);
                    withBlock.Text = CurrentCell.Text;
                    withBlock.Show();
                    if ((CurrentRow.SubItems[2].Text ?? "") == (txtListEdit.Text ?? ""))
                    {
                        withBlock.TextAlign = HorizontalAlignment.Center;
                    }
                    else
                    {
                        withBlock.TextAlign = HorizontalAlignment.Right;
                    }

                    withBlock.Focus();
                }
                cmbEdit.Visible = false;
            }
            else // updates on the price profile grids
            {

                {
                    var withBlock1 = cmbEdit;
                    UpdatingCombo = true;

                    if (PriceRegionUpdate)
                    {
                        var argRegionCombo = cmbEdit;
                        Public_Variables.LoadRegionCombo(ref argRegionCombo, CurrentCell.Text);
                        cmbEdit = argRegionCombo;
                        // Set the bounds of the control
                        withBlock1.SetBounds(pLeft, pTop, CurrentCell.Bounds.Width, CurrentCell.Bounds.Height);
                        withBlock1.Show();
                        withBlock1.Focus();
                    }
                    else
                    {
                        withBlock1.Hide();
                        withBlock1.BeginUpdate();
                        withBlock1.Items.Clear();
                        SQLiteDataReader rsData;
                        string SQL = "";

                        if (PriceSystemUpdate)
                        {
                            // Base it off the data in the region cell
                            SQL = "SELECT solarSystemName FROM SOLAR_SYSTEMS, REGIONS ";
                            SQL += "WHERE SOLAR_SYSTEMS.regionID = REGIONS.regionID ";
                            SQL += "AND REGIONS.regionName = '" + PreviousCell.Text + "' ";
                            SQL += "ORDER BY solarSystemName";
                            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                            rsData = Public_Variables.DBCommand.ExecuteReader();

                            // Add all systems if it's the system
                            withBlock1.Items.Add(Public_Variables.AllSystems);
                            while (rsData.Read())
                            {
                                withBlock1.Items.Add(rsData.GetString(0));
                                // Special processing for The Forge
                                if (PreviousCell.Text == "The Forge" & rsData.GetString(0) == "Jita")
                                {
                                    withBlock1.Items.Add(Public_Variables.JitaPerimeter);
                                }
                            }

                            rsData.Close();
                        }

                        else if (PriceTypeUpdate)
                        {
                            // Manually enter these
                            withBlock1.Items.Add("Min Sell");
                            withBlock1.Items.Add("Max Sell");
                            withBlock1.Items.Add("Avg Sell");
                            withBlock1.Items.Add("Median Sell");
                            withBlock1.Items.Add("Percentile Sell");
                            withBlock1.Items.Add("Min Buy");
                            withBlock1.Items.Add("Max Buy");
                            withBlock1.Items.Add("Avg Buy");
                            withBlock1.Items.Add("Median Buy");
                            withBlock1.Items.Add("Percentile Buy");
                            withBlock1.Items.Add("Split Price");
                        }

                        // Set the bounds of the control
                        withBlock1.SetBounds(pLeft, pTop, CurrentCell.Bounds.Width, CurrentCell.Bounds.Height);
                        withBlock1.Text = CurrentCell.Text;
                        withBlock1.EndUpdate();
                        withBlock1.Show();
                        withBlock1.Focus();
                    }
                    DataEntered = false; // We just updated so reset
                    UpdatingCombo = false;
                }
                txtListEdit.Visible = false;
            }
        }

        // Processes the tab function in the text box for the grid. This overrides the default tabbing between controls
        protected override bool ProcessTabKey(bool TabForward)
        {
            var ac = ActiveControl;

            TabPressed = true;

            if (TabForward)
            {
                if (ReferenceEquals(ac, txtListEdit) | ReferenceEquals(ac, cmbEdit))
                {
                    ProcessKeyDownEdit(Keys.Tab, SelectedGrid);
                    return true;
                }
            }
            else if (ReferenceEquals(ac, txtListEdit) | ReferenceEquals(ac, cmbEdit))
            {
                // This is Shift + Tab but just send Shift for ease of processing
                ProcessKeyDownEdit(Keys.ShiftKey, SelectedGrid);
                return true;
            }

            return base.ProcessTabKey(TabForward);

        }

        private void cmbEdit_DropDownClosed(object sender, EventArgs e)
        {
            if (PriceRegionUpdate & (cmbEdit.Text ?? "") != (PreviousRegion ?? "") | PriceSystemUpdate & (cmbEdit.Text ?? "") != (PreviousSystem ?? "") | PriceTypeUpdate & (cmbEdit.Text ?? "") != (PreviousPriceType ?? "") & !UpdatingCombo)
            {
                DataEntered = true;
                ProcessKeyDownEdit(Keys.Enter, SelectedGrid);
            }
        }

        private void cmbEdit_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!DataUpdated)
            {
                DataEntered = true;
            }
        }

        private void cmbEdit_LostFocus(object sender, EventArgs e)
        {
            // Lost focus some other way than tabbing
            if ((PriceRegionUpdate & (cmbEdit.Text ?? "") != (PreviousRegion ?? "") | PriceSystemUpdate & (cmbEdit.Text ?? "") != (PreviousSystem ?? "") | PriceTypeUpdate & (cmbEdit.Text ?? "") != (PreviousPriceType ?? "")) & !TabPressed & !UpdatingCombo)
            {
                DataEntered = true;
                ProcessKeyDownEdit(Keys.Enter, SelectedGrid);
            }
            cmbEdit.Visible = false;
            TabPressed = false;
        }

        private void txtListEdit_GotFocus(object sender, EventArgs e)
        {
            txtListEdit.SelectAll();
        }

        private void txtListEdit_KeyDown(object sender, KeyEventArgs e)
        {
            if (!DataEntered) // If data already entered, then they didn't do it through paste
            {
                DataEntered = Public_Variables.ProcessCutCopyPasteSelect(txtListEdit, e);
            }

            if (e.KeyCode == Keys.Delete | e.KeyCode == Keys.Back)
            {
                DataEntered = true;
            }

            if (e.KeyCode == Keys.Enter)
            {
                IgnoreFocus = true;
                ProcessKeyDownEdit(Keys.Enter, SelectedGrid);
                IgnoreFocus = false;
            }
        }

        private void txtListEdit_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Make sure it's the right format for ME or Price update
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (MEUpdate)
                {
                    if (Public_Variables.allowedMETEChars.IndexOf(e.KeyChar) == -1)
                    {
                        // Invalid Character
                        e.Handled = true;
                    }
                    else
                    {
                        DataEntered = true;
                    }
                }
                else if (PriceUpdate)
                {
                    if (Public_Variables.allowedPriceChars.IndexOf(e.KeyChar) == -1)
                    {
                        // Invalid Character
                        e.Handled = true;
                    }
                    else
                    {
                        DataEntered = true;
                    }
                }
                else if (PriceModifierUpdate)
                {
                    e.Handled = Public_Variables.CheckPercentCharEntry(e, txtListEdit);
                    if (e.Handled == false)
                    {
                        DataEntered = true;
                    }
                }
            }

        }

        private void txtListEdit_LostFocus(object sender, EventArgs e)
        {
            if (!RefreshingGrid & DataEntered & !IgnoreFocus & PriceModifierUpdate & (txtListEdit.Text ?? "") != (PreviousPriceMod ?? ""))
            {
                ProcessKeyDownEdit(Keys.Enter, SelectedGrid);
            }
            txtListEdit.Visible = false;
        }

        private void txtListEdit_TextChanged(object sender, EventArgs e)
        {
            if (MEUpdate) // make sure they only enter 0-10 for values
            {
                var argMETETextBox = txtListEdit;
                Public_Variables.VerifyMETEEntry(ref argMETETextBox, "ME");
                txtListEdit = argMETETextBox;
            }
        }

        // Sets the variables for price profiles
        private void SetPriceProfileVariables(int Index)
        {
            PriceTypeUpdate = false;
            PriceRegionUpdate = false;
            PriceSystemUpdate = false;
            PriceModifierUpdate = false;

            switch (Index)
            {
                case 1:
                    {
                        PriceTypeUpdate = true;
                        PreviousPriceType = CurrentCell.Text;
                        break;
                    }
                case 2:
                    {
                        PriceRegionUpdate = true;
                        PreviousRegion = CurrentCell.Text;
                        break;
                    }
                case 3:
                    {
                        PriceSystemUpdate = true;
                        PreviousSystem = CurrentCell.Text;
                        break;
                    }
                case 4:
                    {
                        PriceModifierUpdate = true;
                        PreviousPriceMod = CurrentCell.Text;
                        break;
                    }
            }

        }

        // Detects Scroll event and hides boxes
        private void lstBPComponentMats_ProcMsg(Message m)
        {
            txtListEdit.Hide();
            cmbEdit.Hide();
        }

        // Detects Scroll event and hides boxes
        private void lstBPRawMats_ProcMsg(Message m)
        {
            txtListEdit.Hide();
            cmbEdit.Hide();
        }

        // Detects Scroll event and hides boxes
        private void lstPricesView_ProcMsg(Message m)
        {
            txtListEdit.Hide();
            cmbEdit.Hide();
        }

        // Detects Scroll event and hides boxes
        private void lstRawPriceProfile_ProcMsg(Message m)
        {
            txtListEdit.Hide();
            cmbEdit.Hide();
        }

        // Detects Scroll event and hides boxes
        private void lstManufacturedPriceProfile_ProcMsg(Message m)
        {
            txtListEdit.Hide();
            cmbEdit.Hide();
        }

        #endregion

        #region Blueprints Tab

        #region Blueprints Tab User Objects (Check boxes, Text, Buttons) Functions/Procedures 

        private void btnBPComponents_Click(object sender, EventArgs e)
        {
            lstBPComponentMats.Visible = true;
            lstBPBuiltComponents.Visible = false;
            lblBPComponentMats.Text = "Component Material List";
        }

        // Inits the Invention tab so it shows correctly with themes
        public void InitInventionTab()
        {
            string sb = string.Empty;
            string v = string.Empty;

            string argpszSubAppName = " ";
            string argpszSubIdList = " ";
            try
            {
                frmMain.SetWindowTheme(tabBPInventionEquip.Handle, argpszSubAppName, argpszSubIdList);
            }
            catch (Exception)
            {
            }
        }

        private void btnBPBuiltComponents_Click(object sender, EventArgs e)
        {
            lstBPComponentMats.Visible = false;
            lstBPBuiltComponents.Visible = true;
            lblBPComponentMats.Text = "Built Component Material List";
        }

        private void rbtnBPAdvT2MatType_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPAdvT2MatType.Checked)
            {
                LoadT2T3MatFacility(BuildMatType.AdvMaterials);
            }
        }

        private void rbtnBPProcT2MatType_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPProcT2MatType.Checked)
            {
                LoadT2T3MatFacility(BuildMatType.ProcessedMaterials);
            }
        }

        private void rbtnBPRawT2MatType_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPRawT2MatType.Checked)
            {
                LoadT2T3MatFacility(BuildMatType.RawMaterials);
            }
        }

        private void LoadT2T3MatFacility(BuildMatType MatType)
        {
            SettingsVariables.UserBPTabSettings.BuildT2T3Materials = MatType;
            if (!(Public_Variables.SelectedBlueprint == null))
            {
                {
                    ref var withBlock = ref Public_Variables.SelectedBlueprint;
                    BPTabFacility.LoadFacility(withBlock.GetBPID(), withBlock.GetItemGroupID(), withBlock.GetItemCategoryID(), withBlock.GetTechLevel(), false, false, false, MatType);
                }
            }
            ProcessT2MatSelection();
        }

        private void chkPerUnit_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & !UpdatingCheck)
            {
                UpdateBPPriceLabels();
                // Update history too
                UpdateBPHistory(false);
            }
        }

        private void txtBPLines_DoubleClick(object sender, EventArgs e)
        {
            // Enter the max lines we have
            txtBPLines.Text = Public_Variables.SelectedCharacter.MaximumProductionLines.ToString();
        }

        private void txtBPLines_LostFocus(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(Strings.Trim(txtBPLines.Text)))
            {
                txtBPLines.Text = Public_Variables.SelectedCharacter.MaximumProductionLines.ToString();
            }
        }

        private void txtBPLines_KeyDown(object sender, KeyEventArgs e)
        {
            Public_Variables.ProcessCutCopyPasteSelect(txtBPLines, e);
            EnterKeyRunBP(e);
        }

        private void txtBPLines_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void txtBPLines_TextChanged(object sender, EventArgs e)
        {
            var argRefTextbox = txtBPLines;
            ConverttoOnlyNumbers(ref argRefTextbox);
            txtBPLines = argRefTextbox;
        }

        private void txtBPInventionLines_DoubleClick(object sender, EventArgs e)
        {
            // Enter the max lines we have
            txtBPInventionLines.Text = Public_Variables.SelectedCharacter.MaximumLaboratoryLines.ToString();
        }

        private void txtBPInventionLines_KeyDown(object sender, KeyEventArgs e)
        {
            Public_Variables.ProcessCutCopyPasteSelect(txtBPInventionLines, e);
            EnterKeyRunBP(e);
        }

        private void txtBPInventionLines_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void lblBPCanMakeBP_DoubleClick(object sender, EventArgs e)
        {
            // Only allow if items in list
            if (lstBPComponentMats.Items.Count > 0)
            {
                var f1 = new frmReqSkills(Public_Variables.SkillType.BPReqSkills);
                f1.Show();
            }
        }

        private void lblBPCanMakeBPAll_DoubleClick(object sender, EventArgs e)
        {
            // Don't allow popup if buying all
            if (lblBPCanMakeBPAll.Text == "Buying all Materials")
            {
                return;
            }

            // Only update the make all label if we have something to make, else use the bp data
            if (Public_Variables.SelectedBlueprint.HasComponents())
            {
                var f1 = new frmReqSkills(Public_Variables.SkillType.BPComponentSkills);
                f1.Show();
            }
            else
            {
                var f1 = new frmReqSkills(Public_Variables.SkillType.BPReqSkills);
                f1.Show();
            }
        }

        private void lblBPInventStatus_Click(object sender, EventArgs e)
        {
            var f1 = new frmReqSkills(Public_Variables.SkillType.InventionReqSkills);
            f1.Show();
        }

        private void lblReverseEngineerStatus_Click(object sender, EventArgs e)
        {
            var f1 = new frmReqSkills(Public_Variables.SkillType.REReqSkills);
            f1.Show();
        }

        private void txtBPCCosts_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPriceChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void chkBPBuildBuy_CheckedChanged(object sender, EventArgs e)
        {
            // Disable the choice for raw or components for shopping list and just add components
            if (!Public_Variables.FirstLoad & !UpdatingCheck)
            {
                if (chkBPBuildBuy.Checked)
                {
                    rbtnBPComponentCopy.Enabled = true;
                    rbtnBPRawmatCopy.Enabled = false;
                }
                else if (!(Public_Variables.SelectedBlueprint == null))
                {
                    if (Public_Variables.SelectedBlueprint.HasComponents())
                    {
                        rbtnBPComponentCopy.Enabled = true;
                        rbtnBPRawmatCopy.Enabled = true;
                    }
                    else
                    {
                        rbtnBPComponentCopy.Enabled = false;
                        rbtnBPRawmatCopy.Enabled = false;
                    }
                }

                // Refresh
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);
                }

            }

        }

        private void lstBPComponentMats_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            ListView argRefListView = lstBPComponentMats;
            Public_Variables.ListViewColumnSorter(e.Column, ref argRefListView, ref BPCompColumnClicked, ref BPCompColumnSortType);
        }

        private void lstBPRawMats_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            ListView argRefListView = lstBPRawMats;
            Public_Variables.ListViewColumnSorter(e.Column, ref argRefListView, ref BPRawColumnClicked, ref BPRawColumnSortType);
        }

        private void ResetInventionBoxes()
        {
            // Reset Decrytpor
            ResetDecryptorCombos(0);

            lblBPInventionCost.Text = "0.00";
            lblBPRECost.Text = "0.00";
            lblBPInventionChance.Text = "0%";
            lblBPDecryptorStats.Text = "ME: 0, TE: 0," + Constants.vbCrLf + "BP Runs: 0";

        }

        private void ResetDecryptorCombos(int InventionTech)
        {
            LoadingInventionDecryptors = true;
            LoadingT3Decryptors = true;
            InventionDecryptorsLoaded = false;
            T3DecryptorsLoaded = false;

            var TempDecryptors = new DecryptorList();

            // Auto load the decryptor if they want
            if (InventionTech == 2)
            {
                if (SettingsVariables.UserApplicationSettings.SaveBPRelicsDecryptors & !string.IsNullOrEmpty(SettingsVariables.UserBPTabSettings.T2DecryptorType))
                {
                    cmbBPInventionDecryptor.Text = SettingsVariables.UserBPTabSettings.T2DecryptorType;
                    SelectedDecryptor = TempDecryptors.GetDecryptor(cmbBPInventionDecryptor.Text);
                }
                else
                {
                    cmbBPInventionDecryptor.Text = Public_Variables.None;
                    SelectedDecryptor = DecryptorVariables.NoDecryptor;
                } // Reset the selected decryptor too
            }
            else if (InventionTech == 3)
            {
                // Load for T3
                if (SettingsVariables.UserApplicationSettings.SaveBPRelicsDecryptors & !string.IsNullOrEmpty(SettingsVariables.UserBPTabSettings.T3DecryptorType))
                {
                    cmbBPT3Decryptor.Text = SettingsVariables.UserBPTabSettings.T3DecryptorType;
                    SelectedDecryptor = TempDecryptors.GetDecryptor(cmbBPT3Decryptor.Text);
                }
                else
                {
                    cmbBPT3Decryptor.Text = Public_Variables.None;
                    SelectedDecryptor = DecryptorVariables.NoDecryptor;
                } // Reset the selected decryptor too
            }

            // Reset both
            else
            {
                cmbBPInventionDecryptor.Text = Public_Variables.None;
                cmbBPT3Decryptor.Text = Public_Variables.None;
                SelectedDecryptor = DecryptorVariables.NoDecryptor;
            } // Reset the selected decryptor too

            LoadingInventionDecryptors = false;
            LoadingT3Decryptors = false;

        }

        private void ResetfromTechSizeCheck()
        {
            cmbBPsLoaded = false;

            ComboMenuDown = false;
            MouseWheelSelection = false;
            ComboBoxArrowKeys = false;
            BPComboKeyDown = false;

            LoadBlueprintCombo();

            cmbBPBlueprintSelection.Text = "Select Blueprint";
            cmbBPBlueprintSelection.Focus();

        }

        private void ConverttoOnlyNumbers(ref TextBox RefTextbox, bool AllowCommaDecimal = false)
        {
            if (!string.IsNullOrEmpty(Strings.Trim(RefTextbox.Text)))
            {
                string TypedNumber = RefTextbox.Text;
                string NumberRegex;

                if (AllowCommaDecimal)
                {
                    NumberRegex = @"^\d+\.?\d*|\d{0,2}(,\d{3})*$";
                }
                else
                {
                    NumberRegex = @"^\d*$";
                }

                if (!System.Text.RegularExpressions.Regex.Match(TypedNumber, NumberRegex).Success)
                {
                    RefTextbox.Text = RefTextbox.Text.Remove(RefTextbox.Text.Length - 1, 1);
                    RefTextbox.SelectAll();
                }
            }
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            txtPriceItemFilter.Text = "";
            UpdatePriceList();
        }

        private void txtBPRuns_MouseWheel(object sender, MouseEventArgs e)
        {
            if (e.Delta > 0)
            {
                // UP
                txtBPRuns.Text = (Conversion.Val(txtBPRuns.Text) + 1d).ToString();
            }
            // Down
            else if (Conversion.Val(txtBPRuns.Text) != 1d)
            {
                txtBPRuns.Text = (Conversion.Val(txtBPRuns.Text) - 1d).ToString();
            }
        }

        private void txtBPRuns_GotFocus(object sender, EventArgs e)
        {
            txtBPRuns.SelectAll();
        }

        private void txtBPRuns_KeyDown(object sender, KeyEventArgs e)
        {
            Public_Variables.ProcessCutCopyPasteSelect(txtBPRuns, e);
            EnterKeyRunBP(e);
        }

        private void txtBPRuns_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtBPRuns_TextChanged(object sender, EventArgs e)
        {
            var argRefTextbox = txtBPRuns;
            ConverttoOnlyNumbers(ref argRefTextbox);
            txtBPRuns = argRefTextbox;
        }

        private void txtBPRuns_KeyUp(object sender, KeyEventArgs e)
        {
            if (!EnterKeyPressed)
            {
                EnterKeyPressed = false;
            }
        }

        private void txtBPRuns_LostFocus(object sender, EventArgs e)
        {
            if (!IgnoreFocus)
            {
                UpdateBPLinesandBPs();
                IgnoreFocus = true;
            }
            if (string.IsNullOrEmpty(Strings.Trim(txtBPRuns.Text)))
            {
                txtBPRuns.Text = "1";
            }
        }

        private void txtBPAddlCosts_KeyDown(object sender, KeyEventArgs e)
        {
            Public_Variables.ProcessCutCopyPasteSelect(txtBPAddlCosts, e);
            EnterKeyRunBP(e);
        }

        private void txtBPAddlCosts_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPriceChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtBPAddlCosts_LostFocus(object sender, EventArgs e)
        {
            if (Information.IsNumeric(txtBPAddlCosts.Text))
            {
                txtBPAddlCosts.Text = Strings.FormatNumber(txtBPAddlCosts.Text, 2);
            }
            else if (string.IsNullOrEmpty(Strings.Trim(txtBPAddlCosts.Text)) | !Information.IsNumeric(txtBPAddlCosts.Text))
            {
                txtBPAddlCosts.Text = "0.00";
            }
        }

        private void txtBPAddlCosts_TextChanged(object sender, EventArgs e)
        {
            var argRefTextbox = txtBPAddlCosts;
            ConverttoOnlyNumbers(ref argRefTextbox, true);
            txtBPAddlCosts = argRefTextbox;
        }

        private void txtBPME_KeyDown(object sender, KeyEventArgs e)
        {
            Public_Variables.ProcessCutCopyPasteSelect(txtBPME, e);
            if (e.KeyCode == Keys.Enter)
            {
                EnterKeyRunBP(e);
            }
        }

        private void txtBPME_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedMETEChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtBPME_TextChanged(object sender, EventArgs e)
        {
            var argRefTextbox = txtBPME;
            ConverttoOnlyNumbers(ref argRefTextbox);
            txtBPME = argRefTextbox;
            var argMETETextBox = txtBPME;
            Public_Variables.VerifyMETEEntry(ref argMETETextBox, "ME");
            txtBPME = argMETETextBox;
        }

        private void txtBPME_LostFocus(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(Strings.Trim(txtBPME.Text)))
            {
                txtBPME.Text = "0";
            }
        }

        private void txtBPTE_KeyDown(object sender, KeyEventArgs e)
        {
            Public_Variables.ProcessCutCopyPasteSelect(txtBPTE, e);
            if (e.KeyCode == Keys.Enter)
            {
                EnterKeyRunBP(e);
            }
        }

        private void txtBPTE_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedMETEChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtBPTE_TextChanged(object sender, EventArgs e)
        {
            var argRefTextbox = txtBPTE;
            ConverttoOnlyNumbers(ref argRefTextbox);
            txtBPTE = argRefTextbox;
            var argMETETextBox = txtBPTE;
            Public_Variables.VerifyMETEEntry(ref argMETETextBox, "TE");
            txtBPTE = argMETETextBox;
        }

        private void txtBPTE_LostFocus(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(Strings.Trim(txtBPTE.Text)))
            {
                txtBPTE.Text = "0";
            }
        }

        private void chkBPFacilityIncludeUsage_CheckedChanged(object sender, EventArgs e)
        {
            // If Not FirstLoad And Not ChangingUsageChecks And Not SentFromManufacturingTab Then
            // If Not IsNothing(SelectedBlueprint) And Not SentFromManufacturingTab Then
            // Call SetDefaultFacilitybyCheck(GetProductionType(cmbBPFacilityActivities.Text, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, cmbBPFacilityType.Text),
            // chkBPFacilityIncludeUsage, BPTab, cmbBPFacilityType.Text, cmbBPFacilityorArray,
            // lblBPFacilityDefault, btnBPFacilitySave, Nothing, Nothing, ttBP)

            // Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
            // End If
            // End If
        }

        private void chkBPTaxesFees_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & Public_Variables.SetTaxFeeChecks)
            {
                RefreshBPData();
            }
        }

        private void chkBPBrokerFees_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & Public_Variables.SetTaxFeeChecks)
            {
                RefreshBPData();
            }
        }

        private void chkBPBrokerFees_Click(object sender, EventArgs e)
        {
            if (chkBPBrokerFees.Checked & chkBPBrokerFees.CheckState == CheckState.Indeterminate) // Show rate box
            {
                txtBPBrokerFeeRate.Visible = true;
            }
            else
            {
                txtBPBrokerFeeRate.Visible = false;
            }

            if (!Public_Variables.FirstLoad & Public_Variables.SetTaxFeeChecks)
            {
                RefreshBPData();
            }
        }

        private void txtBPBrokerFeeRate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtBPBrokerFeeRate.Text = Public_Variables.GetFormattedPercentEntry(txtBPBrokerFeeRate);
                RefreshBPData();
            }
        }

        private void txtBPBrokerFeeRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers, decimal, percent or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPercentChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtBPBrokerFeeRate_GotFocus(object sender, EventArgs e)
        {
            txtBPBrokerFeeRate.SelectAll();
        }

        private void txtBPBrokerFeeRate_LostFocus(object sender, EventArgs e)
        {
            txtBPBrokerFeeRate.Text = Public_Variables.GetFormattedPercentEntry(txtBPBrokerFeeRate);
            RefreshBPData();
        }

        public void RefreshBPData()
        {
            if (!(Public_Variables.SelectedBlueprint == null))
            {
                Public_Variables.SelectedBlueprint.SetPriceData(chkBPTaxes.Checked, Public_Variables.GetBrokerFeeData(chkBPBrokerFees, txtBPBrokerFeeRate));
                UpdateBPPriceLabels();
            }
        }

        private void txtBPNumBPs_DoubleClick(object sender, EventArgs e)
        {
            LoadDefaultNumBPS();
        }

        private void txtBPNumBPs_KeyDown(object sender, KeyEventArgs e)
        {
            Public_Variables.ProcessCutCopyPasteSelect(txtBPNumBPs, e);
            EnterKeyRunBP(e);
        }

        private void txtBPNumBPs_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtBPNumBPs_TextChanged(object sender, EventArgs e)
        {
            var argRefTextbox = txtBPNumBPs;
            ConverttoOnlyNumbers(ref argRefTextbox);
            txtBPNumBPs = argRefTextbox;
        }

        private void txtBPNumBPs_LostFocus(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(Strings.Trim(txtBPNumBPs.Text)))
            {
                txtBPNumBPs.Text = "1";
                LoadDefaultNumBPS();
            }
        }

        private void LoadDefaultNumBPS()
        {
            if (!(Public_Variables.SelectedBlueprint == null))
            {
                txtBPNumBPs.Text = GetUsedNumBPs(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), Conversions.ToInteger(txtBPRuns.Text), Conversions.ToInteger(txtBPLines.Text), Conversions.ToInteger(txtBPNumBPs.Text), SelectedDecryptor.RunMod).ToString();
            }
        }

        private void LoadBPInventionDecryptors()
        {
            if (!InventionDecryptorsLoaded)
            {
                // Clear anything that was there
                cmbBPInventionDecryptor.Items.Clear();

                // Add NONE
                cmbBPInventionDecryptor.Items.Add(Public_Variables.None);

                var Decryptors = new DecryptorList();

                for (int i = 0, loopTo = Decryptors.GetDecryptorList().Count - 1; i <= loopTo; i++)
                    cmbBPInventionDecryptor.Items.Add(Decryptors.GetDecryptorList()[i].Name);

                InventionDecryptorsLoaded = true;

            }
        }

        private void LoadBPT3InventionDecryptors()
        {
            if (!T3DecryptorsLoaded)
            {
                // Clear anything that was there
                cmbBPT3Decryptor.Items.Clear();

                // Add NONE
                cmbBPT3Decryptor.Items.Add(Public_Variables.None);

                var Decryptors = new DecryptorList();

                for (int i = 0, loopTo = Decryptors.GetDecryptorList().Count - 1; i <= loopTo; i++)
                    cmbBPT3Decryptor.Items.Add(Decryptors.GetDecryptorList()[i].Name);

                T3DecryptorsLoaded = true;

            }
        }

        private void cmbBPInventionDecryptor_DropDown(object sender, EventArgs e)
        {
            LoadBPInventionDecryptors();
        }

        private void cmbBPInventionDecryptor_SelectedIndexChanged(object sender, EventArgs e)
        {

            // Only load when the user selects a new decryptor from the list, not when changing the text
            if (!LoadingInventionDecryptors)
            {
                SelectDecryptor(cmbBPInventionDecryptor.Text);

                // Reload the number of bps you need etc
                // If the runs changed, update the lines data based on decryptor, need to update it first before running
                UpdateBPLinesandBPs();

                // Use the original ME and TE values when they change the decryptor
                UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);

            }

        }

        private void cmbBPT3Decryptor_DropDown(object sender, EventArgs e)
        {
            LoadBPT3InventionDecryptors();
        }

        private void cmbBPT3Decryptor_SelectedIndexChanged(object sender, EventArgs e)
        {

            // Only load when the user selects a new decryptor from the list, not when changing the text
            if (!LoadingT3Decryptors)
            {
                SelectDecryptor(cmbBPT3Decryptor.Text);

                // Reload the number of bps you need etc
                // If the runs changed, update the lines data based on decryptor, need to update it first before running
                UpdateBPLinesandBPs();

                // Use the original ME and TE values when they change the decryptor
                UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);

            }
        }

        private void cmbBPRelic_DropDown(object sender, EventArgs e)
        {

            if (!RelicsLoaded)
            {
                LoadRelicTypes(Public_Variables.SelectedBlueprint.GetTypeID());
            }

        }

        private void cmbBPRelic_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (!LoadingRelics)
            {
                // Use the original values when selecting a new relic
                UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);
            }

        }

        private void SetInventionEnabled(string InventionType, bool Enable)
        {
            if (InventionType == "T2")
            {
                chkBPIncludeCopyCosts.Enabled = Enable;
                chkBPIncludeCopyTime.Enabled = Enable;
                chkBPIncludeInventionCosts.Enabled = Enable;
                chkBPIncludeInventionTime.Enabled = Enable;

                txtBPInventionLines.Enabled = Enable;
                cmbBPInventionDecryptor.Enabled = Enable;
            }
            else
            {
                chkBPIncludeT3Costs.Enabled = Enable;
                chkBPIncludeT3Time.Enabled = Enable;
                txtBPRelicLines.Enabled = Enable;
                cmbBPT3Decryptor.Enabled = Enable;
                cmbBPRelic.Enabled = Enable;
            }
        }

        private void chkBPIgnoreInvention_CheckedChanged(object sender, EventArgs e)
        {

            if (!UpdatingInventionChecks)
            {
                UpdatingInventionChecks = true;

                UpdateInventionTabs();

                // Reset the ME/TE for the BP based on the invention check
                if (!(Public_Variables.SelectedBlueprint == null) & chkBPIgnoreInvention.Checked == false)
                {
                    {
                        ref var withBlock = ref Public_Variables.SelectedBlueprint;
                        SetOwnedBPData(withBlock.GetBPID(), withBlock.GetTechLevel(), false, Public_Variables.SentFromLocation.None, Public_Variables.IsReaction(withBlock.GetItemGroupID()), true);
                    }
                }

                UpdatingInventionChecks = false;

                // If we are inventing, make sure we add or remove the activity based on the check
                if (tabBPInventionEquip.Contains(tabInventionCalcs) | tabBPInventionEquip.Contains(tabT3Calcs))
                {
                    if (chkBPIgnoreInvention.Checked)
                    {
                        txtBPME.Enabled = true;
                        txtBPTE.Enabled = true;
                    }
                    else
                    {
                        txtBPME.Enabled = false;
                        txtBPTE.Enabled = false;
                    }
                }

                if (!Public_Variables.FirstLoad & !IgnoreRefresh)
                {
                    RefreshBP();
                }
            }
        }

        private void UpdateInventionTabs()
        {
            if (chkBPIgnoreInvention.Checked)
            {
                if (tabBPInventionEquip.Contains(tabInventionCalcs))
                {
                    // Disable all first
                    SetInventionEnabled("T2", false);
                    BPTabFacility.SetIgnoreInvention(true, ProductionType.Invention, false);
                }

                else if (tabBPInventionEquip.Contains(tabT3Calcs))
                {
                    // Disable all first
                    SetInventionEnabled("T3", false);
                    BPTabFacility.SetIgnoreInvention(true, ProductionType.T3Invention, false);
                }
            }

            else if (tabBPInventionEquip.Contains(tabInventionCalcs)) // Set it on the user settings
            {
                // Enable all first
                SetInventionEnabled("T2", true);
                BPTabFacility.SetIgnoreInvention(false, ProductionType.Invention, true);
            }

            else if (tabBPInventionEquip.Contains(tabT3Calcs))
            {
                // Enable all first
                SetInventionEnabled("T3", true);
                BPTabFacility.SetIgnoreInvention(false, ProductionType.T3Invention, true);

            }
        }

        private void chkBPIgnoreMinerals_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                RefreshBP();
            }
        }

        private void chkBPIgnoreT1Item_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                RefreshBP();
            }
        }

        // Loads the T3 Relic types into the combo box based on BP Selected
        private void LoadRelicTypes(long BPID)
        {
            string SQL;
            SQLiteDataReader readerRelic;
            string RelicName;
            string UserRelicType = "";

            LoadingRelics = true;

            SQL = "SELECT typeName FROM INVENTORY_TYPES, INDUSTRY_ACTIVITY_PRODUCTS WHERE productTypeID =" + BPID + " ";
            SQL += "AND typeID = blueprintTypeID AND activityID = 8";

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerRelic = Public_Variables.DBCommand.ExecuteReader();

            if (!string.IsNullOrEmpty(SettingsVariables.UserBPTabSettings.RelicType))
            {
                if (SettingsVariables.UserBPTabSettings.RelicType.Contains(Public_Variables.WreckedRelic))
                {
                    UserRelicType = Public_Variables.WreckedRelic;
                }
                else if (SettingsVariables.UserBPTabSettings.RelicType.Contains(Public_Variables.MalfunctioningRelic))
                {
                    UserRelicType = Public_Variables.MalfunctioningRelic;
                }
                else if (SettingsVariables.UserBPTabSettings.RelicType.Contains(Public_Variables.IntactRelic))
                {
                    UserRelicType = Public_Variables.IntactRelic;
                }
            }

            cmbBPRelic.Items.Clear();

            while (readerRelic.Read())
            {
                RelicName = readerRelic.GetString(0);
                cmbBPRelic.Items.Add(RelicName);
                // Load the name of the Wrecked Relic or base tactical destroyer relic in the combo when found 
                if (RelicName.Contains(Public_Variables.WreckedRelic) & string.IsNullOrEmpty(SettingsVariables.UserBPTabSettings.RelicType))
                {
                    cmbBPRelic.Text = RelicName;
                }
                else if (!string.IsNullOrEmpty(UserRelicType))
                {
                    if (RelicName.Contains(UserRelicType))
                    {
                        cmbBPRelic.Text = RelicName;
                    }
                }
            }

            readerRelic.Close();

            readerRelic = null;
            Public_Variables.DBCommand = null;

            LoadingRelics = false;
            RelicsLoaded = true;

        }

        private void btnCopyMatstoClip_Click(object sender, EventArgs e)
        {
            var ClipboardData = new DataObject();
            string OutputText = "";
            string DecryptorText = "";
            string RelicText = "";
            string AddlText = "";
            string ExportFormat = "";

            if ((cmbBPInventionDecryptor.Text ?? "") != Public_Variables.None)
            {
                DecryptorText = "Decryptor: " + cmbBPInventionDecryptor.Text;
            }

            if ((cmbBPRelic.Text ?? "") != Public_Variables.None)
            {
                RelicText = "Relic: " + cmbBPRelic.Text;
            }

            if (!string.IsNullOrEmpty(RelicText))
            {
                AddlText = ", " + RelicText;
            }
            // Decryptor
            else if (!string.IsNullOrEmpty(DecryptorText))
            {
                AddlText = ", " + DecryptorText;
            }

            AddlText = ")" + Environment.NewLine + Environment.NewLine;

            if (chkBPSimpleCopy.Checked == false)
            {
                ExportFormat = SettingsVariables.UserApplicationSettings.DataExportFormat;
            }
            else
            {
                ExportFormat = Public_Variables.MultiBuyDataExport;
            }

            if ((rbtnBPRawmatCopy.Checked | chkBPBuildBuy.Checked) & lstBPBuiltComponents.Visible == false)
            {
                if (chkBPSimpleCopy.Checked == false)
                {
                    OutputText = "Raw Material List for " + txtBPRuns.Text + " Units of '" + cmbBPBlueprintSelection.Text + "' (ME: " + txtBPME.Text + AddlText;
                }
                OutputText = OutputText + Public_Variables.SelectedBlueprint.GetRawMaterials().GetClipboardList(ExportFormat, false, false, false, SettingsVariables.UserApplicationSettings.IncludeInGameLinksinCopyText);
            }
            else if (lstBPBuiltComponents.Visible)
            {
                if (chkBPSimpleCopy.Checked == false)
                {
                    OutputText = "Component Material List for " + txtBPRuns.Text + " Units of '" + cmbBPBlueprintSelection.Text + "' (ME: " + txtBPME.Text + AddlText;
                }
                // Put the list into materials
                var BuiltList = new Materials();
                Material BIMat;
                foreach (var BI in Public_Variables.SelectedBlueprint.BuiltComponentList.GetBuiltItemList())
                {
                    BIMat = new Material(BI.BPTypeID, BI.ItemName, "", BI.ItemQuantity, BI.ItemVolume, 0d, BI.BuildME.ToString(), BI.BuildTE.ToString(), true);
                    BuiltList.InsertMaterial(BIMat);
                }
                OutputText = OutputText + BuiltList.GetClipboardList(ExportFormat, false, false, false, SettingsVariables.UserApplicationSettings.IncludeInGameLinksinCopyText, true);
            }
            else
            {
                if (chkBPSimpleCopy.Checked == false)
                {
                    OutputText = "Component Material List for " + txtBPRuns.Text + " Units of '" + cmbBPBlueprintSelection.Text + "' (ME: " + txtBPME.Text + AddlText;
                }
                OutputText = OutputText + Public_Variables.SelectedBlueprint.GetComponentMaterials().GetClipboardList(ExportFormat, false, false, false, SettingsVariables.UserApplicationSettings.IncludeInGameLinksinCopyText);
            }

            if (SettingsVariables.UserApplicationSettings.ShopListIncludeInventMats)
            {
                if (!(Public_Variables.SelectedBlueprint.GetInventionMaterials().GetMaterialList() == null))
                {
                    if (chkBPSimpleCopy.Checked == false)
                    {
                        OutputText = OutputText + Environment.NewLine + Environment.NewLine + "Invention Materials" + Environment.NewLine + Environment.NewLine;
                    }
                    OutputText = OutputText + Public_Variables.SelectedBlueprint.GetInventionMaterials().GetClipboardList(ExportFormat, false, false, false, SettingsVariables.UserApplicationSettings.IncludeInGameLinksinCopyText);
                }
            }

            // Paste to clipboard
            Public_Variables.CopyTextToClipboard(OutputText);

        }

        private void cmbBPInventionDecryptor_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void cmbBPREDecryptor_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void rbtnAllBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPAllBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, true, true, true, true);
            }
        }

        private void rbtnBPOwnedBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPOwnedBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, true, true, true, true);
            }
        }

        // Private Sub chkBPIncludeIgnoredBPs_CheckedChanged(sender As System.Object, e As System.EventArgs)
        // If chkBPIncludeIgnoredBPs.Checked Then
        // Call ResetBlueprintCombo(True, True, True, True, True, True)
        // End If
        // End Sub

        private void rbtnShipBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPShipBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, true, false, true, true);
            }
        }

        private void rbtnModuleBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPModuleBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, false, true, true, false);
            }
        }

        private void rbtnDroneBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPDroneBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, false, false, false, true);
            }
        }

        private void rbtnComponentBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPComponentBlueprints.Checked)
            {
                ResetBlueprintCombo(true, false, false, false, false, false);
            }
        }

        private void rbtnSubsystemBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPSubsystemBlueprints.Checked)
            {
                ResetBlueprintCombo(false, false, true, false, false, false);
            }
        }

        private void rbtnToolBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPMiscBlueprints.Checked)
            {
                ResetBlueprintCombo(true, false, false, false, false, false);
            }
        }

        private void rbtnAmmoChargeBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPAmmoChargeBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, false, false, false, false);
            }
        }

        private void rbtnRigBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPRigBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, false, false, false, false);
            }
        }

        private void rbtnStructureBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPStructureBlueprints.Checked)
            {
                ResetBlueprintCombo(true, false, false, false, false, true);
            }
        }

        private void rbtnBoosterBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPBoosterBlueprints.Checked)
            {
                ResetBlueprintCombo(true, false, false, false, false, false);
            }
        }

        private void rbtnBPDeployableBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPDeployableBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, false, false, false, false);
            }
        }

        private void rbtnBPStationPartsBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPStructureRigsBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, false, false, false, false);
            }
        }

        private void rbtnBPStationModulesBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPStructureModulesBlueprints.Checked)
            {
                ResetBlueprintCombo(true, false, false, false, false, false);
            }
        }

        private void rbtnBPReactionsBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPReactionsBlueprints.Checked)
            {
                ResetBlueprintCombo(true, false, false, false, false, false);
            }
        }

        private void rbtnBPCelestialBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPCelestialsBlueprints.Checked)
            {
                ResetBlueprintCombo(true, false, false, false, false, false);
            }
        }

        private void rbtnBPFavoriteBlueprints_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnBPFavoriteBlueprints.Checked)
            {
                ResetBlueprintCombo(true, true, true, true, true, true);
            }
        }

        private void chkBPNPCBPOs_CheckedChanged(object sender, EventArgs e)
        {
            ResetBlueprintCombo(true, false, false, false, false, false);
        }

        private void chkbpT1_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
                if (chkBPT1.Checked)
                {
                    chkBPNPCBPOs.Enabled = true;
                }
                else
                {
                    chkBPNPCBPOs.Enabled = false;
                }
            }
        }

        private void chkbpT2_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
            }
        }

        private void chkbpT3_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
            }
        }

        private void chkBPNavyFaction_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
            }
        }

        private void chkBPPirateFaction_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
            }
        }

        private void chkBPStoryline_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
            }
        }

        private void chkBPSmall_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
            }
        }

        private void chkBPMedium_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
            }
        }

        private void chkBPLarge_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
            }
        }

        private void chkBPXL_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                ResetfromTechSizeCheck();
            }
        }

        private void btnRefreshBP_Click(object sender, EventArgs e)
        {
            RefreshBP();
        }

        private void chkBPSellExcessItems_CheckedChanged(object sender, EventArgs e)
        {
            RefreshBP();
        }

        public void RefreshBP(bool IgnoreFocus = false)
        {
            bool localCorrectMETE() { var argMETextBox = txtBPME; var argTETextBox = txtBPTE; var ret = CorrectMETE(txtBPME.Text, txtBPTE.Text, ref argMETextBox, ref argTETextBox); txtBPME = argMETextBox; txtBPTE = argTETextBox; return ret; }

            if (localCorrectMETE())
            {
                if (!(Public_Variables.SelectedBlueprint == null))
                {
                    UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);
                    txtBPRuns.SelectAll();
                    if (!IgnoreFocus)
                    {
                        txtBPRuns.Focus();
                    }
                }
            }
        }

        private void lstBPComponentMats_MouseClick(object sender, MouseEventArgs e)
        {
            ListClicked(lstBPComponentMats, sender, e);
        }

        private void lstBPComponentMats_MouseDown(object sender, MouseEventArgs e)
        {
            inhibitAutoCheck = true;
        }

        private void lstBPComponentMats_MouseUp(object sender, MouseEventArgs e)
        {
            inhibitAutoCheck = false;
        }

        private void lstBPComponentMats_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            // If ClickedCheckBox(e, lstBPComponentMats.Items.Count) Then
            if (inhibitAutoCheck)
            {
                e.NewValue = e.CurrentValue;
            }
            // End If
        }

        private void lstBPComponentMats_ItemChecked(object sender, ItemCheckedEventArgs e)
        {
            if (!IgnoreListViewItemChecks)
            {
                // Process user checks, insert the item id and the check state in the bb list
                var CheckedItem = new Public_Variables.BuildBuyItem();

                CheckedItem.BuildItem = e.Item.Checked;
                CheckedItem.ItemID = Public_Variables.GetTypeID(Public_Variables.RemoveItemNameRuns(e.Item.SubItems[0].Text));

                // See if we can build this or not, if not, just uncheck the box and exit - don't refresh the bp
                string SQL;
                SQLiteDataReader readerIT;

                SQL = "SELECT 'X' FROM ALL_BLUEPRINTS WHERE ITEM_ID = " + CheckedItem.ItemID;
                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerIT = Public_Variables.DBCommand.ExecuteReader();

                if (readerIT.Read())
                {
                    readerIT.Close();
                }
                else
                {
                    // Can't build it
                    IgnoreListViewItemChecks = true;
                    e.Item.Checked = false;
                    IgnoreListViewItemChecks = false;
                    readerIT.Close();
                    return;
                }

                var FoundItem = new Public_Variables.BuildBuyItem();

                // Look up the list of BB Items and add the ItemID if not in the list, else make sure we have the correct toggle option
                BBItemtoFind = CheckedItem.ItemID;
                FoundItem = BBItems.Find(FindBBItem);

                // If found, then update the preference
                if (FoundItem.ItemID != 0L)
                {
                    BBItems.Remove(FoundItem);
                    FoundItem.BuildItem = CheckedItem.BuildItem;
                    BBItems.Add(FoundItem);
                }
                else
                {
                    // new item, so just add it
                    BBItems.Add(CheckedItem);
                }

                // ' See if the BB Items for the BP are in the list
                // BPBBItemtoFind = SelectedBlueprint.GetBPID
                // FoundBPItem = BPBBItems.Find(AddressOf FindBPBBItem)

                // ' See if the item checked is in the list, if so, update the temp, remove the old items and replace
                // If FoundBPItem.BPID <> 0 Then
                // ' In list, so just add the item to the found BP item if not there or update if there
                // For Each Item In FoundBPItem.BBItems
                // If Item.ItemID = CheckedItem.ItemID Then
                // ' just remove it then add later
                // FoundBPItem.BBItems.Remove(Item)
                // Exit For
                // End If
                // Next
                // ' Add the item with current info
                // FoundBPItem.BBItems.Add(CheckedItem)
                // Else
                // ' New item to add, now add the item that was toggled
                // TempBPItem.BPID = SelectedBlueprint.GetBPID
                // TempBPItem.BBItems = New List(Of BuildBuyItem)
                // TempBPItem.BBItems.Add(CheckedItem)
                // Call BPBBItems.Add(TempBPItem)
                // End If

                if (!Public_Variables.FirstLoad & !IgnoreRefresh)
                {
                    RefreshBP();
                }

            }
        }

        private void lstBPRawMats_MouseClick(object sender, MouseEventArgs e)
        {
            ListClicked(lstBPRawMats, sender, e);
        }

        private void EnterKeyRunBP(KeyEventArgs e)
        {
            bool localCorrectMETE() { var argMETextBox1 = txtBPME; var argTETextBox1 = txtBPTE; var ret = CorrectMETE(txtBPME.Text, txtBPTE.Text, ref argMETextBox1, ref argTETextBox1); txtBPME = argMETextBox1; txtBPTE = argTETextBox1; return ret; }

            if (localCorrectMETE())
            {
                if (e.KeyCode == Keys.Enter)
                {
                    EnterKeyPressed = true;
                    UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);
                    txtBPRuns.SelectAll();
                    IgnoreFocus = true;
                    txtBPRuns.Focus();
                    IgnoreFocus = false;
                }
            }
        }

        private void btnBPBack_Click(object sender, EventArgs e)
        {
            LoadPreviousBlueprint();
        }

        private void btnBPForward_Click(object sender, EventArgs e)
        {
            LoadNextBlueprint();
        }

        private void tabBPInventionEquip_Click(object sender, EventArgs e)
        {
            SelectedBPTabIndex = tabBPInventionEquip.SelectedIndex;
        }

        private void txtBPUpdateCostIndex_GotFocus(object sender, EventArgs e)
        {
            txtBPUpdateCostIndex.SelectAll();
        }

        private void txtBPUpdateCostIndex_KeyDown(object sender, KeyEventArgs e)
        {
            Public_Variables.ProcessCutCopyPasteSelect(txtBPUpdateCostIndex, e);
            EnterKeyRunBP(e);
        }

        private void txtBPUpdateCostIndex_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPercentChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    btnBPUpdateCostIndex.Enabled = true;
                }
            }
        }

        private void txtBPUpdateCostIndex_LostFocus(object sender, EventArgs e)
        {
            if (Information.IsNumeric(txtBPAddlCosts.Text))
            {
                txtBPAddlCosts.Text = Strings.FormatNumber(txtBPAddlCosts.Text, 2);
            }
            else if (string.IsNullOrEmpty(Strings.Trim(txtBPAddlCosts.Text)))
            {
                txtBPAddlCosts.Text = "0.00";
            }
        }

        private void txtBPMarketPriceEdit_GotFocus(object sender, EventArgs e)
        {
            txtBPMarketPriceEdit.SelectAll();
        }

        private void txtBPMarketPriceEdit_KeyDown(object sender, KeyEventArgs e)
        {
            if (!DataEntered) // If data already entered, then they didn't do it through paste
            {
                DataEntered = Public_Variables.ProcessCutCopyPasteSelect(txtBPMarketPriceEdit, e);
            }

            if (e.KeyCode == Keys.Enter)
            {
                IgnoreMarketFocus = true;
                // Update the price for this item
                UpdateMarketPriceManually();
                IgnoreMarketFocus = false;
            }
        }

        private void txtBPMarketPriceEdit_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Make sure it's the right format for Price update
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPriceChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }

        }

        private void txtBPMarketPriceEdit_LostFocus(object sender, EventArgs e)
        {
            if (!IgnoreMarketFocus & (txtBPMarketPriceEdit.Text ?? "") != (lblBPMarketCost.Text ?? ""))
            {
                UpdateMarketPriceManually();
            }
            txtBPMarketPriceEdit.Visible = false;
        }

        private void UpdateMarketPriceManually()
        {
            if (!string.IsNullOrEmpty(Strings.Trim(txtBPMarketPriceEdit.Text)))
            {
                string SQL = "UPDATE ITEM_PRICES_FACT SET PRICE = " + Conversions.ToDouble(txtBPMarketPriceEdit.Text).ToString() + ", PRICE_TYPE = 'User' WHERE ITEM_ID = " + Public_Variables.SelectedBlueprint.GetItemID();
                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);
                Public_Variables.PlayNotifySound();
                lblBPMarketCost.Text = Strings.FormatNumber(txtBPMarketPriceEdit.Text, 2);
                IgnoreFocus = true;
            }
            RefreshBP();
        }

        private void lblBPBPSVR_DoubleClick(object sender, EventArgs e)
        {
            if (chkBPBuildBuy.Checked)
            {
                lblBPBPSVR.Text = GetBPItemSVR(Public_Variables.SelectedBlueprint.GetTotalProductionTime()); // use total time since they are both the same
            }
            else
            {
                lblBPBPSVR.Text = GetBPItemSVR(Public_Variables.SelectedBlueprint.GetProductionTime());
            } // just bp time
        }

        private void lblBPRawSVR_DoubleClick(object sender, EventArgs e)
        {
            lblBPRawSVR.Text = GetBPItemSVR(Public_Variables.SelectedBlueprint.GetTotalProductionTime()); // total time to build everything
        }

        private void lblBPCompProfit_DoubleClick(object sender, EventArgs e)
        {
            if (lblBPCompProfit1.Text.Contains("Percent"))
            {
                // Swap to profit
                lblBPCompProfit.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetTotalComponentProfit(), 2);
                lblBPCompProfit1.Text = "Component Profit:";
            }
            else
            {
                lblBPCompProfit.Text = Strings.FormatPercent(Public_Variables.SelectedBlueprint.GetTotalComponentProfitPercent(), 2);
                lblBPCompProfit1.Text = "Component Profit Percent:";
            }
        }

        private void lblBPRawProfit_DoubleClick(object sender, EventArgs e)
        {
            if (lblBPRawProfit1.Text.Contains("Percent"))
            {
                // Swap to profit
                lblBPRawProfit.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetTotalRawProfit(), 2);
                lblBPRawProfit1.Text = "Raw Profit:";
            }
            else
            {
                lblBPRawProfit.Text = Strings.FormatPercent(Public_Variables.SelectedBlueprint.GetTotalRawProfitPercent(), 2);
                lblBPRawProfit1.Text = "Raw Profit Percent:";
            }
        }

        private void lstBPComponentMats_DoubleClick(object sender, EventArgs e)
        {

            // If the item doesn't have an ME (set to "-") then don't load
            if (lstBPComponentMats.SelectedItems.Count != 0)
            {
                if (lstBPComponentMats.SelectedItems[0].SubItems[2].Text != "-")
                {
                    SQLiteDataReader rsBP;
                    string SQL;
                    string BuildType = "";
                    string TempItemName = lstBPComponentMats.SelectedItems[0].SubItems[0].Text;

                    // Strip off any extra text
                    if (lstBPComponentMats.SelectedItems[0].SubItems[0].Text.Contains("("))
                    {
                        TempItemName = TempItemName.Substring(0, Strings.InStr(TempItemName, "(") - 2);
                    }

                    SQL = "SELECT BLUEPRINT_ID, PORTION_SIZE, ITEM_GROUP_ID, ITEM_CATEGORY_ID, BLUEPRINT_NAME FROM ALL_BLUEPRINTS WHERE ITEM_NAME =";
                    SQL += "'" + TempItemName + "'";

                    Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                    rsBP = Public_Variables.DBCommand.ExecuteReader();
                    rsBP.Read();

                    if (chkBPBuildBuy.Checked)
                    {
                        BuildType = "Build/Buy";
                    }

                    // Adjust the runs for porition size needed and use that instead
                    long BPID = rsBP.GetInt64(0);
                    long Runs = Conversions.ToLong(lstBPComponentMats.SelectedItems[0].SubItems[1].Text);

                    int GroupID = rsBP.GetInt32(2);
                    int CategoryID = rsBP.GetInt32(3);
                    string BPName = rsBP.GetString(4);

                    rsBP.Close();

                    string SelectedActivity = "";
                    if (BPName.Contains("Reaction Formula"))
                    {
                        SelectedActivity = ManufacturingFacility.ActivityReactions;
                    }
                    else
                    {
                        SelectedActivity = ManufacturingFacility.ActivityManufacturing;
                    }

                    {
                        var withBlock = BPTabFacility;
                        LoadBPfromEvent(BPID, BuildType, Public_Variables.None, Public_Variables.SentFromLocation.BlueprintTab, withBlock.GetSelectedManufacturingFacility(GroupID, CategoryID, SelectedActivity), withBlock.GetFacility(ProductionType.ComponentManufacturing), withBlock.GetFacility(ProductionType.CapitalComponentManufacturing), withBlock.GetSelectedInventionFacility(GroupID, CategoryID), withBlock.GetFacility(ProductionType.Copying), chkBPTaxes.Checked, Public_Variables.GetBrokerFeeData(chkBPBrokerFees, txtBPBrokerFeeRate), lstBPComponentMats.SelectedItems[0].SubItems[2].Text, txtBPTE.Text, Runs.ToString(), txtBPLines.Text, txtBPInventionLines.Text, "1", txtBPAddlCosts.Text, chkBPPricePerUnit.Checked); // Use 1 bp for now
                    }
                }
            }
        }

        private void lstPricesView_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            if (e.ColumnIndex == 0 | e.ColumnIndex >= 4)
            {
                e.Cancel = true;
                e.NewWidth = lstPricesView.Columns[e.ColumnIndex].Width;
            }
        }

        private void btnBPListMats_Click(object sender, EventArgs e)
        {
            if (!(Public_Variables.SelectedBlueprint == null))
            {
                var BFI = Public_Variables.GetBrokerFeeData(chkBPBrokerFees, txtBPBrokerFeeRate);
                var f1 = new frmMaterialListViewer(Public_Variables.SelectedBlueprint.GetExcessMaterials(), chkBPTaxes.Checked, BFI);
                f1.Show();
            }
        }

        // Makes sure we have a tech checked for blueprints
        private void EnsureBPTechCheck()
        {
            if (chkBPT1.Enabled & chkBPT1.Checked)
            {
                return;
            }
            else if (chkBPT2.Enabled & chkBPT2.Checked)
            {
                return;
            }
            else if (chkBPT3.Enabled & chkBPT3.Checked)
            {
                return;
            }
            else if (chkBPNavyFaction.Enabled & chkBPNavyFaction.Checked)
            {
                return;
            }
            else if (chkBPPirateFaction.Enabled & chkBPPirateFaction.Checked)
            {
                return;
            }
            else if (chkBPStoryline.Enabled & chkBPStoryline.Checked)
            {
                return;
            }

            // If here, then none are checked that are enabled, find the first one enabled and check it
            if (chkBPT1.Enabled)
            {
                chkBPT1.Checked = true;
                return;
            }
            else if (chkBPT2.Enabled)
            {
                chkBPT2.Checked = true;
                return;
            }
            else if (chkBPT3.Enabled)
            {
                chkBPT3.Checked = true;
                return;
            }
            else if (chkBPNavyFaction.Enabled)
            {
                chkBPNavyFaction.Checked = true;
                return;
            }
            else if (chkBPPirateFaction.Enabled)
            {
                chkBPPirateFaction.Checked = true;
                return;
            }
            else if (chkBPStoryline.Enabled)
            {
                chkBPStoryline.Checked = true;
                return;
            }

        }

        #endregion

        #region BP Combo / List Processing 

        private void cmbBPBlueprintSelection_DropDown(object sender, EventArgs e)
        {
            // If you drop down, don't show the text window
            // cmbBPBlueprintSelection.AutoCompleteMode = AutoCompleteMode.None
            lstBPList.Hide();
            ComboMenuDown = true;
            // if we drop down, we aren't using the arrow keys
            ComboBoxArrowKeys = false;
            BPComboKeyDown = false;
        }

        private void cmbBPBlueprintSelection_DropDownClosed(object sender, EventArgs e)
        {
            // If it closes up, re-enable autocomplete
            // cmbBPBlueprintSelection.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            ComboMenuDown = false;
            lstBPList.Hide(); // This could show up if people type into the list when combo down
                              // Call SelectBlueprint() ' Loads in selectionchangecommitted
            cmbBPBlueprintSelection.Focus();
        }

        private void cmbBPBlueprintSelection_MouseWheel(object sender, MouseEventArgs e)
        {
            // Only set mouse boolean when the combo isn't dropped down since users might want to use the wheel and click to select
            if (ComboMenuDown)
            {
                MouseWheelSelection = false;
            }
            else
            {
                MouseWheelSelection = true;
                cmbBPBlueprintSelection.Focus();
            }

        }

        private void cmbBPBlueprintSelection_DoubleClick(object sender, EventArgs e)
        {
            cmbBPBlueprintSelection.SelectAll();
        }

        private void cmbBPBlueprintSelection_LostFocus(object sender, EventArgs e)
        {
            // Close the list view when lost focus
            lstBPList.Hide();
            cmbBPBlueprintSelection.SelectAll();
        }

        // Thrown when the user changes the value in the combo box
        private void cmbBPBlueprintSelection_SelectionChangeCommitted(object sender, EventArgs e)
        {

            if (!MouseWheelSelection & !ComboBoxArrowKeys)
            {
                lstBPList.Visible = false; // We are loading the bp, so hide this
                BPSelected = true;
                LoadBPFromCombo();
            }

            BPSelected = false;

        }

        // Load the list box when the user types and don't use the drop down list
        private void cmbBPBlueprintSelection_TextChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad & !BPSelected & Strings.Trim(cmbBPBlueprintSelection.Text) != "Select Blueprint" & BPComboKeyDown)
            {
                if (ComboBoxArrowKeys == false)
                {
                    if (!string.IsNullOrEmpty(cmbBPBlueprintSelection.Text))
                    {
                        GetBPWithName(cmbBPBlueprintSelection.Text);
                    }
                    if (string.IsNullOrEmpty(cmbBPBlueprintSelection.Text))
                    {
                        lstBPList.Items.Clear();
                        lstBPList.Visible = false;
                    }
                }
            }
        }

        // Process keys for bp combo
        private void cmbBPBlueprintSelection_KeyDown(object sender, KeyEventArgs e)
        {

            if (cmbBPBlueprintSelection.DroppedDown == false)
            {
                BPComboKeyDown = true;
            }
            else
            {
                BPComboKeyDown = false;
            }

            if (e.KeyValue == (int)Keys.Up | e.KeyValue == (int)Keys.Down)
            {
                ComboBoxArrowKeys = true;
            }
            else
            {
                ComboBoxArrowKeys = false;
            }

            // If they hit the arrow keys when the combo is dropped down (just in the combo it won't throw this)
            if (lstBPList.Visible == false)
            {
                // If they select enter, then load the BP
                if (e.KeyValue == (int)Keys.Enter)
                {
                    LoadBPFromCombo();
                }
            }
            else
            {
                // They have the list down, so process up and down keys to work with selecting in the list
                e.Handled = true; // Don't process up and down in the combo when the list shown
                switch (e.KeyCode)
                {
                    case Keys.Down:
                        {
                            if (lstBPList.SelectedIndex < lstBPList.Items.Count - 1)
                            {
                                lstBPList.SelectedIndex = lstBPList.SelectedIndex + 1;
                            }

                            break;
                        }
                    case Keys.Up:
                        {
                            if (lstBPList.SelectedIndex > 0)
                            {
                                lstBPList.SelectedIndex = lstBPList.SelectedIndex - 1;
                            }

                            break;
                        }
                    case Keys.Enter:
                        {
                            if (lstBPList.SelectedIndex > -1)
                            {
                                SelectedBPText = lstBPList.SelectedItem.ToString();
                                cmbBPBlueprintSelection.Text = SelectedBPText;
                                lstBPList.Visible = false;
                                BPSelected = true;
                                SelectBlueprint();
                                BPSelected = false;
                            }

                            break;
                        }
                    case Keys.Escape:
                        {
                            lstBPList.Visible = false;
                            break;
                        }
                }
            }

        }

        private void cmbBlueprintSelection_GotFocus(object sender, EventArgs e)
        {
            cmbBPBlueprintSelection.SelectAll();
        }

        // Process up down arrows in bp list
        private void lstBPList_SelectedValueChanged(object sender, EventArgs e)
        {
            if (!(lstBPList.SelectedItem == null))
            {
                cmbBPBlueprintSelection.Text = lstBPList.SelectedItem.ToString();
                cmbBPBlueprintSelection.SelectAll();
            }
        }

        // Loads the item by clicking on the item selected
        private void lstBPList_MouseDown(object sender, MouseEventArgs e)
        {
            if (lstBPList.SelectedItems.Count != 0)
            {
                SelectedBPText = lstBPList.SelectedItem.ToString();
                cmbBPBlueprintSelection.Text = SelectedBPText;
                lstBPList.Visible = false;
                SelectBlueprint();
                cmbBPBlueprintSelection.SelectAll();
                txtBPRuns.Focus();
            }
        }

        private void lstBPList_MouseMove(object sender, MouseEventArgs e)
        {
            int Index = lstBPList.IndexFromPoint(e.X, e.Y);

            lstBPList.SelectedValueChanged -= lstBPList_SelectedValueChanged;
            lstBPList.SelectedIndex = Index;
            lstBPList.SelectedValueChanged += lstBPList_SelectedValueChanged;
        }

        private void lstBPList_LostFocus(object sender, EventArgs e)
        {
            // hide when losing focus
            lstBPList.Hide();
            cmbBPBlueprintSelection.SelectAll();
        }

        // Loads the blueprint combo based on what was selected
        private void LoadBlueprintCombo()
        {
            SQLiteDataReader readerBPs;
            string SQL = "";

            Application.UseWaitCursor = true;
            if (!cmbBPsLoaded)
            {
                // Clear anything that was there
                cmbBPBlueprintSelection.Items.Clear();
                cmbBPBlueprintSelection.BeginUpdate();

                // Core Query ' Get rid of 's in blueprint name for sorting
                if (rbtnBPOwnedBlueprints.Checked | rbtnBPFavoriteBlueprints.Checked)
                {
                    SQL = BuildBPSelectQuery();
                }
                else
                {
                    SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_NAME, REPLACE(LOWER(BLUEPRINT_NAME),'''','') AS X FROM ALL_BLUEPRINTS, INVENTORY_TYPES AS IT, INVENTORY_TYPES AS IT2 ";
                    SQL += "WHERE ALL_BLUEPRINTS.ITEM_ID = IT.typeID AND ALL_BLUEPRINTS.BLUEPRINT_ID = IT2.typeID ";
                    SQL += BuildBPSelectQuery();
                }

                if (string.IsNullOrEmpty(SQL))
                {
                    Application.UseWaitCursor = false;
                    return;
                }

                SQL += " ORDER BY X";

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerBPs = Public_Variables.DBCommand.ExecuteReader();

                while (readerBPs.Read())
                {
                    // Add the data to the array and combo
                    cmbBPBlueprintSelection.Items.Add(Strings.Trim(readerBPs.GetString(0)));
                    Application.DoEvents();
                }

                readerBPs.Close();

                readerBPs = null;
                Public_Variables.DBCommand = null;

                cmbBPBlueprintSelection.EndUpdate();

                cmbBPsLoaded = true;

            }
            Application.UseWaitCursor = false;

        }

        private void GetBPWithName(string bpName)
        {
            // Query: SELECT BLUEPRINT_NAME AS bpName FROM ALL_BLUEPRINTS b, INVENTORY_TYPES t WHERE b.ITEM_ID = t.typeID AND bpName LIKE '%Repair%'
            SQLiteDataReader readerBP;
            string SQL = "";

            cmbBPBlueprintSelection.Text = bpName;
            lstBPList.Items.Clear();

            // Add limiting functions here based on radio buttons
            // Use replace to Get rid of 's in blueprint name for sorting
            if (rbtnBPOwnedBlueprints.Checked | rbtnBPFavoriteBlueprints.Checked)
            {
                SQL = BuildBPSelectQuery();
            }
            else
            {
                SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_NAME, REPLACE(LOWER(BLUEPRINT_NAME),'''','') AS X FROM ALL_BLUEPRINTS, INVENTORY_TYPES AS IT2 ";
                SQL += "WHERE ALL_BLUEPRINTS.ITEM_ID = IT2.typeID ";
                SQL += BuildBPSelectQuery();
                SQL += " AND ALL_BLUEPRINTS.BLUEPRINT_NAME LIKE '%" + Public_Variables.FormatDBString(bpName) + "%'";
                SQL += " ORDER BY X";
            }

            // query = "SELECT BLUEPRINT_NAME AS bpName FROM ALL_BLUEPRINTS b, INVENTORY_TYPES t WHERE b.ITEM_ID = t.typeID AND bpName LIKE '%" & bpName & "%'"

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerBP = Public_Variables.DBCommand.ExecuteReader();
            lstBPList.BeginUpdate();

            while (readerBP.Read())
            {
                lstBPList.Items.Add(readerBP.GetString(0));
                Application.DoEvents();
            }

            readerBP.Close();
            readerBP = null;
            lstBPList.EndUpdate();
            lstBPList.Visible = true;
            Application.UseWaitCursor = false;

        }

        // Builds the query for the select combo
        private string BuildBPSelectQuery()
        {
            string BuildBPSelectQueryRet = default;
            string SQL = "";
            string SQLItemType = "";

            // See what ID we use for character bps
            long CharID = 0L;
            if (SettingsVariables.UserApplicationSettings.LoadBPsbyChar)
            {
                // Use the ID sent
                CharID = Public_Variables.SelectedCharacter.ID;
            }
            else
            {
                CharID = Public_Variables.CommonLoadBPsID;
            }

            // Find what type of blueprint we want
            if (rbtnBPOwnedBlueprints.Checked)
            {
                SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_NAME, REPLACE(LOWER(ALL_BLUEPRINTS.BLUEPRINT_NAME),'''','') AS X FROM ALL_BLUEPRINTS, INVENTORY_TYPES AS IT, INVENTORY_TYPES AS IT2, ";
                SQL += "OWNED_BLUEPRINTS WHERE OWNED <> 0 ";
                SQL += "AND OWNED_BLUEPRINTS.USER_ID IN (" + CharID + "," + Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID + ") ";
                SQL += "AND ALL_BLUEPRINTS.BLUEPRINT_ID = OWNED_BLUEPRINTS.BLUEPRINT_ID ";
                SQL += "AND ALL_BLUEPRINTS.ITEM_ID = IT.typeID AND ALL_BLUEPRINTS.BLUEPRINT_ID = IT2.typeID ";
            }
            else if (rbtnBPFavoriteBlueprints.Checked)
            {
                SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_NAME, REPLACE(LOWER(ALL_BLUEPRINTS.BLUEPRINT_NAME),'''','') AS X, ";
                SQL += "CASE WHEN OWNED_BLUEPRINTS.FAVORITE IS NOT NULL THEN OWNED_BLUEPRINTS.FAVORITE ELSE ";
                SQL += "CASE WHEN ALL_BLUEPRINTS.FAVORITE Is Not NULL THEN ALL_BLUEPRINTS.FAVORITE ELSE 0 END END AS MY_FAVORITE ";
                SQL += "FROM ALL_BLUEPRINTS, INVENTORY_TYPES AS IT, INVENTORY_TYPES AS IT2, ";
                SQL += "OWNED_BLUEPRINTS WHERE OWNED <> 0  ";
                SQL += "And OWNED_BLUEPRINTS.USER_ID IN (" + CharID + "," + Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID + ") ";
                SQL += "And ALL_BLUEPRINTS.BLUEPRINT_ID = OWNED_BLUEPRINTS.BLUEPRINT_ID And MY_FAVORITE = 1 ";
                SQL += "And ALL_BLUEPRINTS.ITEM_ID = IT.typeID And ALL_BLUEPRINTS.BLUEPRINT_ID = IT2.typeID ";
            }
            else
            {
                SQL += Public_Variables.GetBlueprintSQLWhereQuery(rbtnBPAmmoChargeBlueprints.Checked, rbtnBPDroneBlueprints.Checked, rbtnBPModuleBlueprints.Checked, rbtnBPShipBlueprints.Checked, rbtnBPSubsystemBlueprints.Checked, rbtnBPBoosterBlueprints.Checked, rbtnBPComponentBlueprints.Checked, rbtnBPMiscBlueprints.Checked, rbtnBPDeployableBlueprints.Checked, rbtnBPCelestialsBlueprints.Checked, rbtnBPStructureBlueprints.Checked, rbtnBPStructureRigsBlueprints.Checked, rbtnBPStructureModulesBlueprints.Checked, rbtnBPReactionsBlueprints.Checked, rbtnBPRigBlueprints.Checked);
                if (!string.IsNullOrEmpty(SQL))
                {
                    SQL = "AND " + SQL;
                }
            }

            // Item Type Definitions - These are set by me based on existing data
            // 1, 2, 14 are T1, T2, T3
            // 3 is Storyline
            // 15 is Pirate Faction
            // 16 is Navy Faction

            // Check Tech version
            if (chkBPT1.Enabled)
            {
                // Only a Subsystem so T3
                if (chkBPT1.Checked)
                {
                    SQLItemType = SQLItemType + "1,";
                }
            }

            if (chkBPT2.Enabled)
            {
                if (chkBPT2.Checked)
                {
                    SQLItemType = SQLItemType + "2,";
                }
            }

            if (chkBPT3.Enabled)
            {
                if (chkBPT3.Checked)
                {
                    SQLItemType = SQLItemType + "14,";
                }
            }

            if (chkBPStoryline.Enabled)
            {
                if (chkBPStoryline.Checked)
                {
                    SQLItemType = SQLItemType + "3,";
                }
            }

            if (chkBPPirateFaction.Enabled)
            {
                if (chkBPPirateFaction.Checked)
                {
                    SQLItemType = SQLItemType + "15,";
                }
            }

            if (chkBPNavyFaction.Enabled)
            {
                if (chkBPNavyFaction.Checked)
                {
                    SQLItemType = SQLItemType + "16,";
                }
            }

            // Add Item Type
            if (!string.IsNullOrEmpty(SQLItemType))
            {
                SQLItemType = " ALL_BLUEPRINTS.ITEM_TYPE IN (" + SQLItemType.Substring(0, SQLItemType.Length - 1) + ") ";
            }
            else
            {
                // They need to have at least one. If not, just return nothing
                BuildBPSelectQueryRet = "";
                return BuildBPSelectQueryRet;
            }

            // Add the item types
            SQL += " AND " + SQLItemType;

            string SizesClause = "";

            // Finally add the sizes
            if (chkBPSmall.Checked) // Light
            {
                SizesClause = SizesClause + "'S',";
            }

            if (chkBPMedium.Checked) // Medium
            {
                SizesClause = SizesClause + "'M',";
            }

            if (chkBPLarge.Checked) // Heavy
            {
                SizesClause = SizesClause + "'L',";
            }

            if (chkBPXL.Checked) // Fighters
            {
                SizesClause = SizesClause + "'XL',";
            }

            if (!string.IsNullOrEmpty(SizesClause))
            {
                SizesClause = " AND SIZE_GROUP IN (" + SizesClause.Substring(0, Strings.Len(SizesClause) - 1) + ") ";
            }

            string NPCBPOsClause = "";

            if (chkBPNPCBPOs.Checked & chkBPNPCBPOs.Enabled)
            {
                NPCBPOsClause = " AND IT2.marketGroupID IS NOT NULL AND ITEM_TYPE = 1 "; // only include T1 BPOs
            }

            SQL += SizesClause + NPCBPOsClause;

            // ' Ignore flag
            // If chkBPIncludeIgnoredBPs.Checked = False Then
            // SQL &= " AND IGNORE = 0 "
            // End If

            return SQL;

        }

        // Loads a blueprint if selected in the combo box by different methods
        private void LoadBPFromCombo()
        {

            if (!(cmbBPBlueprintSelection.SelectedItem == null))
            {
                SelectedBPText = cmbBPBlueprintSelection.SelectedItem.ToString();
                cmbBPBlueprintSelection.Text = SelectedBPText;

                SelectBlueprint();

                ComboMenuDown = false;
                MouseWheelSelection = false;
                ComboBoxArrowKeys = false;
                BPComboKeyDown = false;
            }

        }

        // Reloads the BP combo when run
        private void ResetBlueprintCombo(bool T1, bool T2, bool T3, bool Storyline, bool NavyFaction, bool PirateFaction)
        {
            cmbBPsLoaded = false;
            chkBPT1.Enabled = T1;
            chkBPT2.Enabled = T2;
            chkBPT3.Enabled = T3;
            chkBPNavyFaction.Enabled = NavyFaction;
            chkBPPirateFaction.Enabled = PirateFaction;
            chkBPStoryline.Enabled = Storyline;

            ComboMenuDown = false;
            MouseWheelSelection = false;
            ComboBoxArrowKeys = false;
            BPComboKeyDown = false;

            // Make sure we have something checked
            EnsureBPTechCheck();
            // Load the New data
            LoadBlueprintCombo();

            cmbBPBlueprintSelection.Text = "Select Blueprint";
            cmbBPBlueprintSelection.Focus();

        }

        private void UpdateSelectedBPText(string bpName)
        {
            if (bpName.Contains("Blueprint") | bpName.Contains("Reaction Formula"))
            {
                cmbBPBlueprintSelection.TextChanged -= cmbBPBlueprintSelection_TextChanged;
                cmbBPBlueprintSelection.Text = bpName;
                SelectedBPText = bpName;
                cmbBPBlueprintSelection.TextChanged += cmbBPBlueprintSelection_TextChanged;
                SelectBlueprint();
            }

        }

        private void btnBPListView_Click(object sender, EventArgs e)
        {
            var frmBPList = new frmBlueprintList();
            frmBPList.BPSelected += UpdateSelectedBPText;
            frmBPList.Show();

        }

        #endregion

        // Initializes all the boxes on the BP tab
        private void InitBPTab(bool ResetBPHistory = true)
        {

            pictBP.Image = null;
            pictBP.BackgroundImage = null;
            pictBP.Update();

            cmbBPBlueprintSelection.Text = "Select Blueprint";

            {
                ref var withBlock = ref SettingsVariables.UserBPTabSettings;
                // Exort type (might change with build buy selection
                switch (withBlock.ExporttoShoppingListType ?? "")
                {
                    case var @case when @case == (rbtnBPComponentCopy.Text ?? ""):
                        {
                            rbtnBPComponentCopy.Checked = true;
                            break;
                        }
                    case var case1 when case1 == (rbtnBPCopyInvREMats.Text ?? ""):
                        {
                            rbtnBPCopyInvREMats.Checked = true;
                            break;
                        }
                    case var case2 when case2 == (rbtnBPRawmatCopy.Text ?? ""):
                        {
                            rbtnBPRawmatCopy.Checked = true;
                            break;
                        }
                }

                // Default build/buy
                chkBPBuildBuy.Checked = SettingsVariables.UserApplicationSettings.CheckBuildBuy;

                cmbBPsLoaded = false;
                InventionDecryptorsLoaded = false;

                // Set BP Lines to run production on
                txtBPNumBPs.Text = "1";

                // Set the runs to 1
                txtBPRuns.Text = "1";

                // Production time label
                lblBPProductionTime.Text = "00:00:00";
                lblBPTotalItemPT.Text = "00:00:00";

                // SVR
                lblBPBPSVR.Text = "-";
                lblBPRawSVR.Text = "-";

                // Cost labels
                lblBPRawMatCost.Text = "0.00";
                lblBPComponentMatCost.Text = "0.00";
                txtBPAddlCosts.Text = "0.00";

                // Total
                lblBPRawTotalCost.Text = "0.00";
                lblBPTotalCompCost.Text = "0.00";

                lblBPRawIPH.Text = "0.00";
                lblBPRawIPH.ForeColor = Color.Black;
                lblBPCompIPH.Text = "0.00";
                lblBPCompIPH.ForeColor = Color.Black;

                lblBPCompProfit.Text = "0.00";
                lblBPCompProfit.ForeColor = Color.Black;
                lblBPRawProfit.Text = "0.00";
                lblBPRawProfit.ForeColor = Color.Black;

                lblBPMarketCost.Text = "0.00";

                // Don't show labels to make
                lblBPCanMakeBP.Visible = false;
                lblBPCanMakeBPAll.Visible = false;

                // Saved settings
                chkBPT1.Checked = withBlock.Tech1Check;
                chkBPT2.Checked = withBlock.Tech2Check;
                chkBPT3.Checked = withBlock.Tech3Check;
                chkBPNavyFaction.Checked = withBlock.TechFactionCheck;
                chkBPStoryline.Checked = withBlock.TechStorylineCheck;
                chkBPPirateFaction.Checked = withBlock.TechPirateCheck;

                chkBPSimpleCopy.Checked = withBlock.SimpleCopyCheck;
                chkBPNPCBPOs.Checked = withBlock.NPCBPOs;
                chkBPSellExcessItems.Checked = withBlock.SellExcessBuildItems;

                chkBPSmall.Checked = withBlock.SmallCheck;
                chkBPMedium.Checked = withBlock.MediumCheck;
                chkBPLarge.Checked = withBlock.LargeCheck;
                chkBPXL.Checked = withBlock.XLCheck;

                switch (withBlock.BlueprintTypeSelection ?? "")
                {
                    case var case3 when case3 == (rbtnBPAllBlueprints.Text ?? ""):
                        {
                            rbtnBPAllBlueprints.Checked = true;
                            break;
                        }
                    case var case4 when case4 == (rbtnBPOwnedBlueprints.Text ?? ""):
                        {
                            rbtnBPOwnedBlueprints.Checked = true;
                            break;
                        }
                    case var case5 when case5 == (rbtnBPFavoriteBlueprints.Text ?? ""):
                        {
                            rbtnBPFavoriteBlueprints.Checked = true;
                            break;
                        }
                    case var case6 when case6 == (rbtnBPShipBlueprints.Text ?? ""):
                        {
                            rbtnBPShipBlueprints.Checked = true;
                            break;
                        }
                    case var case7 when case7 == (rbtnBPDroneBlueprints.Text ?? ""):
                        {
                            rbtnBPDroneBlueprints.Checked = true;
                            break;
                        }
                    case var case8 when case8 == (rbtnBPAmmoChargeBlueprints.Text ?? ""):
                        {
                            rbtnBPAmmoChargeBlueprints.Checked = true;
                            break;
                        }
                    case var case9 when case9 == (rbtnBPModuleBlueprints.Text ?? ""):
                        {
                            rbtnBPModuleBlueprints.Checked = true;
                            break;
                        }
                    case var case10 when case10 == (rbtnBPComponentBlueprints.Text ?? ""):
                        {
                            rbtnBPComponentBlueprints.Checked = true;
                            break;
                        }
                    case var case11 when case11 == (rbtnBPStructureBlueprints.Text ?? ""):
                        {
                            rbtnBPStructureBlueprints.Checked = true;
                            break;
                        }
                    case var case12 when case12 == (rbtnBPSubsystemBlueprints.Text ?? ""):
                        {
                            rbtnBPSubsystemBlueprints.Checked = true;
                            break;
                        }
                    case var case13 when case13 == (rbtnBPRigBlueprints.Text ?? ""):
                        {
                            rbtnBPRigBlueprints.Checked = true;
                            break;
                        }
                    case var case14 when case14 == (rbtnBPBoosterBlueprints.Text ?? ""):
                        {
                            rbtnBPBoosterBlueprints.Checked = true;
                            break;
                        }
                    case var case15 when case15 == (rbtnBPMiscBlueprints.Text ?? ""):
                        {
                            rbtnBPMiscBlueprints.Checked = true;
                            break;
                        }
                    case var case16 when case16 == (rbtnBPDeployableBlueprints.Text ?? ""):
                        {
                            rbtnBPDeployableBlueprints.Checked = true;
                            break;
                        }
                    case var case17 when case17 == (rbtnBPCelestialsBlueprints.Text ?? ""):
                        {
                            rbtnBPCelestialsBlueprints.Checked = true;
                            break;
                        }
                    case var case18 when case18 == (rbtnBPStructureRigsBlueprints.Text ?? ""):
                        {
                            rbtnBPStructureRigsBlueprints.Checked = true;
                            break;
                        }
                    case var case19 when case19 == (rbtnBPReactionsBlueprints.Text ?? ""):
                        {
                            rbtnBPReactionsBlueprints.Checked = true;
                            break;
                        }
                }

                Public_Variables.SetTaxFeeChecks = false;
                chkBPTaxes.Checked = withBlock.IncludeTaxes;
                txtBPBrokerFeeRate.Visible = false;

                switch (withBlock.IncludeFees)
                {
                    case 2:
                        {
                            chkBPBrokerFees.CheckState = CheckState.Indeterminate;
                            txtBPBrokerFeeRate.Visible = true;
                            break;
                        }
                    case 1:
                        {
                            chkBPBrokerFees.CheckState = CheckState.Checked;
                            break;
                        }
                    case 0:
                        {
                            chkBPBrokerFees.CheckState = CheckState.Unchecked;
                            break;
                        }
                }

                txtBPBrokerFeeRate.Text = Strings.FormatPercent(withBlock.BrokerFeeRate, 1);

                Public_Variables.SetTaxFeeChecks = true;

                chkBPPricePerUnit.Checked = withBlock.PricePerUnit;

                BPRawColumnClicked = withBlock.RawColumnSort;
                BPCompColumnClicked = withBlock.CompColumnSort;

                if (withBlock.RawColumnSortType == "Ascending")
                {
                    BPRawColumnSortType = SortOrder.Ascending;
                }
                else
                {
                    BPRawColumnSortType = SortOrder.Descending;
                }

                if (withBlock.CompColumnSortType == "Ascending")
                {
                    BPCompColumnSortType = SortOrder.Ascending;
                }
                else
                {
                    BPCompColumnSortType = SortOrder.Descending;
                }

                // Invention checks
                UpdatingInventionChecks = true;
                chkBPIncludeInventionCosts.Checked = withBlock.IncludeInventionCost;
                chkBPIncludeInventionTime.Checked = withBlock.IncludeInventionTime;
                chkBPIncludeCopyCosts.Checked = withBlock.IncludeCopyCost;
                chkBPIncludeCopyTime.Checked = withBlock.IncludeCopyTime;
                chkBPIncludeT3Costs.Checked = withBlock.IncludeT3Cost;
                chkBPIncludeT3Time.Checked = withBlock.IncludeT3Time;
                UpdatingInventionChecks = false;

                // These facilities use the same include checks
                BPTabFacility.GetFacility(ProductionType.Invention).IncludeActivityCost = withBlock.IncludeInventionCost;
                BPTabFacility.GetFacility(ProductionType.Invention).IncludeActivityTime = withBlock.IncludeInventionTime;
                BPTabFacility.GetFacility(ProductionType.Copying).IncludeActivityCost = withBlock.IncludeCopyCost;
                BPTabFacility.GetFacility(ProductionType.Copying).IncludeActivityTime = withBlock.IncludeCopyTime;

                BPTabFacility.GetFacility(ProductionType.SubsystemManufacturing).IncludeActivityCost = withBlock.IncludeT3Cost;
                BPTabFacility.GetFacility(ProductionType.SubsystemManufacturing).IncludeActivityTime = withBlock.IncludeT3Time;
                BPTabFacility.GetFacility(ProductionType.T3CruiserManufacturing).IncludeActivityCost = withBlock.IncludeT3Cost;
                BPTabFacility.GetFacility(ProductionType.T3CruiserManufacturing).IncludeActivityTime = withBlock.IncludeT3Time;
                BPTabFacility.GetFacility(ProductionType.T3Invention).IncludeActivityCost = withBlock.IncludeT3Cost;
                BPTabFacility.GetFacility(ProductionType.T3Invention).IncludeActivityTime = withBlock.IncludeT3Time;

                // Enter the max lines we have regardless
                txtBPLines.Text = withBlock.ProductionLines.ToString();
                // Set Max Invention Lines
                txtBPInventionLines.Text = withBlock.LaboratoryLines.ToString();
                txtBPRelicLines.Text = withBlock.T3Lines.ToString();

                // Ignore settings
                chkBPIgnoreInvention.Checked = withBlock.IgnoreInvention;
                chkBPIgnoreMinerals.Checked = withBlock.IgnoreMinerals;
                chkBPIgnoreT1Item.Checked = withBlock.IgnoreT1Item;

                // T2/T3 Material types
                lblBPT2MatTypeSelector.Enabled = false;
                rbtnBPAdvT2MatType.Enabled = false;
                rbtnBPProcT2MatType.Enabled = false;
                rbtnBPRawT2MatType.Enabled = false;

                switch (withBlock.BuildT2T3Materials)
                {
                    case BuildMatType.AdvMaterials:
                        {
                            rbtnBPAdvT2MatType.Checked = true;
                            break;
                        }
                    case BuildMatType.ProcessedMaterials:
                        {
                            rbtnBPProcT2MatType.Checked = true;
                            break;
                        }
                    case BuildMatType.RawMaterials:
                        {
                            rbtnBPRawT2MatType.Checked = true;
                            break;
                        }
                }

                // Profit labels
                if (withBlock.RawProfitType == "Percent")
                {
                    lblBPRawProfit1.Text = "Raw Profit Percent:";
                }
                else
                {
                    lblBPRawProfit1.Text = "Raw Profit:";
                }

                if (withBlock.CompProfitType == "Percent")
                {
                    lblBPCompProfit1.Text = "Component Profit Percent:";
                }
                else
                {
                    lblBPCompProfit1.Text = "Component Profit:";
                }

            }

            // Only show the facility and options tab first
            tabBPInventionEquip.TabPages.Remove(tabInventionCalcs);
            tabBPInventionEquip.TabPages.Remove(tabT3Calcs);
            tabBPInventionEquip.SelectTab(0);
            tabBPInventionEquip.Enabled = false;

            // Disable all entry areas until a blueprint is selected
            btnBPRefreshBP.Enabled = false;
            btnBPCopyMatstoClip.Enabled = false;
            btnBPAddBPMatstoShoppingList.Enabled = false;
            chkBPSimpleCopy.Enabled = false;
            txtBPME.Enabled = false;
            txtBPTE.Enabled = false;
            txtBPRuns.Enabled = false;
            txtBPNumBPs.Enabled = false;
            txtBPLines.Enabled = false;
            chkBPPricePerUnit.Enabled = false;
            txtBPAddlCosts.Enabled = false;
            chkBPBuildBuy.Enabled = false;
            chkBPTaxes.Enabled = false;
            chkBPBrokerFees.Enabled = false;
            txtBPBrokerFeeRate.Enabled = false;
            gbBPManualSystemCostIndex.Enabled = false;
            gbBPIgnoreinCalcs.Enabled = false;
            gbBPSellExcess.Enabled = false;

            // Copy Labels
            rbtnBPComponentCopy.Enabled = false;
            rbtnBPRawmatCopy.Enabled = false;
            rbtnBPCopyInvREMats.Enabled = false;

            // Color Labels
            lblBPBuyColor.Visible = false;
            lblBPBuildColor.Visible = false;

            // BP Combo selection booleans
            ComboMenuDown = false;
            MouseWheelSelection = false;
            ComboBoxArrowKeys = false;
            BPComboKeyDown = false;

            // Clear grids
            lstBPComponentMats.Items.Clear();
            lstBPBuiltComponents.Items.Clear();
            lstBPRawMats.Items.Clear();

            ResetBPTab = true;
            EnterKeyPressed = false;

            LoadingBPfromHistory = false;
            PreviousBPfromHistory = false;

            // Load the combo
            LoadBlueprintCombo();

            // BP History
            if (ResetBPHistory)
            {
                BPHistory = new List<BPHistoryItem>();
                CurrentBPHistoryIndex = -1; // Nothing added yet
                btnBPBack.Enabled = false;
                btnBPForward.Enabled = false;
            }
            else
            {
                LoadBPfromHistory(ref CurrentBPHistoryIndex, "");
            }

        }

        // Saves the settings on the form for default later
        private void btnBPSaveSettings_Click(object sender, EventArgs e)
        {
            BPTabSettings TempSettings = default;
            var Settings = new ProgramSettings();

            if (!string.IsNullOrEmpty(Strings.Trim(txtBPLines.Text)))
            {
                if (!Information.IsNumeric(txtBPLines.Text))
                {
                    Interaction.MsgBox("Invalid BP Lines value", Constants.vbExclamation, Application.ProductName);
                    txtBPLines.Focus();
                    return;
                }
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtBPInventionLines.Text)))
            {
                if (!Information.IsNumeric(txtBPInventionLines.Text))
                {
                    Interaction.MsgBox("Invalid Invention Lines value", Constants.vbExclamation, Application.ProductName);
                    txtBPInventionLines.Focus();
                    return;
                }
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtBPRelicLines.Text)))
            {
                if (!Information.IsNumeric(txtBPRelicLines.Text))
                {
                    Interaction.MsgBox("Invalid T3 Invention Lines value", Constants.vbExclamation, Application.ProductName);
                    txtBPRelicLines.Focus();
                    return;
                }
            }

            // Prod/Lab Lines
            TempSettings.ProductionLines = Conversions.ToInteger(txtBPLines.Text);
            TempSettings.LaboratoryLines = Conversions.ToInteger(txtBPInventionLines.Text);
            TempSettings.T3Lines = Conversions.ToInteger(txtBPRelicLines.Text);

            if (rbtnBPAllBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPAllBlueprints.Text;
            }
            else if (rbtnBPOwnedBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPOwnedBlueprints.Text;
            }
            else if (rbtnBPFavoriteBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPFavoriteBlueprints.Text;
            }
            else if (rbtnBPShipBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPShipBlueprints.Text;
            }
            else if (rbtnBPDroneBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPDroneBlueprints.Text;
            }
            else if (rbtnBPAmmoChargeBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPAmmoChargeBlueprints.Text;
            }
            else if (rbtnBPModuleBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPModuleBlueprints.Text;
            }
            else if (rbtnBPComponentBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPComponentBlueprints.Text;
            }
            else if (rbtnBPStructureBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPStructureBlueprints.Text;
            }
            else if (rbtnBPSubsystemBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPSubsystemBlueprints.Text;
            }
            else if (rbtnBPRigBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPRigBlueprints.Text;
            }
            else if (rbtnBPBoosterBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPBoosterBlueprints.Text;
            }
            else if (rbtnBPMiscBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPMiscBlueprints.Text;
            }
            else if (rbtnBPCelestialsBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPCelestialsBlueprints.Text;
            }
            else if (rbtnBPDeployableBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPDeployableBlueprints.Text;
            }
            else if (rbtnBPStructureRigsBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPStructureRigsBlueprints.Text;
            }
            else if (rbtnBPReactionsBlueprints.Checked)
            {
                TempSettings.BlueprintTypeSelection = rbtnBPReactionsBlueprints.Text;
            }

            if (rbtnBPComponentCopy.Checked)
            {
                TempSettings.ExporttoShoppingListType = rbtnBPComponentCopy.Text;
            }
            else if (rbtnBPRawmatCopy.Checked)
            {
                TempSettings.ExporttoShoppingListType = rbtnBPRawmatCopy.Text;
            }
            else if (rbtnBPCopyInvREMats.Checked)
            {
                TempSettings.ExporttoShoppingListType = rbtnBPCopyInvREMats.Text;
            }

            TempSettings.Tech1Check = chkBPT1.Checked;
            TempSettings.Tech2Check = chkBPT2.Checked;
            TempSettings.Tech3Check = chkBPT3.Checked;
            TempSettings.TechStorylineCheck = chkBPStoryline.Checked;
            TempSettings.TechFactionCheck = chkBPNavyFaction.Checked;
            TempSettings.TechPirateCheck = chkBPPirateFaction.Checked;

            // .IncludeIgnoredBPs = chkBPIncludeIgnoredBPs.Checked
            TempSettings.SimpleCopyCheck = chkBPSimpleCopy.Checked;
            TempSettings.NPCBPOs = chkBPNPCBPOs.Checked;
            TempSettings.SellExcessBuildItems = chkBPSellExcessItems.Checked;

            TempSettings.SmallCheck = chkBPSmall.Checked;
            TempSettings.MediumCheck = chkBPMedium.Checked;
            TempSettings.LargeCheck = chkBPLarge.Checked;
            TempSettings.XLCheck = chkBPXL.Checked;

            // .IncludeUsage = chkBPFacilityIncludeUsage.Checked
            TempSettings.IncludeTaxes = chkBPTaxes.Checked;
            if (chkBPBrokerFees.CheckState == CheckState.Indeterminate)
            {
                TempSettings.IncludeFees = 2;
            }
            else if (chkBPBrokerFees.CheckState == CheckState.Checked)
            {
                TempSettings.IncludeFees = 1;
            }
            else
            {
                TempSettings.IncludeFees = 0;
            }
            TempSettings.BrokerFeeRate = Public_Variables.FormatManualPercentEntry(txtBPBrokerFeeRate.Text);

            TempSettings.IncludeInventionCost = chkBPIncludeInventionCosts.Checked;
            TempSettings.IncludeInventionTime = chkBPIncludeInventionTime.Checked;
            BPTabFacility.GetFacility(ProductionType.Invention).IncludeActivityCost = chkBPIncludeInventionCosts.Checked;
            BPTabFacility.GetFacility(ProductionType.Invention).IncludeActivityTime = chkBPIncludeInventionTime.Checked;

            TempSettings.IncludeCopyCost = chkBPIncludeCopyCosts.Checked;
            TempSettings.IncludeCopyTime = chkBPIncludeCopyTime.Checked;
            BPTabFacility.GetFacility(ProductionType.Copying).IncludeActivityCost = chkBPIncludeCopyCosts.Checked;
            BPTabFacility.GetFacility(ProductionType.Copying).IncludeActivityTime = chkBPIncludeCopyTime.Checked;

            // For T3 on the BP tab, save both facility data
            TempSettings.IncludeT3Cost = chkBPIncludeT3Costs.Checked;
            TempSettings.IncludeT3Time = chkBPIncludeT3Time.Checked;

            // Ignore settings
            TempSettings.IgnoreInvention = chkBPIgnoreInvention.Checked;
            TempSettings.IgnoreMinerals = chkBPIgnoreMinerals.Checked;
            TempSettings.IgnoreT1Item = chkBPIgnoreT1Item.Checked;

            BPTabFacility.GetFacility(ProductionType.SubsystemManufacturing).IncludeActivityCost = chkBPIncludeT3Costs.Checked;
            BPTabFacility.GetFacility(ProductionType.SubsystemManufacturing).IncludeActivityTime = chkBPIncludeT3Time.Checked;
            BPTabFacility.GetFacility(ProductionType.T3CruiserManufacturing).IncludeActivityCost = chkBPIncludeT3Costs.Checked;
            BPTabFacility.GetFacility(ProductionType.T3CruiserManufacturing).IncludeActivityTime = chkBPIncludeT3Time.Checked;
            BPTabFacility.GetFacility(ProductionType.T3Invention).IncludeActivityCost = chkBPIncludeT3Costs.Checked;
            BPTabFacility.GetFacility(ProductionType.T3Invention).IncludeActivityTime = chkBPIncludeT3Time.Checked;

            TempSettings.PricePerUnit = chkBPPricePerUnit.Checked;

            TempSettings.CompColumnSort = BPCompColumnClicked;
            TempSettings.RawColumnSort = BPRawColumnClicked;

            if (BPCompColumnSortType == SortOrder.Ascending)
            {
                TempSettings.CompColumnSortType = "Ascending";
            }
            else
            {
                TempSettings.CompColumnSortType = "Descending";
            }

            if (BPRawColumnSortType == SortOrder.Ascending)
            {
                TempSettings.RawColumnSortType = "Ascending";
            }
            else
            {
                TempSettings.RawColumnSortType = "Descending";
            }

            // Save the relic and decryptor if they have the setting set
            if (SettingsVariables.UserApplicationSettings.SaveBPRelicsDecryptors & !(Public_Variables.SelectedBlueprint == null))
            {
                // See if the T2 window is open and has a decryptor then save, only will be open if they have a t2 bp loaded
                if (Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2)
                {
                    TempSettings.T2DecryptorType = cmbBPInventionDecryptor.Text;
                    TempSettings.RelicType = SettingsVariables.UserBPTabSettings.RelicType;
                    TempSettings.T3DecryptorType = SettingsVariables.UserBPTabSettings.T3DecryptorType; // Save the old one
                }

                // See if the T3 window is open and has a decryptor then save, only will be open if they have a t3 bp loaded
                if (Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3)
                {
                    TempSettings.T2DecryptorType = SettingsVariables.UserBPTabSettings.T2DecryptorType; // Save the old one
                    TempSettings.RelicType = cmbBPRelic.Text;
                    TempSettings.T3DecryptorType = cmbBPT3Decryptor.Text;
                }
            }

            // Profit type
            if (lblBPRawProfit1.Text.Contains("Percent"))
            {
                TempSettings.RawProfitType = "Percent";
            }
            else
            {
                TempSettings.RawProfitType = "Profit";
            }

            if (lblBPCompProfit1.Text.Contains("Percent"))
            {
                TempSettings.CompProfitType = "Percent";
            }
            else
            {
                TempSettings.CompProfitType = "Profit";
            }

            // How they want to build T2/T3 items
            if (rbtnBPAdvT2MatType.Checked)
            {
                TempSettings.BuildT2T3Materials = BuildMatType.AdvMaterials;
            }
            else if (rbtnBPProcT2MatType.Checked)
            {
                TempSettings.BuildT2T3Materials = BuildMatType.ProcessedMaterials;
            }
            else if (rbtnBPRawT2MatType.Checked)
            {
                TempSettings.BuildT2T3Materials = BuildMatType.RawMaterials;

            }

            // Save these here too
            SettingsVariables.UserApplicationSettings.CheckBuildBuy = chkBPBuildBuy.Checked;
            Settings.SaveApplicationSettings(SettingsVariables.UserApplicationSettings);

            // Save the data in the XML file
            Settings.SaveBPSettings(TempSettings);

            // Save the data to the local variable
            SettingsVariables.UserBPTabSettings = TempSettings;

            Interaction.MsgBox("Settings Saved", Constants.vbInformation, Application.ProductName);

            cmbBPBlueprintSelection.Focus();

        }

        // Saves the BP data
        private void btnBPSaveBP_Click(object sender, EventArgs e)
        {
            double AdditionalCost;
            Public_Variables.BPType SaveBPType;

            if (Public_Variables.SelectedBlueprint == null)
            {
                return;
            }

            // Check additional costs for saving with this bp
            if (Information.IsNumeric(txtBPAddlCosts.Text))
            {
                AdditionalCost = Conversions.ToDouble(txtBPAddlCosts.Text);
            }
            else
            {
                AdditionalCost = 0d;
            }

            // Save the BP
            bool localCorrectMETE() { var argMETextBox2 = txtBPME; var argTETextBox2 = txtBPTE; var ret = CorrectMETE(txtBPME.Text, txtBPTE.Text, ref argMETextBox2, ref argTETextBox2); txtBPME = argMETextBox2; txtBPTE = argTETextBox2; return ret; }

            if (localCorrectMETE())
            {
                if (Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 & chkBPIgnoreInvention.Checked == true)
                {
                    // T2 BPO 
                    SaveBPType = Public_Variables.BPType.Original;
                }
                else if (Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 | Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3)
                {
                    // Save T2/T3 an invented BPC, since if they aren't ignoring invention they have to use a decryptor or invention to get it
                    SaveBPType = Public_Variables.BPType.InventedBPC;
                }
                else // Everything else is a copy
                {
                    SaveBPType = Public_Variables.BPType.Copy;
                }

                Public_Variables.UpdateBPinDB(Public_Variables.SelectedBlueprint.GetTypeID(), Conversions.ToInteger(txtBPME.Text), Conversions.ToInteger(txtBPTE.Text), SaveBPType, Conversions.ToInteger(txtBPME.Text), Conversions.ToInteger(txtBPTE.Text), false, false, AdditionalCost);

                RefreshBP();

            }

            Interaction.MsgBox("BP Saved", Constants.vbInformation, Application.ProductName);

        }

        // Selects the blueprint from the combo and loads it into the grids
        private void SelectBlueprint(bool NewBP = true, Public_Variables.SentFromLocation SentFrom = 0, bool FromEvent = false)
        {
            string SQL;
            SQLiteDataReader readerBP;
            int BPID;
            int TempTech;
            int ItemType;
            int ItemGroupID;
            int ItemCategoryID;
            string BPGroup;
            bool Reaction = false;

            // Set the number of runs to 1 if it's blank
            if (string.IsNullOrEmpty(Strings.Trim(txtBPRuns.Text)))
            {
                txtBPRuns.Text = "1";
            }

            // Check the quantity
            if (!Information.IsNumeric(txtBPRuns.Text))
            {
                Interaction.MsgBox("You must enter a valid number of runs", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPRuns.Focus();
                return;
            }

            // Check the num bps
            if (!Information.IsNumeric(txtBPNumBPs.Text) | string.IsNullOrEmpty(Strings.Trim(txtBPNumBPs.Text)))
            {
                Interaction.MsgBox("You must enter a valid number of BPs", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPNumBPs.Focus();
                return;
            }

            // Additional costs
            if (!Information.IsNumeric(txtBPAddlCosts.Text) | string.IsNullOrEmpty(Strings.Trim(txtBPAddlCosts.Text)))
            {
                Interaction.MsgBox("You must enter a valid additional cost value", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPAddlCosts.Focus();
                return;
            }

            txtBPME.Enabled = true;
            txtBPTE.Enabled = true;
            // txtBPME.Text = "0"
            // txtBPTE.Text = "0"

            SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_ID, TECH_LEVEL, ITEM_TYPE, ITEM_GROUP_ID, ITEM_CATEGORY_ID, BLUEPRINT_GROUP ";
            SQL += "FROM ALL_BLUEPRINTS ";
            SQL += "WHERE ALL_BLUEPRINTS.BLUEPRINT_NAME = ";

            if (string.IsNullOrEmpty(SelectedBPText))
            {
                SelectedBPText = cmbBPBlueprintSelection.Text;
            }

            SQL += "'" + Public_Variables.FormatDBString(SelectedBPText) + "'";

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerBP = Public_Variables.DBCommand.ExecuteReader();

            if (readerBP.Read())
            {
                BPID = readerBP.GetInt32(0);
                TempTech = readerBP.GetInt32(1);
                ItemType = readerBP.GetInt32(2);
                ItemGroupID = readerBP.GetInt32(3);
                ItemCategoryID = readerBP.GetInt32(4);
                BPGroup = readerBP.GetString(5);
            }
            else
            {
                return;
            }

            readerBP.Close();

            // Load the facilty based on the groupid and categoryid
            BPTabFacility.LoadFacility(BPID, ItemGroupID, ItemCategoryID, TempTech, false, false, false, SettingsVariables.UserBPTabSettings.BuildT2T3Materials);

            // Load the image
            LoadBlueprintPicture(BPID, ItemType);

            // Set for max production lines 
            if (SentFrom == Public_Variables.SentFromLocation.None) // We might have different values there and they set on double click
            {
                // Reset the entry boxes
                txtBPRuns.Text = "1";
                txtBPNumBPs.Text = "1";

                txtBPLines.Text = SettingsVariables.UserBPTabSettings.ProductionLines.ToString();
                txtBPInventionLines.Text = SettingsVariables.UserBPTabSettings.LaboratoryLines.ToString();
                txtBPRelicLines.Text = SettingsVariables.UserBPTabSettings.T3Lines.ToString();

                ResetDecryptorCombos(TempTech);
            }

            else if (SentFrom != Public_Variables.SentFromLocation.None)  // Sent from manufacturing tab, bp tab, history, or shopping list
            {
                // Set up for Reloading the decryptor combo on T2/T3
                // Allow reloading of Decryptors
                InventionDecryptorsLoaded = false;
                T3DecryptorsLoaded = false;
                if (!chkBPIgnoreInvention.Checked)
                {
                    if (TempTech == 2)
                    {
                        cmbBPInventionDecryptor.Text = SelectedDecryptor.Name;
                    }
                    else
                    {
                        cmbBPT3Decryptor.Text = SelectedDecryptor.Name;
                    }
                }
                // Allow loading decryptors on drop down
                LoadingInventionDecryptors = false;
                LoadingT3Decryptors = false;
                // Allow reloading of relics
                RelicsLoaded = false;
            }

            Reaction = Public_Variables.IsReaction(ItemGroupID);

            // If the previous bp was loaded from history and the current bp isn't loaded from history or event, then reset the facilities to default
            if (PreviousBPfromHistory & SentFrom != Public_Variables.SentFromLocation.History & !FromEvent)
            {
                PreviousBPfromHistory = false;
                if (Reaction)
                {
                    BPTabFacility.SetSelectedFacility(BPTabFacility.GetProductionType(ItemGroupID, ItemCategoryID, ManufacturingFacility.ActivityReactions), ProgramLocation.BlueprintTab, false);
                }
                else
                {
                    BPTabFacility.SetSelectedFacility(BPTabFacility.GetProductionType(ItemGroupID, ItemCategoryID, ManufacturingFacility.ActivityManufacturing), ProgramLocation.BlueprintTab, false);
                }
                BPTabFacility.SetSelectedFacility(ProductionType.ComponentManufacturing, ProgramLocation.BlueprintTab, false);
                BPTabFacility.SetSelectedFacility(ProductionType.CapitalComponentManufacturing, ProgramLocation.BlueprintTab, false);
            }

            // Set the invention info
            SetOwnedBPData(BPID, TempTech, NewBP, SentFrom, Reaction);

            // If they want to drill down on reactions, check all types
            if (Public_Variables.BPHasProcRawMats(BPID, BuildMatType.RawMaterials) | Reaction)
            {
                // Also enable the T2/T3 boxes for moon/gas mat types
                lblBPT2MatTypeSelector.Enabled = true;
                rbtnBPAdvT2MatType.Enabled = true;
                if (TempTech == 3)
                {
                    rbtnBPProcT2MatType.Enabled = false; // No intermediate gas materials
                }
                else
                {
                    rbtnBPProcT2MatType.Enabled = true;
                }
                rbtnBPRawT2MatType.Enabled = true;
            }
            else
            {
                // Disable the T2/T3 boxes for moon/gas mat types
                lblBPT2MatTypeSelector.Enabled = false;
                rbtnBPAdvT2MatType.Enabled = false;
                rbtnBPProcT2MatType.Enabled = false;
                rbtnBPRawT2MatType.Enabled = false;
            }

            // Reactions can't have ME or TE
            if (SelectedBPText.Contains("Reaction Formula"))
            {
                txtBPME.Enabled = false;
                txtBPTE.Enabled = false;
            }

            gbBPManualSystemCostIndex.Enabled = true;
            gbBPIgnoreinCalcs.Enabled = true;
            gbBPSellExcess.Enabled = true;
            btnBPUpdateCostIndex.Enabled = false;

            cmbBPBlueprintSelection.Focus();

            // Make sure everything is enabled on first BP load
            if (ResetBPTab)
            {
                btnBPRefreshBP.Enabled = true;
                btnBPCopyMatstoClip.Enabled = true;
                btnBPAddBPMatstoShoppingList.Enabled = true;
                chkBPSimpleCopy.Enabled = true;
                txtBPRuns.Enabled = true;
                txtBPAddlCosts.Enabled = true;
                chkBPBuildBuy.Enabled = true;
                txtBPNumBPs.Enabled = true;
                txtBPBrokerFeeRate.Enabled = true;
                txtBPLines.Enabled = true;
                chkBPTaxes.Enabled = true;
                chkBPBrokerFees.Enabled = true;
                chkBPPricePerUnit.Enabled = true;

                btnBPBack.Enabled = true;
                btnBPForward.Enabled = true;

                ResetBPTab = false; // Reset
            }

            Application.DoEvents();

            // Update the grid
            UpdateBPGrids(BPID, TempTech, NewBP, ItemGroupID, ItemCategoryID, Public_Variables.SentFromLocation.BlueprintTab);

            // Save the blueprint in the history if it's not already in there
            if (!(Public_Variables.SelectedBlueprint == null) & SentFrom != Public_Variables.SentFromLocation.History)
            {
                UpdateBPHistory(true);
            }

            txtBPRuns.SelectAll();
            txtBPRuns.Focus();
            cmbBPBlueprintSelection.SelectionLength = 0;

        }

        private void SetOwnedBPData(int BlueprintID, int BPTech, bool NewBP, Public_Variables.SentFromLocation SentFrom, bool Reaction, bool FromCheck = false)
        {
            string SQL;
            SQLiteDataReader readerBP;
            bool CheckBPIgnoreInventionValue = false;
            bool Uninventable = false;
            string TempDName = "";
            bool PolarizedItem = false;

            if (cmbBPBlueprintSelection.Text.Contains("Polarized"))
            {
                PolarizedItem = true;
            }

            // Finally set the ME and TE in the display (need to allow the user to choose different BP's and play with ME/TE) - Search user bps first
            SQL = "SELECT ME, TE, ADDITIONAL_COSTS, RUNS, BP_TYPE";
            SQL += " FROM OWNED_BLUEPRINTS WHERE USER_ID =" + Public_Variables.GetBPUserID(Public_Variables.SelectedCharacter.ID);
            SQL += " AND BLUEPRINT_ID = " + BlueprintID + " AND OWNED <> 0 "; // Only load user or api owned bps

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerBP = Public_Variables.DBCommand.ExecuteReader();

            if (NewBP)
            {
                SetInventionEnabled("T" + BPTech.ToString(), true); // First enable then let the ignore invention check override if needed
                if (BPTech == 2 & !FromCheck)
                {
                    CheckBPIgnoreInventionValue = SettingsVariables.UserBPTabSettings.IgnoreInvention;
                }
            }

            bool HasOwnedBP = false;

            if (readerBP.Read())
            {
                HasOwnedBP = true;
            }
            else
            {
                // Try again with corp
                readerBP.Close();
                SQL = "SELECT ME, TE, ADDITIONAL_COSTS, RUNS, BP_TYPE";
                SQL += " FROM OWNED_BLUEPRINTS WHERE USER_ID =" + Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID;
                SQL += " AND BLUEPRINT_ID = " + BlueprintID + " AND SCANNED <> 0 AND OWNED <> 0 ";

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerBP = Public_Variables.DBCommand.ExecuteReader();

                if (readerBP.Read())
                {
                    HasOwnedBP = true;
                }
            }

            int OwnedBPRuns;
            Public_Variables.BPType TempBPType;

            if (HasOwnedBP)
            {
                TempBPType = Public_Variables.GetBPType(readerBP.GetInt32(4));
            }
            else
            {
                TempBPType = Public_Variables.BPType.NotOwned;
            }

            // Load the ME/TE - unless it's the check box selected, then go with base values
            if (HasOwnedBP & !(SentFrom == Public_Variables.SentFromLocation.ManufacturingTab) & !FromCheck)
            {
                // Use owned settings
                OwnedBP = true;
                txtBPME.Text = readerBP.GetInt32(0).ToString();
                OwnedBPME = txtBPME.Text;
                txtBPTE.Text = readerBP.GetInt32(1).ToString();
                OwnedBPPE = txtBPTE.Text;
                txtBPAddlCosts.Text = Strings.FormatNumber(readerBP.GetDouble(2), 2);
                OwnedBPRuns = readerBP.GetInt32(3);
            }
            else // If sent from manufacturing tab, use the values set from there, or set to not owned
            {
                OwnedBP = false;
                OwnedBPRuns = 1;
                if (BPTech == 1) // All T1
                {
                    if (Reaction)
                    {
                        // Reactions can't be researched
                        txtBPME.Text = "0";
                        txtBPTE.Text = "0";
                    }
                    else if (SentFrom != Public_Variables.SentFromLocation.ManufacturingTab)
                    {
                        txtBPME.Text = SettingsVariables.UserApplicationSettings.DefaultBPME.ToString();
                        txtBPTE.Text = SettingsVariables.UserApplicationSettings.DefaultBPTE.ToString();
                    }
                    else if (SentFrom == Public_Variables.SentFromLocation.ShoppingList)
                    {
                        // Will be set already or use default
                        if (string.IsNullOrEmpty(Strings.Trim(txtBPME.Text)))
                        {
                            txtBPME.Text = SettingsVariables.UserApplicationSettings.DefaultBPME.ToString();
                        }
                        txtBPTE.Text = SettingsVariables.UserApplicationSettings.DefaultBPTE.ToString();
                    }
                }
            }

            // Set decryptors
            if (BPTech != 1 & !PolarizedItem)
            {
                // Default setting
                txtBPME.Enabled = false;
                txtBPTE.Enabled = false;
                chkBPIgnoreInvention.Enabled = true; // All T2/T3 options need the toggle

                // If it's a T2 BPO, then don't check invention
                if (BPTech == 2 & TempBPType == Public_Variables.BPType.Original & NewBP)
                {
                    // Check the ignore invention, they own this T2 BPO and don't need to invent it
                    CheckBPIgnoreInventionValue = true;
                    txtBPME.Enabled = true;
                    txtBPTE.Enabled = true;
                }
                else // BPC
                {
                    var TempD = new DecryptorList();
                    // Get the decryptor based on data entered or BP data from an owned bp
                    SelectedDecryptor = TempD.GetDecryptor(Conversions.ToInteger(txtBPME.Text), Conversions.ToInteger(txtBPTE.Text), OwnedBPRuns, BPTech);
                    if ((SelectedDecryptor.Name ?? "") == Public_Variables.None & Conversions.ToInteger(txtBPME.Text) != Public_Variables.BaseT2T3ME & Conversions.ToInteger(txtBPTE.Text) != Public_Variables.BaseT2T3TE & TempBPType == Public_Variables.BPType.Copy)
                    {
                        TempDName = DecryptorVariables.NoDecryptor.Name;
                        Uninventable = true;
                        // Can't invent this - either a BPC that was a T2 BPO copy or a hacking find
                        CheckBPIgnoreInventionValue = true;
                        txtBPME.Enabled = true;
                        txtBPTE.Enabled = true;
                    }
                    else
                    {
                        TempDName = SelectedDecryptor.Name;
                    }
                }

                // Reset the combo for invention, and Load the relic types for BP selected for T2/T3 - If sent from, then it's set there
                if (NewBP & SentFrom == Public_Variables.SentFromLocation.None)
                {
                    if (TempBPType == Public_Variables.BPType.InventedBPC | TempBPType == Public_Variables.BPType.Copy)
                    {
                        // Save decryptor name
                        if (BPTech == 2)
                        {
                            LoadingInventionDecryptors = true;
                            cmbBPInventionDecryptor.Text = TempDName;
                            LoadingInventionDecryptors = false;
                        }
                        else if (BPTech == 3)
                        {
                            LoadingT3Decryptors = true;
                            cmbBPT3Decryptor.Text = TempDName;
                            LoadingT3Decryptors = false;
                        }
                    }
                    else
                    {
                        ResetDecryptorCombos(BPTech);
                    }

                    // If T3, refresh relic list
                    if (BPTech == 3)
                    {
                        // Load up the relic based on the bp data
                        LoadRelicTypes(BlueprintID);
                        string Tempstring;
                        Tempstring = Public_Variables.GetRelicfromInputs(SelectedDecryptor, BlueprintID, OwnedBPRuns);
                        if (!string.IsNullOrEmpty(Tempstring))
                        {
                            LoadingRelics = true;
                            // if found, set it else
                            cmbBPRelic.Text = Tempstring;
                            LoadingRelics = false;
                        }
                    }
                }
                else if (!Uninventable)
                {
                    // Load the decryptor selected for non-newBPs
                    SelectDecryptor(cmbBPInventionDecryptor.Text);
                }
            }
            else
            {
                chkBPIgnoreInvention.Enabled = false;
            } // Can't invent T1 - so don't allow toggle

            // Only update the check box if we select it, not if we come here from checking ignore invention
            if (!FromCheck & BPTech != 1 & !PolarizedItem)
            {
                IgnoreRefresh = true;
                UpdatingInventionChecks = true;
                chkBPIgnoreInvention.Checked = CheckBPIgnoreInventionValue;
                // If this isn't on here, we need to show it anyway so add it here to update
                if (!tabBPInventionEquip.TabPages.Contains(tabInventionCalcs))
                {
                    tabBPInventionEquip.TabPages.Add(tabInventionCalcs);
                }
                UpdateInventionTabs();
                UpdatingInventionChecks = false;
                IgnoreRefresh = false;
            }

            if (BPTech != 1 & !PolarizedItem)
            {
                // Now that we have the decryptor set, the IgnoreCheck set, we can load the ME/TE values for T2/T3
                if (chkBPIgnoreInvention.Checked == true)
                {
                    // T2 BPO or non-invented (e.g., hacking find)
                    if (readerBP.HasRows)
                    {
                        txtBPME.Text = readerBP.GetInt32(0).ToString();
                        OwnedBPME = txtBPME.Text;
                        txtBPTE.Text = readerBP.GetInt32(1).ToString();
                        OwnedBPPE = txtBPTE.Text;
                    }
                    else
                    {
                        txtBPME.Text = "0";
                        txtBPTE.Text = "0";
                    }
                }
                else
                {
                    // Use invention numbers
                    txtBPME.Text = (Public_Variables.BaseT2T3ME + SelectedDecryptor.MEMod).ToString();
                    txtBPTE.Text = (Public_Variables.BaseT2T3TE + SelectedDecryptor.TEMod).ToString();
                }
            }
            readerBP.Close();

        }

        // Updates the lists with the correct materials for the selected item
        public void UpdateBPGrids(int BPID, int BPTech, bool NewBPSelection, int BPGroupID, int BPCategoryID, Public_Variables.SentFromLocation SentFrom)
        {
            int IndustrySkill = 0;
            int i = 0;
            List<Material> BPRawMats;
            List<Material> BPComponentMats;
            var BPBuiltItems = new List<BuiltItem>();
            ListViewItem rawlstViewRow;
            ListViewItem complstViewRow;
            ListViewItem builtlistViewRow;
            string TempME = "0";
            string BPCName = "";

            // For Invention Copy data - set defaults here
            int T1CopyRuns = 0;
            double CopyCostPerSecond = 0d;
            string SQL = "";
            double AdditionalCosts;

            int BPME = 0;
            int BPTE = 0;

            // T2/T3 variables
            string RelicName = "";

            int SelectedRuns;
            string ZeroCostToolTipText = "";

            // Set the number of runs to 1 if it's blank
            if (string.IsNullOrEmpty(Strings.Trim(txtBPRuns.Text)))
            {
                txtBPRuns.Text = "1";
            }

            // Check the quantity
            if (!Information.IsNumeric(txtBPRuns.Text) | Conversion.Val(txtBPRuns.Text) <= 0d)
            {
                Interaction.MsgBox("You must enter a valid number of runs", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPRuns.Focus();
                return;
            }
            else
            {
                SelectedRuns = Conversions.ToInteger(txtBPRuns.Text);
            }

            // Check the num bps
            if (!Information.IsNumeric(txtBPNumBPs.Text) | string.IsNullOrEmpty(Strings.Trim(txtBPNumBPs.Text)))
            {
                Interaction.MsgBox("You must enter a valid number of BPs", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPNumBPs.Focus();
                return;
            }

            // Additional costs
            if (!Information.IsNumeric(txtBPAddlCosts.Text) | string.IsNullOrEmpty(Strings.Trim(txtBPAddlCosts.Text)))
            {
                Interaction.MsgBox("You must enter a valid additional cost value", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPAddlCosts.Focus();
                return;
            }
            else
            {
                // Set the additional costs (this is just a raw value they enter)
                AdditionalCosts = Conversions.ToDouble(txtBPAddlCosts.Text);
            }

            // Check num lines
            if (!Information.IsNumeric(txtBPLines.Text) | Conversion.Val(txtBPLines.Text) <= 0d)
            {
                Interaction.MsgBox("You must enter a valid number of Production Lines", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPLines.Focus();
                return;
            }

            // Check the laboratory lines
            if (!Information.IsNumeric(txtBPInventionLines.Text) | Conversion.Val(txtBPInventionLines.Text) <= 0d)
            {
                Interaction.MsgBox("You must enter a valid number of Invention Lines", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPInventionLines.Focus();
                return;
            }

            if (!Information.IsNumeric(txtBPRelicLines.Text) | Conversion.Val(txtBPRelicLines.Text) <= 0d)
            {
                Interaction.MsgBox("You must enter a valid number of T3 Invention Lines", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPRelicLines.Focus();
                return;
            }

            // Check num bps
            if (!Information.IsNumeric(txtBPNumBPs.Text) | Conversion.Val(txtBPNumBPs.Text) <= 0d)
            {
                Interaction.MsgBox("You must enter a valid number of BPs", Constants.vbExclamation, Application.ProductName);
                txtBPRuns.SelectAll();
                txtBPRuns.Focus();
                return;
            }

            // Facility setup
            var ComponentFacility = new IndustryFacility();
            var BuildFacility = new IndustryFacility();
            BuildFacility = BPTabFacility.GetSelectedManufacturingFacility(BPGroupID, BPCategoryID); // This is the facility to manufacture the item in the blueprint

            if (SelectedBPText.Contains("Reaction Formula"))
            {
                // Need to use the manufacturing facility instead of component facility since they are more likely to make fuel blocks for reactions there
                ComponentFacility = BPTabFacility.GetFacility(ProductionType.Manufacturing);
            }
            // ElseIf ((BPCategoryID = ItemIDs.ComponentCategoryID Or BPGroupID = ItemIDs.AdvCapitalComponentGroupID) And Not BPGroupID = ItemIDs.CapitalComponentGroupID) Then
            // ' Use the reaction facility as the 'component facility' if it's T2 component item, since they will do reactions
            // ComponentFacility = BPTabFacility.GetFacility(ProductionType.Reactions)
            else
            {
                ComponentFacility = BPTabFacility.GetFacility(ProductionType.ComponentManufacturing);
            }
            var CapitalComponentManufacturingFacility = BPTabFacility.GetFacility(ProductionType.CapitalComponentManufacturing);
            var ReactionFacility = BPTabFacility.GetFacility(ProductionType.Reactions);
            var CopyFacility = BPTabFacility.GetFacility(ProductionType.Copying);
            var InventionFacility = new IndustryFacility();

            var ReprocessingFacility = BPTabFacility.GetFacility(ProductionType.Reprocessing);

            if (BPTech == (int)Public_Variables.BPTechLevel.T2 | BPTech == (int)Public_Variables.BPTechLevel.T3)
            {
                // Set the invention facility data
                if (BPTech == (int)Public_Variables.BPTechLevel.T3)
                {
                    // Need to add the relic variant to the query for just one item
                    RelicName = cmbBPRelic.Text;
                    InventionFacility = BPTabFacility.GetFacility(ProductionType.T3Invention);
                    // Load the decryptor options
                    LoadBPT3InventionDecryptors();
                }
                else if (BPTech == (int)Public_Variables.BPTechLevel.T2)
                {
                    // T2 no relic 
                    RelicName = "";
                    InventionFacility = BPTabFacility.GetFacility(ProductionType.Invention);
                    // Load the decryptor options
                    LoadBPInventionDecryptors();
                    // T2 has copy costs/time
                    // CopyFacility.IncludeActivityCost = chkBPIncludeCopyCosts.Checked
                    // CopyFacility.IncludeActivityTime = chkBPIncludeCopyTime.Checked
                }

                // All invention facilities need to have these set
                // InventionFacility.IncludeActivityCost = chkBPIncludeInventionCosts.Checked
                // InventionFacility.IncludeActivityTime = chkBPIncludeInventionTime.Checked
            }

            // Now load the materials into the lists
            lstBPComponentMats.Items.Clear();
            lstBPComponentMats.Enabled = false;
            lstBPRawMats.Items.Clear();
            lstBPRawMats.Enabled = false;
            lstBPBuiltComponents.Items.Clear();
            lstBPBuiltComponents.Enabled = false;

            lblBPCanMakeBP.Visible = false;
            lblBPCanMakeBPAll.Visible = false;
            txtListEdit.Visible = false;
            btnBPRefreshBP.Enabled = false;
            Cursor = Cursors.WaitCursor;
            IgnoreFocus = true;
            Application.DoEvents();
            IgnoreFocus = false;

            BPME = Conversions.ToInteger(txtBPME.Text);
            BPTE = Conversions.ToInteger(txtBPTE.Text);

            // Get the Build/Buy preference list if needed
            List<Public_Variables.BuildBuyItem> BPBuildBuyPref;
            if (chkBPBuildBuy.Checked)
            {
                BPBuildBuyPref = BBItems;
            }
            else
            {
                BPBuildBuyPref = null;
            }

            // Construct Blueprint
            Public_Variables.SelectedBlueprint = new Blueprint(BPID, SelectedRuns, BPME, BPTE, Conversions.ToInteger(txtBPNumBPs.Text), Conversions.ToInteger(txtBPLines.Text), Public_Variables.SelectedCharacter, SettingsVariables.UserApplicationSettings, chkBPBuildBuy.Checked, AdditionalCosts, BuildFacility, ComponentFacility, CapitalComponentManufacturingFacility, ReactionFacility, chkBPSellExcessItems.Checked, SettingsVariables.UserBPTabSettings.BuildT2T3Materials, true, ref BPBuildBuyPref, ref ReprocessingFacility, SettingsVariables.UserConversiontoOreSettings);

            // Set the T2 and T3 inputs if necessary
            if (BPTech != (int)Public_Variables.BPTechLevel.T1 & chkBPIgnoreInvention.Checked == false & chkBPIgnoreInvention.Enabled == true)
            {
                // Invent this bp
                txtBPNumBPs.Text = Public_Variables.SelectedBlueprint.InventBlueprint(Conversions.ToInteger(txtBPInventionLines.Text), SelectedDecryptor, InventionFacility, CopyFacility, Public_Variables.GetInventItemTypeID(BPID, RelicName)).ToString();
            }

            // Build the item and get the list of materials
            var BFData = Public_Variables.GetBrokerFeeData(chkBPBrokerFees, txtBPBrokerFeeRate);
            Public_Variables.SelectedBlueprint.BuildItems(chkBPTaxes.Checked, BFData, false, chkBPIgnoreMinerals.Checked, chkBPIgnoreT1Item.Checked);

            // Get the lists
            BPRawMats = Public_Variables.SelectedBlueprint.GetRawMaterials().GetMaterialList();
            BPComponentMats = Public_Variables.SelectedBlueprint.GetComponentMaterials().GetMaterialList();
            BPBuiltItems = Public_Variables.SelectedBlueprint.BuiltComponentList.GetBuiltItemList();

            if (chkBPBuildBuy.Checked)
            {
                lblBPComponentMats.Text = "Build/Buy Component Material List";
                lblBPRawMats.Text = "Build/Buy Raw Material List";
                lblBPBuildColor.Visible = true;
                lblBPBuyColor.Visible = true;
            }
            else // Show all
            {
                lblBPComponentMats.Text = "Component Material List";
                lblBPRawMats.Text = "Raw Material List";
                lblBPBuildColor.Visible = false;
                lblBPBuyColor.Visible = false;
            }

            // Fill Component List if components built
            if (!(BPComponentMats == null) & Public_Variables.SelectedBlueprint.HasComponents())
            {
                IgnoreListViewItemChecks = true;

                if (chkBPBuildBuy.Checked)
                {
                    lstBPComponentMats.CheckBoxes = true;
                }
                else
                {
                    lstBPComponentMats.CheckBoxes = false;
                }

                lstBPComponentMats.Items.Clear();
                lstBPComponentMats.BeginUpdate();
                var loopTo = BPComponentMats.Count - 1;
                for (i = 0; i <= loopTo; i++)
                {
                    // The remaining columns are subitems  
                    complstViewRow = new ListViewItem(BPComponentMats[i].GetMaterialName());
                    complstViewRow.SubItems.Add(Strings.FormatNumber(BPComponentMats[i].GetQuantity(), 0));
                    TempME = BPComponentMats[i].GetItemME();

                    bool Reaction;
                    switch (BPComponentMats[i].GroupName ?? "")
                    {
                        case "Composite":
                        case "Biochemical Material":
                        case "Hybrid Polymers":
                        case "Intermediate Materials":
                            {
                                Reaction = true;
                                break;
                            }

                        default:
                            {
                                Reaction = false;
                                break;
                            }
                    }

                    // Mark line grey if the blueprint for this item has no ME stored
                    if (TempME == "0")
                    {
                        complstViewRow.BackColor = Color.LightGray;
                    }
                    else
                    {
                        complstViewRow.BackColor = Color.White;
                    }

                    // If we want to build the item, then override the back color
                    if (chkBPBuildBuy.Checked)
                    {
                        inhibitAutoCheck = false; // Don't let it reset the check based on previous value
                        if (BPComponentMats[i].GetBuildItem())
                        {
                            complstViewRow.BackColor = lblBPBuildColor.BackColor;
                            complstViewRow.Checked = true;
                        }
                        else
                        {
                            complstViewRow.BackColor = lblBPBuyColor.BackColor;
                            complstViewRow.Checked = false;
                        }
                    }

                    complstViewRow.SubItems.Add(TempME);
                    // If the price is zero, highlight text as red
                    if (BPComponentMats[i].GetCostPerItem() == 0d)
                    {
                        complstViewRow.ForeColor = Color.Red;
                    }
                    else
                    {
                        complstViewRow.ForeColor = Color.Black;
                    }
                    complstViewRow.SubItems.Add(Strings.FormatNumber(BPComponentMats[i].GetCostPerItem(), 2));
                    complstViewRow.SubItems.Add(Strings.FormatNumber(BPComponentMats[i].GetTotalCost(), 2));
                    lstBPComponentMats.Items.Add(complstViewRow);
                }
                IgnoreListViewItemChecks = false;

                SortOrder TempSort;
                if (BPCompColumnSortType == SortOrder.Ascending)
                {
                    TempSort = SortOrder.Descending;
                }
                else
                {
                    TempSort = SortOrder.Ascending;
                }

                // Sort the component list
                ListView argRefListView = lstBPComponentMats;
                Public_Variables.ListViewColumnSorter(BPCompColumnClicked, ref argRefListView, ref BPCompColumnClicked, ref TempSort);

                lstBPComponentMats.EndUpdate();

                // Enable the raw and component selector radio for exporting to shopping list (only if we don't have calc build/buy checked)
                if (chkBPBuildBuy.Checked == true)
                {
                    rbtnBPRawmatCopy.Enabled = false;
                    rbtnBPComponentCopy.Enabled = true;
                }
                else
                {
                    rbtnBPRawmatCopy.Enabled = true;
                    rbtnBPComponentCopy.Enabled = true;
                }

                if (SentFrom != Public_Variables.SentFromLocation.ManufacturingTab)
                {
                    switch (SettingsVariables.UserBPTabSettings.ExporttoShoppingListType ?? "")
                    {
                        case var @case when @case == (rbtnBPComponentCopy.Text ?? ""):
                            {
                                rbtnBPComponentCopy.Checked = true;
                                break;
                            }
                        case var case1 when case1 == (rbtnBPCopyInvREMats.Text ?? ""):
                            {
                                rbtnBPCopyInvREMats.Checked = true;
                                break;
                            }
                        case var case2 when case2 == (rbtnBPRawmatCopy.Text ?? ""):
                            {
                                // If the raw button isn't enabled, then default to components
                                if (rbtnBPRawmatCopy.Enabled)
                                {
                                    rbtnBPRawmatCopy.Checked = true;
                                }
                                else
                                {
                                    rbtnBPComponentCopy.Checked = true;
                                }

                                break;
                            }
                    }
                    lstBPComponentMats.Enabled = true;
                }

                // Fill the built component list if there
                if (BPBuiltItems.Count != 0)
                {
                    lstBPBuiltComponents.Items.Clear();
                    lstBPBuiltComponents.BeginUpdate();

                    var loopTo1 = BPBuiltItems.Count - 1;
                    for (i = 0; i <= loopTo1; i++)
                    {
                        builtlistViewRow = new ListViewItem(BPBuiltItems[i].ItemName);
                        builtlistViewRow.SubItems.Add(Strings.FormatNumber(BPBuiltItems[i].ItemQuantity, 0));
                        TempME = BPBuiltItems[i].BuildME.ToString();

                        // Mark line grey if the blueprint for this item has no ME stored except if reaction
                        if (TempME == "0" & (BPBuiltItems[i].ManufacturingFacility.Activity ?? "") != ManufacturingFacility.ActivityReactions)
                        {
                            builtlistViewRow.BackColor = Color.LightGray;
                        }
                        else
                        {
                            builtlistViewRow.BackColor = Color.White;
                        }

                        builtlistViewRow.SubItems.Add(TempME);
                        // If the price is zero, highlight text as red
                        if (BPBuiltItems[i].TotalBuildCost == 0d)
                        {
                            builtlistViewRow.ForeColor = Color.Red;
                        }
                        else
                        {
                            builtlistViewRow.ForeColor = Color.Black;
                        }
                        builtlistViewRow.SubItems.Add(Strings.FormatNumber(BPBuiltItems[i].TotalExcessSellBuildCost, 2));
                        builtlistViewRow.SubItems.Add(Strings.FormatNumber(BPBuiltItems[i].TotalBuildCost, 2));
                        lstBPBuiltComponents.Items.Add(builtlistViewRow);

                    }

                    if (BPCompColumnSortType == SortOrder.Ascending)
                    {
                        TempSort = SortOrder.Descending;
                    }
                    else
                    {
                        TempSort = SortOrder.Ascending;
                    }

                    // Sort the list
                    ListView argRefListView1 = lstBPBuiltComponents;
                    Public_Variables.ListViewColumnSorter(BPCompColumnClicked, ref argRefListView1, ref BPCompColumnClicked, ref TempSort);

                    lstBPBuiltComponents.EndUpdate();
                    lstBPBuiltComponents.Enabled = true;
                }
            }

            else // No components
            {
                // Disable the raw and component selector radio for exporting to shopping list, the button will still just pull the data from the list anyway though
                rbtnBPComponentCopy.Enabled = false;
                rbtnBPRawmatCopy.Enabled = true;
                rbtnBPRawmatCopy.Checked = true;
                lstBPComponentMats.Enabled = false;
                lstBPBuiltComponents.Enabled = false;
            }

            if (Public_Variables.SelectedBlueprint.GetTechLevel() != (int)Public_Variables.BPTechLevel.T1)
            {
                // Enable the invention mats
                rbtnBPCopyInvREMats.Enabled = true;

                // Set this value if it just got enabled and they want it
                if ((SettingsVariables.UserBPTabSettings.ExporttoShoppingListType ?? "") == (rbtnBPCopyInvREMats.Text ?? ""))
                {
                    rbtnBPCopyInvREMats.Checked = true;
                }
            }
            else
            {
                rbtnBPCopyInvREMats.Enabled = false;
            }

            if (!(BPRawMats == null))
            {
                // Fill the Raw List
                lstBPRawMats.Items.Clear();
                lstBPRawMats.BeginUpdate();

                var loopTo2 = BPRawMats.Count - 1;
                for (i = 0; i <= loopTo2; i++)
                {
                    rawlstViewRow = new ListViewItem(BPRawMats[i].GetMaterialName());
                    // The remaining columns are subitems  
                    rawlstViewRow.SubItems.Add(Strings.FormatNumber(BPRawMats[i].GetQuantity(), 0));
                    rawlstViewRow.SubItems.Add(BPRawMats[i].GetItemME());
                    // If the price is zero, highlight text as red
                    if (BPRawMats[i].GetCostPerItem() == 0d)
                    {
                        rawlstViewRow.ForeColor = Color.Red;
                    }
                    else
                    {
                        rawlstViewRow.ForeColor = Color.Black;
                    }
                    rawlstViewRow.SubItems.Add(Strings.FormatNumber(BPRawMats[i].GetCostPerItem(), 2));
                    rawlstViewRow.SubItems.Add(Strings.FormatNumber(BPRawMats[i].GetTotalCost(), 2));
                    lstBPRawMats.Items.Add(rawlstViewRow);
                }
                // End If
                // Sort the raw mats list
                SortOrder TempSort;
                if (BPRawColumnSortType == SortOrder.Ascending)
                {
                    TempSort = SortOrder.Descending;
                }
                else
                {
                    TempSort = SortOrder.Ascending;
                }

                ListView argRefListView2 = lstBPRawMats;
                Public_Variables.ListViewColumnSorter(BPRawColumnClicked, ref argRefListView2, ref BPRawColumnClicked, ref TempSort);

                lstBPRawMats.EndUpdate();
            }

            // Get the production time
            if (chkBPBuildBuy.Checked)
            {
                // Grey this out because it doesn't really apply here
                lblBPProductionTime.Enabled = false;
            }
            else
            {
                lblBPProductionTime.Enabled = true;
            }

            // Reset the number of bps to what we used in batches, not what was entered
            txtBPNumBPs.Text = Public_Variables.SelectedBlueprint.GetUsedNumBPs().ToString();

            // Show and update labels for T2 if selected
            if (Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2)
            {
                if (chkBPIgnoreInvention.Checked == false)
                {
                    if (Public_Variables.SelectedBlueprint.UserCanInventRE())
                    {
                        lblBPT2InventStatus.Text = "Invention Calculations:";
                        lblBPT2InventStatus.ForeColor = Color.Black;
                    }
                    else
                    {
                        lblBPT2InventStatus.Text = "Cannot Invent - Typical Cost Shown";
                        lblBPT2InventStatus.ForeColor = Color.Red;
                    }

                    // Invention cost to get enough success for the runs entered
                    lblBPInventionCost.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetInventionCost(), 2);

                    // Add copy costs for enough succesful runs
                    lblBPCopyCosts.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetCopyCost(), 2);

                    // Invention Chance
                    lblBPInventionChance.Text = Strings.FormatPercent(Public_Variables.SelectedBlueprint.GetInventionChance(), 2);

                    // Update the decryptor stats box ME: -4, TE: -3, Runs: +9
                    lblBPDecryptorStats.Text = "ME: " + SelectedDecryptor.MEMod.ToString() + ", TE: " + SelectedDecryptor.TEMod.ToString() + Constants.vbCrLf + "BP Runs: " + Public_Variables.SelectedBlueprint.GetSingleInventedBPCRuns().ToString();

                    // Show the copy time if they want it
                    lblBPCopyTime.Text = Public_Variables.FormatIPHTime(Public_Variables.SelectedBlueprint.GetCopyTime());

                    // Show the invention time if they want it
                    lblBPInventionTime.Text = Public_Variables.FormatIPHTime(Public_Variables.SelectedBlueprint.GetInventionTime());

                    // Set the tool tip for copy costs to the invention chance label
                    ttBP.SetToolTip(lblBPInventionChance, Public_Variables.SelectedBlueprint.GetInventionBPC());

                    // Finally check the invention materials and make sure that if any have 0.00 for price,
                    // we update the invention label and add a tooltip for what has a price of 0
                    if (!(Public_Variables.SelectedBlueprint.GetInventionMaterials().GetMaterialList() == null))
                    {
                        {
                            var withBlock = Public_Variables.SelectedBlueprint.GetInventionMaterials();
                            var loopTo3 = withBlock.GetMaterialList().Count - 1;
                            for (i = 0; i <= loopTo3; i++)
                            {
                                if (withBlock.GetMaterialList()[i].GetTotalCost() == 0d & !(withBlock.GetMaterialList()[i].GetMaterialName().Contains("Blueprint") | withBlock.GetMaterialList()[i].GetMaterialName().Contains("Data Interface")))
                                {
                                    ZeroCostToolTipText = ZeroCostToolTipText + withBlock.GetMaterialList()[i].GetMaterialName() + ", ";
                                }
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(ZeroCostToolTipText))
                    {
                        // We have a few zero priced items
                        ZeroCostToolTipText = ZeroCostToolTipText.Substring(0, Strings.Len(ZeroCostToolTipText) - 2);
                        ZeroCostToolTipText = "Invention Costs may be inaccurate; the following items have 0.00 for price: " + ZeroCostToolTipText;
                        lblBPT2InventStatus.ForeColor = Color.Red;
                        ttBP.SetToolTip(lblBPT2InventStatus, ZeroCostToolTipText);
                    }
                    else
                    {
                        lblBPT2InventStatus.ForeColor = Color.Black;
                        ttBP.SetToolTip(lblBPT2InventStatus, "");
                    }
                }
                else
                {
                    Public_Variables.FirstLoad = true;
                    ResetInventionBoxes();
                    Public_Variables.FirstLoad = false;
                }

                // Show the invention tabs
                tabBPInventionEquip.TabPages.Remove(tabT3Calcs);
                if (!tabBPInventionEquip.TabPages.Contains(tabInventionCalcs))
                {
                    tabBPInventionEquip.TabPages.Add(tabInventionCalcs);
                }

                // Enable option
                rbtnBPCopyInvREMats.Enabled = true;
            }

            else if (Public_Variables.SelectedBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3)
            {
                // Show the RE calc tab
                tabBPInventionEquip.TabPages.Remove(tabInventionCalcs);
                if (!tabBPInventionEquip.TabPages.Contains(tabT3Calcs))
                {
                    tabBPInventionEquip.TabPages.Add(tabT3Calcs);
                }

                if (chkBPIgnoreInvention.Checked == false)
                {
                    // RE Cost and time
                    lblBPRECost.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetInventionCost(), 2);
                    lblBPRETime.Text = Public_Variables.FormatIPHTime(Public_Variables.SelectedBlueprint.GetInventionTime());

                    // Update the decryptor stats box ME: -4, TE: -3, Runs: +9
                    lblBPT3Stats.Text = "ME: " + SelectedDecryptor.MEMod.ToString() + ", TE: " + SelectedDecryptor.TEMod.ToString() + "," + Constants.vbCrLf + "BP Runs: " + Public_Variables.SelectedBlueprint.GetSingleInventedBPCRuns().ToString();

                    if (Public_Variables.SelectedBlueprint.UserCanInventRE())
                    {
                        lblT3InventStatus.Text = "T3 Invention Calculations:";
                        lblT3InventStatus.ForeColor = Color.Black;
                    }
                    else
                    {
                        lblT3InventStatus.Text = "Cannot Invent - Typical Cost Shown";
                        lblT3InventStatus.ForeColor = Color.Red;
                    }

                    lblBPT3InventionChance.Text = Strings.FormatPercent(Public_Variables.SelectedBlueprint.GetInventionChance(), 2);

                    // Enable option for adding mats to shopping list
                    rbtnBPCopyInvREMats.Enabled = true;

                    // Finally check the RE materials and make sure that if any have 0.00 for price,
                    // we update the RE label and add a tooltip for what has a price of 0
                    if (!(Public_Variables.SelectedBlueprint.GetInventionMaterials().GetMaterialList() == null))
                    {
                        {
                            var withBlock1 = Public_Variables.SelectedBlueprint.GetInventionMaterials();
                            var loopTo4 = withBlock1.GetMaterialList().Count - 1;
                            for (i = 0; i <= loopTo4; i++)
                            {
                                if (withBlock1.GetMaterialList()[i].GetTotalCost() == 0d)
                                {
                                    ZeroCostToolTipText = ZeroCostToolTipText + withBlock1.GetMaterialList()[i].GetMaterialName() + ", ";
                                }
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(ZeroCostToolTipText))
                    {
                        // We have a few zero priced items
                        ZeroCostToolTipText = ZeroCostToolTipText.Substring(0, Strings.Len(ZeroCostToolTipText) - 2);
                        ZeroCostToolTipText = "T3 Invention Costs may be inaccurate; the following items have 0.00 for price: " + ZeroCostToolTipText;
                        lblT3InventStatus.ForeColor = Color.Red;
                        ttBP.SetToolTip(lblT3InventStatus, ZeroCostToolTipText);
                    }
                    else
                    {
                        lblBPT2InventStatus.ForeColor = Color.Black;
                        ttBP.SetToolTip(lblT3InventStatus, "");
                    }
                }
                else
                {
                    Public_Variables.FirstLoad = true;
                    ResetInventionBoxes();
                    Public_Variables.FirstLoad = false;
                }
            }

            else // T1
            {
                if (rbtnBPCopyInvREMats.Checked)
                {
                    // We are turning this off, so move to raw
                    rbtnBPRawmatCopy.Checked = true;
                }
                rbtnBPCopyInvREMats.Enabled = false;

                // Remove calcs for t1
                tabBPInventionEquip.TabPages.Remove(tabInventionCalcs);
                tabBPInventionEquip.TabPages.Remove(tabT3Calcs);
            }

            // Set the tab to the one selected
            if (SelectedBPTabIndex <= tabBPInventionEquip.TabCount - 1)
            {
                tabBPInventionEquip.SelectTab(SelectedBPTabIndex);
            }
            else
            {
                tabBPInventionEquip.SelectTab(0);
            }

            // Finally Update the labels
            UpdateBPPriceLabels();

            // If the bp was updated (not new, then save any changes to the history - e.g. facility changes)
            if (!NewBPSelection & SentFrom == Public_Variables.SentFromLocation.BlueprintTab)
            {
                UpdateBPHistory(false);
            }

            LoadingBPfromHistory = false;

            // Done
            lstBPComponentMats.Enabled = true;
            lstBPBuiltComponents.Enabled = true;
            lstBPRawMats.Enabled = true;
            lblBPCanMakeBP.Visible = true;
            lblBPCanMakeBPAll.Visible = true;
            btnBPRefreshBP.Enabled = true;

            // Enable facility selectors
            tabBPInventionEquip.Enabled = true;

            Cursor = Cursors.Default;
            Application.DoEvents();

        }

        // Updates the blueprint history list for moving forward and back
        private void UpdateBPHistory(bool NewBP)
        {
            BPHistoryItem TempBPHistoryItem;
            var BP = Public_Variables.SelectedBlueprint;

            if (!(BP == null))
            {
                if (!LoadingBPfromHistory)
                {
                    TempBPHistoryItem.BPID = BP.GetTypeID();
                    TempBPHistoryItem.BPName = BP.GetName();
                    if (chkBPBuildBuy.Checked)
                    {
                        TempBPHistoryItem.BuildType = "Build/Buy";
                    }
                    else
                    {
                        TempBPHistoryItem.BuildType = "";
                    }

                    if (BP.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2)
                    {
                        TempBPHistoryItem.Inputs = BP.GetDecryptor().Name;
                    }
                    else if (BP.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3)
                    {
                        TempBPHistoryItem.Inputs = BP.GetDecryptor().Name + " - " + BP.GetRelic(); // parse decryptor and relic
                    }
                    else
                    {
                        TempBPHistoryItem.Inputs = "";
                    }
                    TempBPHistoryItem.SentFrom = Public_Variables.SentFromLocation.History;
                    TempBPHistoryItem.BuildFacility = (IndustryFacility)BPTabFacility.GetSelectedManufacturingFacility(BP.GetItemGroupID(), BP.GetItemCategoryID()).Clone();
                    TempBPHistoryItem.ComponentFacility = (IndustryFacility)BPTabFacility.GetFacility(ProductionType.ComponentManufacturing).Clone();
                    TempBPHistoryItem.CapComponentFacility = (IndustryFacility)BPTabFacility.GetFacility(ProductionType.CapitalComponentManufacturing).Clone();
                    TempBPHistoryItem.CopyFacility = (IndustryFacility)BPTabFacility.GetFacility(ProductionType.Copying).Clone();
                    TempBPHistoryItem.InventionFacility = (IndustryFacility)BPTabFacility.GetSelectedInventionFacility(BP.GetItemGroupID(), BP.GetItemCategoryID()).Clone();
                    TempBPHistoryItem.SentRuns = txtBPRuns.Text;
                    TempBPHistoryItem.IncludeTaxes = chkBPTaxes.Checked;

                    // Save broker fee
                    TempBPHistoryItem.BrokerFeeData.IncludeFee = (Public_Variables.BrokerFeeType)chkBPBrokerFees.CheckState;
                    TempBPHistoryItem.BrokerFeeData.FixedRate = Public_Variables.FormatManualPercentEntry(txtBPBrokerFeeRate.Text);

                    TempBPHistoryItem.MEValue = txtBPME.Text;
                    TempBPHistoryItem.TEValue = txtBPTE.Text;
                    TempBPHistoryItem.SentRuns = txtBPRuns.Text;
                    TempBPHistoryItem.ManufacturingLines = txtBPLines.Text;
                    if (BP.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2)
                    {
                        TempBPHistoryItem.LabLines = txtBPInventionLines.Text;
                    }
                    else if (BP.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3)
                    {
                        TempBPHistoryItem.LabLines = txtBPRelicLines.Text;
                    }
                    else
                    {
                        TempBPHistoryItem.LabLines = "1";
                    }
                    TempBPHistoryItem.NumBPs = txtBPNumBPs.Text;
                    TempBPHistoryItem.AddlCosts = txtBPAddlCosts.Text;
                    TempBPHistoryItem.PPU = chkBPPricePerUnit.Checked;

                    // Find where the last bp was and insert the new one - so if we have 10 bps, and then select a new bp (component) the component is now the last bp
                    if (NewBP)
                    {
                        if (CurrentBPHistoryIndex < 0)
                        {
                            BPHistory.Add(TempBPHistoryItem);
                            CurrentBPHistoryIndex = 0;
                        }
                        else
                        {
                            BPHistory.Insert(CurrentBPHistoryIndex + 1, TempBPHistoryItem);
                            CurrentBPHistoryIndex = CurrentBPHistoryIndex + 1;
                        }
                    }
                    // Remove the old one and replace it with the one we have now
                    else if (BPHistory.Count > 0)
                    {
                        BPHistory.RemoveAt(CurrentBPHistoryIndex);
                        BPHistory.Insert(CurrentBPHistoryIndex, TempBPHistoryItem);
                    }

                }
            }

            UpdateBlueprintHistoryButtons();

        }

        // Selects the images to be shown in the picture when a blueprint is selected
        private void LoadBlueprintPicture(long BPID, int ItemType)
        {
            string BPImage;
            string BPTechImagePath = "";

            // Load the image - use absolute value since I use negative bpid's for special bps
            BPImage = Path.Combine(Public_Variables.UserImagePath, Math.Abs(BPID).ToString() + "_64.png");

            // Check for the Tech Image
            if (File.Exists(BPImage))
            {
                var fi = new FileInfo(BPImage);
                if (fi.Length != 0L)
                {
                    pictBP.Image = Image.FromFile(BPImage);
                }
                else
                {
                    // This will cause errors so delete it until updated
                    File.Delete(BPImage);
                    pictBP.Image = null;
                }
            }
            else
            {
                pictBP.Image = null;
            }

            pictBP.Update();

        }

        // Selects and sets the decryptor
        private Decryptor SelectDecryptor(string DecryptorText)
        {

            if ((DecryptorText ?? "") == Public_Variables.None | string.IsNullOrEmpty(DecryptorText))
            {
                SelectedDecryptor = DecryptorVariables.NoDecryptor;
            }
            else
            {
                var InventionDecryptors = new DecryptorList();
                SelectedDecryptor = InventionDecryptors.GetDecryptor(DecryptorText);
            }

            // Set the ME/TE text here
            txtBPME.Text = (SelectedDecryptor.MEMod + Public_Variables.BaseT2T3ME).ToString();
            txtBPTE.Text = (SelectedDecryptor.TEMod + Public_Variables.BaseT2T3TE).ToString();

            return SelectedDecryptor;

        }

        // Updates the price and other labels on the BP tab for the selected BP
        public void UpdateBPPriceLabels()
        {
            // For final printout in boxes
            double TotalRawProfit;
            double TotalCompProfit;
            double TotalRawIPH;
            double TotalCompIPH;
            long DivideUnits;

            if (chkBPPricePerUnit.Checked)
            {
                // Need to divide all values by the total units produced
                // This will only update the values in the top right box
                DivideUnits = Public_Variables.SelectedBlueprint.GetTotalUnits();
                // Show only 1 unit in the units label
                lblBPTotalUnits.Text = "1";
            }
            else
            {
                // Just keep everything the same
                DivideUnits = 1L;
                // Show the total units
                lblBPTotalUnits.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetTotalUnits(), 0);
            }

            // Find the market price for the produced item
            lblBPMarketCost.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetItemMarketPrice() / DivideUnits, 2);

            // Materials (bottom labels)
            lblBPRawMatCost.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetRawMaterials().GetTotalMaterialsCost(), 2);
            lblBPComponentMatCost.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetComponentMaterials().GetTotalMaterialsCost(), 2);

            // Taxes/Fees
            lblBPTaxes.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetSalesTaxes() / DivideUnits, 2);
            lblBPBrokerFees.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetSalesBrokerFees() / DivideUnits, 2);

            // Update usage labels
            UpdateFacilityUsage(DivideUnits);

            // Total
            lblBPRawTotalCost.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetTotalRawCost() / DivideUnits, 2);
            lblBPTotalCompCost.Text = Strings.FormatNumber(Public_Variables.SelectedBlueprint.GetTotalComponentCost() / DivideUnits, 2);

            // Profit labels (market cost - total cost of mats and invention)
            TotalRawProfit = Public_Variables.SelectedBlueprint.GetTotalRawProfit() / DivideUnits;

            if (TotalRawProfit < 0d)
            {
                lblBPRawProfit.ForeColor = Color.Red;
            }
            else
            {
                lblBPRawProfit.ForeColor = Color.Black;
            }

            TotalCompProfit = Public_Variables.SelectedBlueprint.GetTotalComponentProfit() / DivideUnits;

            if (TotalCompProfit < 0d)
            {
                lblBPCompProfit.ForeColor = Color.Red;
            }
            else
            {
                lblBPCompProfit.ForeColor = Color.Black;
            }

            // Profit labels, check what type
            if (lblBPRawProfit1.Text.Contains("Percent"))
            {
                lblBPRawProfit.Text = Strings.FormatPercent(Public_Variables.SelectedBlueprint.GetTotalRawProfitPercent(), 2);
            }
            else
            {
                lblBPRawProfit.Text = Strings.FormatNumber(TotalRawProfit, 2);
            }

            if (lblBPCompProfit1.Text.Contains("Percent"))
            {
                lblBPCompProfit.Text = Strings.FormatPercent(Public_Variables.SelectedBlueprint.GetTotalComponentProfitPercent(), 2);
            }
            else
            {
                lblBPCompProfit.Text = Strings.FormatNumber(TotalCompProfit, 2);
            }

            if (DivideUnits == 1L)
            {
                TotalRawIPH = Public_Variables.SelectedBlueprint.GetTotalIskperHourRaw();
                TotalCompIPH = Public_Variables.SelectedBlueprint.GetTotalIskperHourComponents();
            }
            else // Need to adjust the production time per unit then calck IPH
            {
                // ISK per Hour (divide total cost by production time in seconds for a isk per second calc, then multiply by 3600 for isk per hour)
                TotalRawIPH = TotalRawProfit / (Public_Variables.SelectedBlueprint.GetTotalProductionTime() / DivideUnits) * 3600d; // Build everything

                // If we are doing build/buy then the total IPH will be the same as RAW since the lists are identical for what to buy 
                if (chkBPBuildBuy.Checked)
                {
                    TotalCompIPH = TotalRawIPH;
                }
                else
                {
                    TotalCompIPH = TotalCompProfit / (Public_Variables.SelectedBlueprint.GetProductionTime() / DivideUnits) * 3600d;
                } // Buy all components, just production time of BP

            }

            if (TotalRawProfit < 0d)
            {
                lblBPRawIPH.ForeColor = Color.Red;
            }
            else
            {
                lblBPRawIPH.ForeColor = Color.Black;
            }

            if (TotalCompIPH < 0d)
            {
                lblBPCompIPH.ForeColor = Color.Red;
            }
            else
            {
                lblBPCompIPH.ForeColor = Color.Black;
            }

            // ISK PER HOUR 
            lblBPRawIPH.Text = Strings.FormatNumber(TotalRawIPH, 2); // Build everything
            lblBPCompIPH.Text = Strings.FormatNumber(TotalCompIPH, 2); // Buy components

            // Set the labels if the User Can make this item and/or all components
            // Only update the make all label if we have something to make, else use the bp data
            if (Public_Variables.SelectedBlueprint.HasComponents())
            {
                if (Public_Variables.SelectedBlueprint.UserCanBuildAllComponents())
                {
                    lblBPCanMakeBPAll.Text = "Can make All Components for this Item";
                    lblBPCanMakeBPAll.ForeColor = Color.Black;
                }
                else
                {
                    lblBPCanMakeBPAll.Text = "Cannot make All Components for this Item";
                    lblBPCanMakeBPAll.ForeColor = Color.Red;
                }

                // Has components, but if we are buying everything (no skills/build buy) - then state that instead, else show BP stuff
                if (Public_Variables.SelectedBlueprint.GetReqComponentSkills().NumSkills() == 0 & chkBPBuildBuy.Checked)
                {
                    lblBPCanMakeBPAll.Text = "Buying all Materials";
                    lblBPCanMakeBPAll.ForeColor = Color.Black;
                }

                // Set the label for the BP if it has components as well
                if (Public_Variables.SelectedBlueprint.UserCanBuildBlueprint())
                {
                    lblBPCanMakeBP.Text = "Can make this Item";
                    lblBPCanMakeBP.ForeColor = Color.Black;
                }
                else
                {
                    lblBPCanMakeBP.Text = "Cannot make this Item";
                    lblBPCanMakeBP.ForeColor = Color.Red;
                }
            }

            else
            {
                // Don't show the label if there are no components in the component list
                lblBPCanMakeBP.Text = "";

                if (Public_Variables.SelectedBlueprint.UserCanBuildBlueprint())
                {
                    lblBPCanMakeBPAll.Text = "Can make this Item";
                    lblBPCanMakeBPAll.ForeColor = Color.Black;
                }
                else
                {
                    lblBPCanMakeBPAll.Text = "Cannot make this Item";
                    lblBPCanMakeBPAll.ForeColor = Color.Red;
                }

            }

            // BP production time
            lblBPProductionTime.Text = Public_Variables.FormatIPHTime(Public_Variables.SelectedBlueprint.GetProductionTime());
            // Set the total time to produce all items for this Blueprint
            lblBPTotalItemPT.Text = Public_Variables.FormatIPHTime(Public_Variables.SelectedBlueprint.GetTotalProductionTime());

            // SVR Values
            // Set these first so it doesn't look goofy
            lblBPBPSVR.Text = "-";
            lblBPRawSVR.Text = "-";

            if (SettingsVariables.UserApplicationSettings.AutoUpdateSVRonBPTab)
            {
                string TempRawSVR = GetBPItemSVR(Public_Variables.SelectedBlueprint.GetTotalProductionTime());
                string TempBPSVR;
                if (chkBPBuildBuy.Checked)
                {
                    TempBPSVR = TempRawSVR;
                }
                else
                {
                    TempBPSVR = GetBPItemSVR(Public_Variables.SelectedBlueprint.GetProductionTime());
                }
                // Get the values before setting so they update at the same time on the form
                lblBPBPSVR.Text = TempBPSVR;
                lblBPRawSVR.Text = TempRawSVR;
            }

            // Set the ME and TE values if they changed
            txtBPME.Text = Public_Variables.SelectedBlueprint.GetME().ToString();
            txtBPTE.Text = Public_Variables.SelectedBlueprint.GetTE().ToString();

        }

        // Update the facility usage directly in the object
        private void UpdateFacilityUsage(long DivideUnits)
        {
            var UsedFacility = BPTabFacility.GetSelectedFacility();
            string TTText = "";
            var SelectedManufacturingFacility = BPTabFacility.GetSelectedManufacturingFacility(Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID());

            // Save all the usage values each time we update to allow updates for changing the facility
            if (SelectedManufacturingFacility.FacilityProductionType == ProductionType.Reactions)
            {
                SelectedManufacturingFacility.FacilityUsage = Public_Variables.SelectedBlueprint.GetReactionFacilityUsage() / DivideUnits;
            }
            else
            {
                SelectedManufacturingFacility.FacilityUsage = Public_Variables.SelectedBlueprint.GetManufacturingFacilityUsage() / DivideUnits;
            }

            if (SelectedManufacturingFacility.FacilityProductionType != ProductionType.ComponentManufacturing)
            {
                if (SelectedManufacturingFacility.FacilityProductionType == ProductionType.Reactions)
                {
                    // Need to save the usage value on the manufacturing facility for fuel blocks instead of components
                    BPTabFacility.GetFacility(ProductionType.Manufacturing).FacilityUsage = Public_Variables.SelectedBlueprint.GetManufacturingFacilityUsage() / DivideUnits;
                }
                else
                {
                    BPTabFacility.GetFacility(ProductionType.ComponentManufacturing).FacilityUsage = Public_Variables.SelectedBlueprint.GetComponentFacilityUsage() / DivideUnits;
                }
            }

            if (SelectedManufacturingFacility.FacilityProductionType != ProductionType.CapitalComponentManufacturing)
            {
                BPTabFacility.GetFacility(ProductionType.CapitalComponentManufacturing).FacilityUsage = Public_Variables.SelectedBlueprint.GetCapComponentFacilityUsage() / DivideUnits;
            }

            if (SelectedManufacturingFacility.FacilityProductionType != ProductionType.Reactions)
            {
                BPTabFacility.GetFacility(ProductionType.Reactions).FacilityUsage = Public_Variables.SelectedBlueprint.GetReactionFacilityUsage() / DivideUnits;
            }

            BPTabFacility.GetFacility(ProductionType.Invention).FacilityUsage = Public_Variables.SelectedBlueprint.GetInventionUsage() / DivideUnits;
            BPTabFacility.GetFacility(ProductionType.Copying).FacilityUsage = Public_Variables.SelectedBlueprint.GetCopyUsage() / DivideUnits;

            BPTabFacility.GetFacility(ProductionType.Reprocessing).FacilityUsage = Public_Variables.SelectedBlueprint.GetReprocessingUsage() / DivideUnits;

            // Show the usage cost for the activity selected
            if (UsedFacility.IncludeActivityUsage)
            {
                switch (UsedFacility.Activity ?? "")
                {
                    case ManufacturingFacility.ActivityManufacturing:
                        {
                            UsedFacility.FacilityUsage = Public_Variables.SelectedBlueprint.GetManufacturingFacilityUsage() / DivideUnits;
                            TTText = GetUsageToolTipText(Public_Variables.SelectedBlueprint.GetManufacturingFacility(), true);
                            break;
                        }
                    case ManufacturingFacility.ActivityInvention:
                        {
                            UsedFacility.FacilityUsage = Public_Variables.SelectedBlueprint.GetInventionUsage() / DivideUnits;
                            TTText = GetUsageToolTipText(Public_Variables.SelectedBlueprint.GetInventionFacility(), false);
                            break;
                        }
                    case ManufacturingFacility.ActivityCopying:
                        {
                            UsedFacility.FacilityUsage = Public_Variables.SelectedBlueprint.GetCopyUsage() / DivideUnits;
                            TTText = GetUsageToolTipText(Public_Variables.SelectedBlueprint.GetCopyFacility(), false);
                            break;
                        }
                    case ManufacturingFacility.ActivityComponentManufacturing:
                        {
                            UsedFacility.FacilityUsage = Public_Variables.SelectedBlueprint.GetComponentFacilityUsage() / DivideUnits;
                            TTText = GetUsageToolTipText(Public_Variables.SelectedBlueprint.GetComponentManufacturingFacility(), true);
                            break;
                        }
                    case ManufacturingFacility.ActivityCapComponentManufacturing:
                        {
                            UsedFacility.FacilityUsage = Public_Variables.SelectedBlueprint.GetCapComponentFacilityUsage() / DivideUnits;
                            TTText = GetUsageToolTipText(Public_Variables.SelectedBlueprint.GetCapitalComponentManufacturingFacility(), true);
                            break;
                        }
                    case ManufacturingFacility.ActivityReactions:
                        {
                            UsedFacility.FacilityUsage = Public_Variables.SelectedBlueprint.GetReactionFacilityUsage() / DivideUnits;
                            TTText = GetUsageToolTipText(Public_Variables.SelectedBlueprint.GetReactionFacility(), true);
                            break;
                        }
                    case ManufacturingFacility.ActivityReprocessing:
                        {
                            UsedFacility.FacilityUsage = Public_Variables.SelectedBlueprint.GetReprocessingUsage() / DivideUnits;
                            TTText = GetUsageToolTipText(Public_Variables.SelectedBlueprint.GetReprocessingFacility(), true);
                            break;
                        }
                }
            }
            else
            {
                UsedFacility.FacilityUsage = 0d;
            }

            // Set the tool tip text
            BPTabFacility.UpdateUsage(TTText);

        }

        // Check if the runs they entered can be made with the number of blueprints, this only applies to BPC's (T2 and T3)
        private void UpdateBPLinesandBPs()
        {

            if (!(Public_Variables.SelectedBlueprint == null))
            {
                if (!string.IsNullOrEmpty(Strings.Trim(txtBPRuns.Text)))
                {
                    txtBPNumBPs.Text = GetUsedNumBPs(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), Conversions.ToInteger(txtBPRuns.Text), Conversions.ToInteger(txtBPLines.Text), Conversions.ToInteger(txtBPNumBPs.Text), SelectedDecryptor.RunMod).ToString();
                }
            }

        }

        // Returns the number of BPs to use for item type and runs sent
        private int GetUsedNumBPs(long BlueprintTypeID, int SentTechLevel, int SentRuns, int SentLines, int SentNumBps, int DecryptorMod)
        {
            SQLiteDataReader readerOwned;
            string SQL;
            long MaxProductionRuns;
            int ReturnValue;

            if (SentTechLevel == 1)
            {
                if (SentRuns >= SentNumBps)
                {
                    return SentNumBps;
                }
                else
                {
                    return SentRuns;
                }
            }

            // Set the number of bps
            if (SentTechLevel == 2)
            {
                SQL = "SELECT MAX_PRODUCTION_LIMIT FROM ALL_BLUEPRINTS WHERE BLUEPRINT_ID =" + BlueprintTypeID.ToString();

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerOwned = Public_Variables.DBCommand.ExecuteReader();
                readerOwned.Read();

                MaxProductionRuns = readerOwned.GetInt32(0);

                readerOwned.Close();
                readerOwned = null;
            }

            else // base T3 runs off of the relic
            {
                SQLiteDataReader readerBP;

                SQL = "SELECT quantity FROM INVENTORY_TYPES, INDUSTRY_ACTIVITY_PRODUCTS ";
                SQL += "WHERE typeID = blueprintTypeID AND productTypeID = " + BlueprintTypeID.ToString() + " AND typeName = '" + cmbBPRelic.Text + "'";

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerBP = Public_Variables.DBCommand.ExecuteReader();

                if (readerBP.Read())
                {
                    MaxProductionRuns = readerBP.GetInt32(0);
                }
                else
                {
                    // Assume wrecked bp
                    MaxProductionRuns = 3L;
                }

                readerBP.Close();
                readerBP = null;

            }

            MaxProductionRuns = MaxProductionRuns + DecryptorMod;
            // Set the num bps off of the calculated amount
            ReturnValue = (int)Math.Round(Math.Ceiling(SentRuns / (double)MaxProductionRuns));

            return ReturnValue;

        }

        // Adds item to shopping list
        private void btnAddBPMatstoShoppingList_Click(object sender, EventArgs e)
        {

            // Just add it to shopping list with options
            Public_Variables.AddToShoppingList(Public_Variables.SelectedBlueprint, chkBPBuildBuy.Checked, rbtnBPRawmatCopy.Checked, BPTabFacility.GetFacility(BPTabFacility.GetCurrentFacilityProductionType()), chkBPIgnoreInvention.Checked, chkBPIgnoreMinerals.Checked, chkBPIgnoreT1Item.Checked, rbtnBPCopyInvREMats.Checked);

            if (Public_Variables.TotalShoppingList.GetNumShoppingItems() > 0L)
            {
                // Add the final item and mark as items in list
                pnlShoppingList.Text = "Items in Shopping List";
                pnlShoppingList.ForeColor = Color.Red;
            }
            else
            {
                pnlShoppingList.Text = "No Items in Shopping List";
                pnlShoppingList.ForeColor = Color.Black;
            }

            // Refresh the data if it's open
            if (Public_Variables.frmShop.Visible)
            {
                Public_Variables.frmShop.RefreshLists();
            }

        }

        // Loads the previous blueprint 
        private void LoadPreviousBlueprint()
        {
            int argLocationID = CurrentBPHistoryIndex - 1;
            LoadBPfromHistory(ref argLocationID, "Backward");
        }

        // Loads the next blueprint if they used previous 
        private void LoadNextBlueprint()
        {
            int argLocationID = CurrentBPHistoryIndex + 1;
            LoadBPfromHistory(ref argLocationID, "Forward");
        }

        private void LoadBPfromHistory(ref int LocationID, string BPType)
        {

            if (BPHistory.Count > 0 & LocationID < BPHistory.Count & LocationID >= 0)
            {
                {
                    var withBlock = BPHistory[LocationID];
                    LoadingBPfromHistory = true;
                    PreviousBPfromHistory = true;
                    LoadBPfromEvent(withBlock.BPID, withBlock.BuildType, withBlock.Inputs, withBlock.SentFrom, withBlock.BuildFacility, withBlock.ComponentFacility, withBlock.CapComponentFacility, withBlock.InventionFacility, withBlock.CopyFacility, withBlock.IncludeTaxes, withBlock.BrokerFeeData, withBlock.MEValue, withBlock.TEValue, withBlock.SentRuns, withBlock.ManufacturingLines, withBlock.LabLines, withBlock.NumBPs, withBlock.AddlCosts, withBlock.PPU);
                }

                CurrentBPHistoryIndex = LocationID;

                UpdateBlueprintHistoryButtons();
            }
        }

        private void UpdateBlueprintHistoryButtons()
        {
            if (BPHistory.Count > 1)
            {
                if (CurrentBPHistoryIndex == 0)
                {
                    // Switch back to transparent until they go forward
                    btnBPBack.BackColor = Color.Transparent;
                }
                else
                {
                    btnBPBack.BackColor = Color.SteelBlue;
                }

                if (CurrentBPHistoryIndex == BPHistory.Count - 1)
                {
                    btnBPForward.BackColor = Color.Transparent;
                }
                else
                {
                    btnBPForward.BackColor = Color.SteelBlue;
                }
            }
            else
            {
                btnBPBack.BackColor = Color.Transparent;
                btnBPForward.BackColor = Color.Transparent;
            }
        }

        // Takes the facility and sets all the tool tip text based on the data it used
        private string GetUsageToolTipText(IndustryFacility SentFacility, bool IncludeTax)
        {
            // Set the usage tool tip data
            string TTString = "";

            TTString = TTString + "System Index = " + Strings.FormatPercent(SentFacility.CostIndex, 2) + " " + Constants.vbCrLf;
            if (IncludeTax)
            {
                TTString = TTString + "Facility Tax Rate = " + Strings.FormatPercent(SentFacility.TaxRate, 2) + " " + Constants.vbCrLf;
            }
            TTString = TTString + "Double-click for a list of facility usages";

            return TTString;

        }

        // Updates the cost index in the DB or adds it if it doesn't exist
        private void btnBPUpdateCostIndex_Click(object sender, EventArgs e)
        {
            // Check the data
            string Text = txtBPUpdateCostIndex.Text.Replace("%", "");
            var SelectedFacility = BPTabFacility.GetSelectedFacility();

            if (!string.IsNullOrEmpty(Text))
            {
                if (!Information.IsNumeric(Text))
                {
                    Interaction.MsgBox("Invalid Cost index value", Constants.vbExclamation, Application.ProductName);
                    txtBPUpdateCostIndex.Focus();
                    return;
                }
            }

            Application.UseWaitCursor = true;
            Application.DoEvents();

            string SQL;
            SQLiteDataReader rsCheck;
            string CostIndex = (Conversion.Val(txtBPUpdateCostIndex.Text.Replace("%", "")) / 100d).ToString();

            // Look up Solar System ID
            string SSName = Strings.Trim(Public_Variables.FormatDBString(SelectedFacility.SolarSystemName.Substring(0, Strings.InStr(SelectedFacility.SolarSystemName, "(") - 1)));
            string SSID = Public_Variables.GetSolarSystemID(SSName).ToString();
            string SelectedActivityID = Public_Variables.GetActivityID(SelectedFacility.Activity).ToString();

            SQL = "SELECT * FROM INDUSTRY_SYSTEMS_COST_INDICIES WHERE SOLAR_SYSTEM_ID = " + SSID + " ";
            SQL += "AND ACTIVITY_ID = " + SelectedActivityID;
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsCheck = Public_Variables.DBCommand.ExecuteReader();
            rsCheck.Read();

            // See if the Current facility data exists, and update it. If not, then insert a new record
            if (rsCheck.HasRows)
            {
                // Update
                SQL = "UPDATE INDUSTRY_SYSTEMS_COST_INDICIES SET COST_INDEX = " + CostIndex;
                SQL += " WHERE SOLAR_SYSTEM_ID = " + SSID + " AND ACTIVITY_ID = " + SelectedActivityID;
            }
            else
            {
                // Insert 
                SQL = "INSERT INTO INDUSTRY_SYSTEMS_COST_INDICIES VALUES (" + SSID + ",'" + SSName + "',";
                SQL += SelectedActivityID + ",'" + SelectedFacility.Activity + "'," + CostIndex + ")";
            }

            rsCheck.Close();

            Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

            // Reload all the facilities to get the change
            LoadFacilities();

            // Refresh the bp, which will reload the facility with the changes
            UpdateBPGrids(Public_Variables.SelectedBlueprint.GetTypeID(), Public_Variables.SelectedBlueprint.GetTechLevel(), false, Public_Variables.SelectedBlueprint.GetItemGroupID(), Public_Variables.SelectedBlueprint.GetItemCategoryID(), Public_Variables.SentFromLocation.BlueprintTab);

            btnBPUpdateCostIndex.Enabled = false;

            Application.UseWaitCursor = false;
            Application.DoEvents();
            Interaction.MsgBox("Index Updated", Constants.vbInformation, Application.ProductName);

        }

        // Allow update of the market price from clicking on the label
        private void lblBPMarketCost_Click(object sender, EventArgs e)
        {
            txtBPMarketPriceEdit.Size = lblBPMarketCost.Size;
            var p = lblBPMarketCost.Location;
            p.Y = lblBPMarketCost.Location.Y - 2; // move the text box up two pixels since it is larger than the label and looks funky
            txtBPMarketPriceEdit.Location = p;
            txtBPMarketPriceEdit.Text = lblBPMarketCost.Text;
            txtBPMarketPriceEdit.Visible = true;
            txtBPMarketPriceEdit.Focus();
        }

        #endregion

        #region Update Prices Tab

        #region Update Prices Tab User Object (Check boxes, Text, Buttons) Functions/Procedures 

        // Disables the forms and controls on update prices
        private void DisableUpdatePricesTab(bool Value)
        {
            // Disable tab
            gbRawMaterials.Enabled = !Value;
            gbManufacturedItems.Enabled = !Value;
            // gbTradeHubSystems.Enabled = Not Value
            gbPriceOptions.Enabled = !Value;
            txtPriceItemFilter.Enabled = !Value;
            lblItemFilter.Enabled = !Value;
            btnClearItemFilter.Enabled = !Value;
            chkPriceMaterialResearchEqPrices.Enabled = !Value;
            chkPriceManufacturedPrices.Enabled = !Value;
            btnToggleAllPriceItems.Enabled = !Value;
            btnDownloadPrices.Enabled = !Value;
            btnOpenMarketBrowser.Enabled = !Value;
            btnSaveUpdatePrices.Enabled = !Value;
            lstPricesView.Enabled = !Value;
            btnSavePricestoFile.Enabled = !Value;
            btnLoadPricesfromFile.Enabled = !Value;
        }

        // Checks or unchecks all the prices
        private void UpdateAllPrices()
        {
            if (RunUpdatePriceList)
            {
                // Don't update prices yet
                UpdateAllTechChecks = true;
                RunUpdatePriceList = false;

                Application.DoEvents();

                // Just update the prices based on the checks
                CheckAllManufacturedPrices();
                CheckAllRawPrices();

                // Good to go, update or clear
                RunUpdatePriceList = true;
                UpdateAllTechChecks = true;

                Application.DoEvents();

                if (chkPriceManufacturedPrices.Checked == false & chkPriceMaterialResearchEqPrices.Checked == false)
                {
                    lstPricesView.Items.Clear();
                    btnToggleAllPriceItems.Text = "Select All Items";
                }
                else
                {
                    if (chkPriceManufacturedPrices.Checked == true & chkPriceMaterialResearchEqPrices.Checked == true)
                    {
                        btnToggleAllPriceItems.Text = "Uncheck All Items";
                    }
                    else
                    {
                        btnToggleAllPriceItems.Text = "Select All Items";
                    }
                    UpdatePriceList();
                }
            }
        }

        // Checks or unchecks just the prices for raw material items
        private void CheckAllRawPrices()
        {
            bool BoolToggle = false;
            RunUpdatePriceList = false;

            // Check all item boxes and do not run updates
            if (chkPriceMaterialResearchEqPrices.Checked == true)
            {
                BoolToggle = true;
            }

            chkAdvancedProtectiveTechnology.Checked = BoolToggle;
            chkGas.Checked = BoolToggle;
            chkIceProducts.Checked = BoolToggle;
            chkMolecularForgingTools.Checked = BoolToggle;
            chkFactionMaterials.Checked = BoolToggle;
            chkNamedComponents.Checked = BoolToggle;
            chkMinerals.Checked = BoolToggle;
            chkPlanetary.Checked = BoolToggle;
            chkRawMaterials.Checked = BoolToggle;
            chkSalvage.Checked = BoolToggle;
            chkBPCs.Checked = BoolToggle;
            chkMisc.Checked = BoolToggle;

            chkAncientRelics.Checked = BoolToggle;
            chkDatacores.Checked = BoolToggle;
            chkDecryptors.Checked = BoolToggle;
            chkRDb.Checked = BoolToggle;

            chkAdvancedMats.Checked = BoolToggle;
            chkBoosterMats.Checked = BoolToggle;
            chkMolecularForgedMaterials.Checked = BoolToggle;
            chkPolymers.Checked = BoolToggle;
            chkProcessedMats.Checked = BoolToggle;
            chkRawMoonMats.Checked = BoolToggle;

            RunUpdatePriceList = true;

        }

        // Checks or unchecks just the prices for manufactured items
        private void CheckAllManufacturedPrices()
        {

            RunUpdatePriceList = false;

            bool BoolToggle = false;
            RunUpdatePriceList = false;

            // Check all item boxes and do not run updates
            if (chkPriceManufacturedPrices.Checked == true)
            {
                BoolToggle = true;
            }

            chkShips.Checked = BoolToggle;
            chkCharges.Checked = BoolToggle;
            chkModules.Checked = BoolToggle;
            chkDrones.Checked = BoolToggle;
            chkRigs.Checked = BoolToggle;
            chkSubsystems.Checked = BoolToggle;
            chkDeployables.Checked = BoolToggle;
            chkBoosters.Checked = BoolToggle;
            chkStructures.Checked = BoolToggle;
            chkStructureRigs.Checked = BoolToggle;
            chkCelestials.Checked = BoolToggle;
            chkStructureModules.Checked = BoolToggle;
            chkImplants.Checked = BoolToggle;

            chkCapT2Components.Checked = BoolToggle;
            chkComponents.Checked = BoolToggle;
            chkFuelBlocks.Checked = BoolToggle;
            chkProtectiveComponents.Checked = BoolToggle;
            chkRAM.Checked = BoolToggle;
            chkCapitalShipComponents.Checked = BoolToggle;
            chkStructureComponents.Checked = BoolToggle;
            chkSubsystemComponents.Checked = BoolToggle;

            RunUpdatePriceList = true;

        }

        private void chkPriceSelectManufacturedItems_CheckedChanged(object sender, EventArgs e)
        {

            CheckAllManufacturedPrices();

            if (chkPriceManufacturedPrices.Checked == false & chkPriceMaterialResearchEqPrices.Checked == false)
            {
                lstPricesView.Items.Clear();
                btnToggleAllPriceItems.Text = "Select All Items";
            }
            else if (chkPriceManufacturedPrices.Checked == true & chkPriceMaterialResearchEqPrices.Checked == true)
            {
                btnToggleAllPriceItems.Text = "Uncheck All Items";
            }
            else
            {
                btnToggleAllPriceItems.Text = "Select All Items";
            }

            if (PriceToggleButtonHit == false & !Public_Variables.FirstLoad)
            {
                UpdatePriceList();
            }

        }

        private void chkPriceRawMaterialPrices_CheckedChanged(object sender, EventArgs e)
        {

            CheckAllRawPrices();

            if (chkPriceManufacturedPrices.Checked == false & chkPriceMaterialResearchEqPrices.Checked == false)
            {
                lstPricesView.Items.Clear();
                btnToggleAllPriceItems.Text = "Select All Items";
            }
            else if (chkPriceManufacturedPrices.Checked == true & chkPriceMaterialResearchEqPrices.Checked == true)
            {
                btnToggleAllPriceItems.Text = "Uncheck All Items";
            }
            else
            {
                btnToggleAllPriceItems.Text = "Select All Items";
            }

            if (PriceToggleButtonHit == false & !Public_Variables.FirstLoad)
            {
                UpdatePriceList();
            }

        }

        // Toggles all selection checks on the prices tab
        private void btnToggleAllPriceItems_Click(object sender, EventArgs e)
        {

            RunUpdatePriceList = false;
            PriceToggleButtonHit = true;

            if (btnToggleAllPriceItems.Text == "Select All Items" & (chkPriceManufacturedPrices.Checked == false | chkPriceMaterialResearchEqPrices.Checked == false))
            {
                // Set the name, then uncheck all
                btnToggleAllPriceItems.Text = "Uncheck All Items";
                chkPriceMaterialResearchEqPrices.Checked = true;
                chkPriceManufacturedPrices.Checked = true;
            }
            else if (btnToggleAllPriceItems.Text == "Uncheck All Items" & chkPriceManufacturedPrices.Checked == true & chkPriceMaterialResearchEqPrices.Checked == true)
            {
                // Turn off all item checks
                btnToggleAllPriceItems.Text = "Select All Items";
                chkPriceMaterialResearchEqPrices.Checked = false;
                chkPriceManufacturedPrices.Checked = false;
            }

            RunUpdatePriceList = true;

            UpdateAllPrices();
            PriceToggleButtonHit = false;

        }

        // Updates the T1, T2 and T3 check boxes depending on item selections
        private void UpdateTechChecks()
        {
            bool T1 = false;
            bool T2 = false;
            bool T3 = false;
            bool Storyline = false;
            bool Navy = false;
            bool Pirate = false;

            bool ItemsSelected = false;
            int i;
            bool TechChecks = false;

            // For check all 
            if (!RunUpdatePriceList & UpdateAllTechChecks)
            {
                UpdateAllTechChecks = false;
                // Check all and leave
                var loopTo = TechCheckBoxes.Length - 1;
                for (i = 1; i <= loopTo; i++)
                {
                    TechCheckBoxes[i].Enabled = true;
                    // Check this one and leave
                    TechCheckBoxes[i].Checked = true;
                }
                return;
            }

            // Check each item checked and set the check boxes accordingly
            if (chkShips.Checked)
            {
                T1 = true;
                T2 = true;
                T3 = true;
                Navy = true;
                Pirate = true;
                ItemsSelected = true;
            }

            if (chkModules.Checked)
            {
                T1 = true;
                T2 = true;
                Navy = true;
                Storyline = true;
                ItemsSelected = true;
            }

            if (chkSubsystems.Checked)
            {
                T3 = true;
                ItemsSelected = true;
            }

            if (chkDrones.Checked)
            {
                T1 = true;
                T2 = true;
                ItemsSelected = true;
            }

            if (chkRigs.Checked)
            {
                T1 = true;
                T2 = true;
                ItemsSelected = true;
            }

            if (chkStructureRigs.Checked)
            {
                T1 = true;
                T2 = true;
                ItemsSelected = true;
            }

            if (chkStructures.Checked)
            {
                T1 = true;
                Pirate = true;
                ItemsSelected = true;
            }

            if (chkCharges.Checked)
            {
                T1 = true;
                T2 = true;
                ItemsSelected = true;
            }

            // If none are checked, then uncheck and un-enable all
            if (ItemsSelected)
            {

                // Enable the Checks
                if (T1)
                {
                    chkPricesT1.Enabled = true;
                }
                else
                {
                    chkPricesT1.Enabled = false;
                }

                if (T2)
                {
                    chkPricesT2.Enabled = true;
                }
                else
                {
                    chkPricesT2.Enabled = false;
                }

                if (T3)
                {
                    chkPricesT3.Enabled = true;
                }
                else
                {
                    chkPricesT3.Enabled = false;
                }

                if (Storyline)
                {
                    chkPricesT4.Enabled = true;
                }
                else
                {
                    chkPricesT4.Enabled = false;
                }

                if (Navy)
                {
                    chkPricesT5.Enabled = true;
                }
                else
                {
                    chkPricesT5.Enabled = false;
                }

                if (Pirate)
                {
                    chkPricesT6.Enabled = true;
                }
                else
                {
                    chkPricesT6.Enabled = false;
                }

                // Make sure we have at le=t one checked
                var loopTo1 = TechCheckBoxes.Length - 1;
                for (i = 1; i <= loopTo1; i++)
                {
                    if (TechCheckBoxes[i].Enabled)
                    {
                        if (TechCheckBoxes[i].Checked)
                        {
                            TechChecks = true;
                            // Found one enabled and checked, so leave for
                            break;
                        }
                    }
                }

                if (!TechChecks)
                {
                    // Need to check at le=t one
                    var loopTo2 = TechCheckBoxes.Length - 1;
                    for (i = 1; i <= loopTo2; i++)
                    {
                        if (TechCheckBoxes[i].Enabled)
                        {
                            // Check this one and leave
                            TechCheckBoxes[i].Checked = true;
                        }
                    }
                }
            }

            else
            {
                chkPricesT1.Enabled = false;
                chkPricesT2.Enabled = false;
                chkPricesT3.Enabled = false;
                chkPricesT4.Enabled = false;
                chkPricesT5.Enabled = false;
                chkPricesT6.Enabled = false;
            }

            // Save status of the Tech check boxes
            PriceCheckT1Enabled = chkPricesT1.Enabled;
            PriceCheckT2Enabled = chkPricesT2.Enabled;
            PriceCheckT3Enabled = chkPricesT3.Enabled;
            PriceCheckT4Enabled = chkPricesT4.Enabled;
            PriceCheckT5Enabled = chkPricesT5.Enabled;
            PriceCheckT6Enabled = chkPricesT6.Enabled;

        }

        // Clears all system's that may be checked including resetting the system combo
        private void ClearTradeHubSystems(bool ResetSystemCombo = true)
        {
            int i;

            if (!IgnoreSystemCheckUpdates)
            {
                var loopTo = SystemCheckBoxes.Length - 1;
                for (i = 1; i <= loopTo; i++)
                    if (SystemCheckBoxes[i] != null) { SystemCheckBoxes[i].Checked = false; }
            }
        }

        private void cmbPriceShipTypes_DropDown(object sender, EventArgs e)
        {
            if (FirstPriceShipTypesComboLoad)
            {
                LoadPriceShipTypes();
                FirstPriceShipTypesComboLoad = false;
            }
        }

        private void cmbPriceChargeTypes_DropDown(object sender, EventArgs e)
        {
            if (FirstPriceChargeTypesComboLoad)
            {
                LoadPriceChargeTypes();
                FirstPriceChargeTypesComboLoad = false;
            }
        }

        private void txtPriceItemFilter_KeyDown(object sender, KeyEventArgs e)
        {
            // Call ProcessCutCopyPasteSelect(txtPriceItemFilter, e)
            if (e.KeyCode == Keys.Enter)
            {
                UpdatePriceList();
            }
        }

        // Checks all item check's to see if there is one checked. True if one or more checked, False if not
        private bool ItemsSelected()
        {

            // If the prices list doesnt' have any items in it, nothing to update so nothing checked
            if (lstPricesView.Items.Count != 0)
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        private void PriceSourceSelection_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnPriceSourceCCPData.Checked)
            {
                btnAddStructureIDs.Visible = true;
                btnViewSavedStructures.Visible = true;
            }
            else
            {
                btnAddStructureIDs.Visible = false;
                btnViewSavedStructures.Visible = false;
            }
        }

        private void chkPricesTech_Click(object sender, EventArgs e)
        {
            if (RefreshList)
            {
                UpdatePriceList();
            }
        }

        private void ProcessnonTechItemChecks_CheckedChanged(object sender, EventArgs e)
        {
            UpdatePriceList();
        }

        private void chkTechManufacturedItems_CheckedChanged(object sender, EventArgs e)
        {
            RefreshList = false;
            UpdateTechChecks();
            UpdatePriceList();
            RefreshList = true;
        }

        private void chkShips_CheckedChanged(object sender, EventArgs e)
        {

            if (chkShips.Checked == true)
            {
                cmbPriceShipTypes.Enabled = true;
            }
            else if (chkShips.Checked == false)
            {
                cmbPriceShipTypes.Enabled = false;
            }

            RefreshList = false;
            UpdateTechChecks();
            UpdatePriceList();
            RefreshList = true;

        }

        private void chkCharges_CheckedChanged(object sender, EventArgs e)
        {

            if (chkCharges.Checked == true)
            {
                cmbPriceChargeTypes.Enabled = true;
            }
            else if (chkCharges.Checked == false)
            {
                cmbPriceChargeTypes.Enabled = false;
            }

            RefreshList = false;
            UpdateTechChecks();
            UpdatePriceList();
            RefreshList = true;

        }

        private void chkSystems1_CheckedChanged(object sender, EventArgs e)
        {
            if (!UpdatingCheck)
            {
                SyncPriceCheckBoxes(Conversions.ToInteger(((CheckBox)sender).Name.ToString().Substring(Strings.Len(((CheckBox)sender).Name.ToString()) - 1)));
            }
        }

        private void SyncPriceCheckBoxes(int TriggerIndex)
        {
            int i;

            if (!Public_Variables.FirstLoad)
            {
                UpdatingCheck = true;

                // Allow them to toggle both but if either Jita or Perimeter selected, clear all others
                if (TriggerIndex == 1 | TriggerIndex == 6)
                {
                    // clear the others except 1 or 6
                    SystemCheckBoxes[2].Checked = false;
                    SystemCheckBoxes[3].Checked = false;
                    SystemCheckBoxes[4].Checked = false;
                    SystemCheckBoxes[5].Checked = false;
                }
                // Trigger Index is a box that was checked on or off
                else if (SystemCheckBoxes[TriggerIndex].Checked == true)
                {
                    // Uncheck all other systems and regions
                    // Clear all the boxes
                    var loopTo = SystemCheckBoxes.Length - 1;
                    for (i = 1; i <= loopTo; i++)
                    {
                        if (i != TriggerIndex)
                        {
                            SystemCheckBoxes[i].Checked = false;
                        }
                    }
                }

                cmbPriceRegions.Text = Public_Variables.DefaultRegionPriceCombo;
                cmbPriceSystems.Text = Public_Variables.DefaultSystemPriceCombo;

                PreviousPriceRegion = "";

                UpdatingCheck = false;

            }

        }

        private void cmbPriceSystems_DropDownClosed(object sender, EventArgs e)
        {
            // If it closes up, re-enable autocomplete
            cmbPriceSystems.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        }

        private void cmbPriceSystems_GotFocus(object sender, EventArgs e)
        {
            cmbPriceSystems.SelectAll();
        }

        private void cmbPriceShipTypes_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!FirstPriceShipTypesComboLoad)
            {
                UpdatePriceList();
            }
        }

        private void cmbPriceChargeTypes_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!FirstPriceChargeTypesComboLoad)
            {
                UpdatePriceList();
            }
        }

        private void lstPricesView_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            ListView argRefListView = lstPricesView;
            Public_Variables.ListViewColumnSorter(e.Column, ref argRefListView, ref UpdatePricesColumnClicked, ref UpdatePricesColumnSortType);
        }

        private void rbtnPriceSettingPriceProfile_CheckedChanged(object sender, EventArgs e)
        {
            // set in init, and use this to toggle
            if (rbtnPriceSettingPriceProfile.Checked)
            {
                gbTradeHubSystems.Enabled = false;
                gbRegionSystemPrice.Enabled = false;
                gbPriceProfile.Enabled = true;
                // Disable other buttons and lists
                cmbRawMatsSplitPrices.Enabled = false;
                lblRawMatsSplitPrices.Enabled = false;
                cmbItemsSplitPrices.Enabled = false;
                lblItemsSplitPrices.Enabled = false;
                lblRawPriceModifier.Enabled = false;
                lblItemsPriceModifier.Enabled = false;
                txtRawPriceModifier.Enabled = false;
                txtItemsPriceModifier.Enabled = false;
            }
            else
            {
                gbTradeHubSystems.Enabled = true;
                gbRegionSystemPrice.Enabled = true;
                gbPriceProfile.Enabled = false;
                // Enable other buttons and lists
                cmbRawMatsSplitPrices.Enabled = true;
                lblRawMatsSplitPrices.Enabled = true;
                cmbItemsSplitPrices.Enabled = true;
                lblItemsSplitPrices.Enabled = true;
                lblRawPriceModifier.Enabled = true;
                lblItemsPriceModifier.Enabled = true;
                txtRawPriceModifier.Enabled = true;
                txtItemsPriceModifier.Enabled = true;
            }
        }

        private void txtRawPriceModifier_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = Public_Variables.CheckPercentCharEntry(e, txtRawPriceModifier);
        }

        private void txtItemsPriceModifier_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = Public_Variables.CheckPercentCharEntry(e, txtItemsPriceModifier);
        }

        private void txtRawPriceModifier_LostFocus(object sender, EventArgs e)
        {
            txtRawPriceModifier.Text = FormatPriceModifier(txtRawPriceModifier);
        }

        private void txtItemsPriceModifier_LostFocus(object sender, EventArgs e)
        {
            txtItemsPriceModifier.Text = FormatPriceModifier(txtItemsPriceModifier);
        }

        private string FormatPriceModifier(TextBox PricetxtBox)
        {
            if (string.IsNullOrEmpty(Strings.Trim(PricetxtBox.Text)))
            {
                return "0.0%";
            }
            else
            {
                return Strings.FormatPercent(Conversions.ToDouble(PricetxtBox.Text.Replace("%", "")) / 100d, 1);
            }
        }

        private void txtPPDefaultsPriceMod_LostFocus(object sender, EventArgs e)
        {
            txtPPDefaultsPriceMod.Text = FormatPriceModifier(txtPPDefaultsPriceMod);
        }

        private void txtPPDefaultsPriceMod_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = Public_Variables.CheckPercentCharEntry(e, txtPPDefaultsPriceMod);
        }

        private void cmbPPDefaultsRegion_SelectedIndexChanged(object sender, EventArgs e)
        {
            if ((PreviousPPRegion ?? "") != (cmbPPDefaultsRegion.Text ?? ""))
            {
                PPSystemsLoaded = false;
                cmbPPDefaultsSystem.Text = Public_Variables.AllSystems;
                PreviousPPRegion = cmbPPDefaultsRegion.Text;
            }
        }

        private void cmbPPDefaultsRegion_DropDown(object sender, EventArgs e)
        {
            if (!PPRegionsLoaded)
            {
                var argRegionCombo = cmbPPDefaultsRegion;
                Public_Variables.LoadRegionCombo(ref argRegionCombo, cmbPPDefaultsRegion.Text);
                cmbPPDefaultsRegion = argRegionCombo;
                PPRegionsLoaded = true;
            }
        }

        private void cmbPPDefaultsSystem_DropDown(object sender, EventArgs e)
        {
            if (!PPSystemsLoaded)
            {
                var argSystemCombo = cmbPPDefaultsSystem;
                LoadSystemCombo(ref argSystemCombo, cmbPPDefaultsRegion.Text, Public_Variables.AllSystems);
                cmbPPDefaultsSystem = argSystemCombo;
                PPSystemsLoaded = true;
            }
        }

        private void cmbPriceRegion_DropDown(object sender, EventArgs e)
        {
            if (!PriceRegionsLoaded)
            {
                var argRegionCombo = cmbPriceRegions;
                Public_Variables.LoadRegionCombo(ref argRegionCombo, cmbPriceRegions.Text);
                cmbPriceRegions = argRegionCombo;
                PriceRegionsLoaded = true;
            }
        }

        private void cmbPriceRegion_SelectedIndexChanged(object sender, EventArgs e)
        {
            if ((PreviousPriceRegion ?? "") != (cmbPriceRegions.Text ?? ""))
            {
                PriceSystemsLoaded = false;
                PreviousPriceRegion = cmbPriceRegions.Text;
                UpdatingCheck = true;
                ClearTradeHubSystems(); // clear the checks for trade hubs
                UpdatingCheck = false;
                // Set up systems combo
                var argSystemCombo = cmbPriceSystems;
                LoadSystemCombo(ref argSystemCombo, cmbPriceRegions.Text, Public_Variables.AllSystems);
                cmbPriceSystems = argSystemCombo;
                PriceSystemsLoaded = true;
            }
        }

        private void cmbPriceSystems_DropDown(object sender, EventArgs e)
        {
            if (!PriceSystemsLoaded)
            {
                var argSystemCombo = cmbPriceSystems;
                LoadSystemCombo(ref argSystemCombo, cmbPriceRegions.Text, Public_Variables.AllSystems);
                cmbPriceSystems = argSystemCombo;
                PriceSystemsLoaded = true;
            }
        }

        private void cmbPriceSystems_SelectedIndexChanged(object sender, EventArgs e)
        {
            if ((cmbPriceSystems.Text ?? "") != Public_Variables.DefaultSystemPriceCombo)
            {
                ClearTradeHubSystems(false);
            }
        }

        private void btnPPUpdateDefaults_Click(object sender, EventArgs e)
        {

            // Do some error checking first
            if (string.IsNullOrEmpty(Strings.Trim(cmbPPDefaultsRegion.Text)) | !cmbPPDefaultsRegion.Items.Contains(cmbPPDefaultsRegion.Text))
            {
                Interaction.MsgBox("Invalid Default Region", Constants.vbExclamation, Application.ProductName);
                cmbPPDefaultsRegion.Focus();
                return;
            }

            if (string.IsNullOrEmpty(Strings.Trim(cmbPPDefaultsSystem.Text)) | !cmbPPDefaultsSystem.Items.Contains(cmbPPDefaultsSystem.Text))
            {
                Interaction.MsgBox("Invalid Default System", Constants.vbExclamation, Application.ProductName);
                cmbPPDefaultsSystem.Focus();
                return;
            }

            if (string.IsNullOrEmpty(Strings.Trim(txtPPDefaultsPriceMod.Text)))
            {
                Interaction.MsgBox("Invalid Default Price Modifier", Constants.vbExclamation, Application.ProductName);
                txtPPDefaultsPriceMod.Focus();
                return;
            }

            Public_Variables.EVEDB.BeginSQLiteTransaction();

            // Delete anything loaded for this character first, since all the defaults will be updated
            Public_Variables.EVEDB.ExecuteNonQuerySQL("DELETE FROM PRICE_PROFILES WHERE ID = " + Public_Variables.SelectedCharacter.ID.ToString());

            string SQL = "UPDATE PRICE_PROFILES SET PRICE_TYPE = '" + Strings.Trim(cmbPPDefaultsPriceType.Text) + "', REGION_NAME = '" + Public_Variables.FormatDBString(cmbPPDefaultsRegion.Text) + "', ";
            SQL += "SOLAR_SYSTEM_NAME = '" + Public_Variables.FormatDBString(cmbPPDefaultsSystem.Text) + "', PRICE_MODIFIER = " + (Conversions.ToDouble(txtPPDefaultsPriceMod.Text.Replace("%", "")) / 100d).ToString() + " ";
            SQL += "WHERE ID = 0 AND RAW_MATERIAL = ";

            if (tabPriceProfile.SelectedTab.TabIndex == 0)
            {
                SQL += "1";
            }
            else
            {
                SQL += "0";
            }

            Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

            Public_Variables.EVEDB.CommitSQLiteTransaction();

            // Refresh the grids
            LoadPriceProfileGrids();

            Interaction.MsgBox("Defaults set", Constants.vbInformation, Application.ProductName);

        }

        #endregion

        // Initalizes all the prices tab boxes, etc
        private void InitUpdatePricesTab()
        {
            string TempRegion = "";

            FirstPriceChargeTypesComboLoad = true;
            FirstPriceShipTypesComboLoad = true;
            RefreshList = false;

            ClearTradeHubSystems();

            txtPriceItemFilter.Text = "";

            {
                ref var withBlock = ref SettingsVariables.UserUpdatePricesTabSettings;
                chkPriceMaterialResearchEqPrices.Checked = withBlock.AllRawMats;
                RunUpdatePriceList = false; // If the settings trigger an update, we don't want to update the prices
                chkAdvancedProtectiveTechnology.Checked = withBlock.AdvancedProtectiveTechnology;
                chkGas.Checked = withBlock.Gas;
                chkIceProducts.Checked = withBlock.IceProducts;
                chkMolecularForgingTools.Checked = withBlock.MolecularForgingTools;
                chkFactionMaterials.Checked = withBlock.FactionMaterials;
                chkNamedComponents.Checked = withBlock.NamedComponents;
                chkMinerals.Checked = withBlock.Minerals;
                chkPlanetary.Checked = withBlock.Planetary;
                chkRawMaterials.Checked = withBlock.RawMaterials;
                chkSalvage.Checked = withBlock.Salvage;
                chkMisc.Checked = withBlock.Misc;
                chkBPCs.Checked = withBlock.BPCs;

                chkAncientRelics.Checked = withBlock.AncientRelics;
                chkDatacores.Checked = withBlock.Datacores;
                chkDecryptors.Checked = withBlock.Decryptors;
                chkRDb.Checked = withBlock.RDB;

                chkAdvancedMats.Checked = withBlock.AdvancedMoonMats;
                chkBoosterMats.Checked = withBlock.BoosterMats;
                chkMolecularForgedMaterials.Checked = withBlock.MolecularForgedMats;
                chkPolymers.Checked = withBlock.Polymers;
                chkProcessedMats.Checked = withBlock.ProcessedMoonMats;
                chkRawMoonMats.Checked = withBlock.RawMoonMats;

                chkPriceManufacturedPrices.Checked = withBlock.AllManufacturedItems;
                RunUpdatePriceList = false; // If the settings trigger an update, we don't want to update the prices
                chkShips.Checked = withBlock.Ships;
                chkCharges.Checked = withBlock.Charges;
                chkModules.Checked = withBlock.Modules;
                chkDrones.Checked = withBlock.Drones;
                chkRigs.Checked = withBlock.Rigs;
                chkSubsystems.Checked = withBlock.Subsystems;
                chkDeployables.Checked = withBlock.Deployables;
                chkBoosters.Checked = withBlock.Boosters;
                chkStructures.Checked = withBlock.Structures;
                chkStructureRigs.Checked = withBlock.StructureRigs;
                chkCelestials.Checked = withBlock.Celestials;
                chkStructureModules.Checked = withBlock.StructureModules;
                chkImplants.Checked = withBlock.Implants;

                chkCapT2Components.Checked = withBlock.AdvancedCapComponents;
                chkComponents.Checked = withBlock.AdvancedComponents;
                chkFuelBlocks.Checked = withBlock.FuelBlocks;
                chkProtectiveComponents.Checked = withBlock.ProtectiveComponents;
                chkRAM.Checked = withBlock.RAM;
                chkNoBuildItems.Checked = withBlock.NoBuildItems;
                chkCapitalShipComponents.Checked = withBlock.CapitalShipComponents;
                chkStructureComponents.Checked = withBlock.StructureComponents;
                chkSubsystemComponents.Checked = withBlock.SubsystemComponents;

                chkPricesT1.Checked = withBlock.T1;
                chkPricesT2.Checked = withBlock.T2;
                chkPricesT3.Checked = withBlock.T3;
                chkPricesT4.Checked = withBlock.Storyline;
                chkPricesT5.Checked = withBlock.Faction;
                chkPricesT6.Checked = withBlock.Pirate;

                cmbItemsSplitPrices.Text = withBlock.ItemsCombo;
                cmbRawMatsSplitPrices.Text = withBlock.RawMatsCombo;
                txtRawPriceModifier.Text = Strings.FormatPercent(withBlock.RawPriceModifier, 1);
                txtItemsPriceModifier.Text = Strings.FormatPercent(withBlock.ItemsPriceModifier, 1);

                switch (withBlock.PriceDataSource)
                {
                    case DataSource.CCP:
                        {
                            rbtnPriceSourceCCPData.Checked = true;
                            break;
                        }
                    case DataSource.EVEMarketer: // Just check Fuzzworks if marketer setting, Marketer is offline
                        {
                            rbtnPriceSourceFW.Checked = true;
                            break;
                        }
                    case DataSource.Fuzzworks:
                        {
                            rbtnPriceSourceFW.Checked = true;
                            break;
                        }
                }

                if (withBlock.UsePriceProfile)
                {
                    rbtnPriceSettingPriceProfile.Checked = true;
                    gbTradeHubSystems.Enabled = false;
                    gbRegionSystemPrice.Enabled = false;
                    gbPriceProfile.Enabled = true;
                    // Disable other buttons and lists
                    cmbRawMatsSplitPrices.Enabled = false;
                    lblRawMatsSplitPrices.Enabled = false;
                    cmbItemsSplitPrices.Enabled = false;
                    lblItemsSplitPrices.Enabled = false;
                    lblRawPriceModifier.Enabled = false;
                    lblItemsPriceModifier.Enabled = false;
                    txtRawPriceModifier.Enabled = false;
                    txtItemsPriceModifier.Enabled = false;
                }
                else
                {
                    rbtnPriceSettingSingleSelect.Checked = true;
                    gbTradeHubSystems.Enabled = true;
                    gbRegionSystemPrice.Enabled = true;
                    gbPriceProfile.Enabled = false;
                    // Enable other buttons and lists
                    cmbRawMatsSplitPrices.Enabled = true;
                    lblRawMatsSplitPrices.Enabled = true;
                    cmbItemsSplitPrices.Enabled = true;
                    lblItemsSplitPrices.Enabled = true;
                    lblRawPriceModifier.Enabled = true;
                    lblItemsPriceModifier.Enabled = true;
                    txtRawPriceModifier.Enabled = true;
                    txtItemsPriceModifier.Enabled = true;
                }

                tabPriceProfile.SelectedTab = tabPriceProfile.TabPages[0];

                // Set the defaults for the default price profiles
                cmbPPDefaultsPriceType.Text = withBlock.PPRawPriceType;
                // First load the regions combo, then set the default region
                PreviousPPRegion = withBlock.PPRawRegion;
                var argRegionCombo = cmbPPDefaultsRegion;
                Public_Variables.LoadRegionCombo(ref argRegionCombo, withBlock.PPRawRegion);
                cmbPPDefaultsRegion = argRegionCombo;
                // Now that we have the default region, load up the systems based on that
                var argSystemCombo = cmbPPDefaultsSystem;
                LoadSystemCombo(ref argSystemCombo, withBlock.PPRawRegion, withBlock.PPRawSystem);
                cmbPPDefaultsSystem = argSystemCombo;
                txtPPDefaultsPriceMod.Text = Strings.FormatPercent(withBlock.PPRawPriceMod, 1);
                PPSystemsLoaded = false;

            }

            RunUpdatePriceList = true;
            RefreshList = true;

            // Disable cancel
            btnCancelUpdate.Enabled = false;

            // Set system/region 
            if (SettingsVariables.UserUpdatePricesTabSettings.SelectedRegion == "0")
            {
                // They set only the trade hubs
                switch (SettingsVariables.UserUpdatePricesTabSettings.SelectedSystem ?? "")
                {
                    case "Jita":
                        {
                            chkSystems1.Checked = true;
                            break;
                        }
                    case "Perimeter":
                        {
                            chkSystems6.Checked = true;
                            break;
                        }
                    case "Amarr":
                        {
                            chkSystems2.Checked = true;
                            break;
                        }
                    case "Dodixie":
                        {
                            chkSystems3.Checked = true;
                            break;
                        }
                    case "Rens":
                        {
                            chkSystems4.Checked = true;
                            break;
                        }
                    case "Hek":
                        {
                            chkSystems5.Checked = true;
                            break;
                        }
                    case "JitaPerimeter":
                    case "PerimeterJita":
                        {
                            chkSystems1.Checked = true;
                            chkSystems6.Checked = true;
                            break;
                        }
                }
                // Set these to default
                cmbPriceRegions.Text = Public_Variables.DefaultRegionPriceCombo;
                cmbPriceSystems.Text = Public_Variables.DefaultSystemPriceCombo;
            }

            else // They set a region and/or system
            {
                cmbPriceRegions.Text = SettingsVariables.UserUpdatePricesTabSettings.SelectedRegion;
                // Preload the systems combo
                string SelectedSystem;
                if ((cmbPriceRegions.Text ?? "") != Public_Variables.DefaultRegionPriceCombo)
                {
                    SelectedSystem = SettingsVariables.UserUpdatePricesTabSettings.SelectedSystem;
                }
                else
                {
                    SelectedSystem = Public_Variables.DefaultSystemPriceCombo;
                }
                var argSystemCombo1 = cmbPriceSystems;
                LoadSystemCombo(ref argSystemCombo1, cmbPriceRegions.Text, SelectedSystem);
                cmbPriceSystems = argSystemCombo1;
            }

            UpdatePricesColumnClicked = SettingsVariables.UserUpdatePricesTabSettings.ColumnSort;
            if (SettingsVariables.UserUpdatePricesTabSettings.ColumnSortType == "Ascending")
            {
                UpdatePricesColumnSortType = SortOrder.Ascending;
            }
            else
            {
                UpdatePricesColumnSortType = SortOrder.Descending;
            }

            // Load up the price profile grids
            LoadPriceProfileGrids();

            // Refresh the prices
            UpdatePriceList();

        }

        // Save the settings
        private void btnSaveUpdatePrices_Click(object sender, EventArgs e)
        {
            int i;
            UpdatePriceTabSettings TempSettings = default;
            var TempRegions = new List<string>();

            bool RegionChecked = false;
            bool SystemChecked = false;
            string SearchSystem = "";

            // Make sure they have at least one region checked first
            if ((cmbPriceRegions.Text ?? "") != Public_Variables.DefaultRegionPriceCombo)
            {
                RegionChecked = true;
            }

            // Check systems too
            var loopTo = SystemCheckBoxes.Length - 1;
            for (i = 1; i <= loopTo; i++)
            {
                if (SystemCheckBoxes[i].Checked == true)
                {
                    // Save the checked system (can only be one)
                    SearchSystem = SystemCheckBoxes[i].Text;
                    SystemChecked = true;
                    break;
                }
            }

            if (!RegionChecked & !SystemChecked & !rbtnPriceSettingPriceProfile.Checked)
            {
                Interaction.MsgBox("Must Choose a Region or System", MsgBoxStyle.Exclamation, Name);
                return;
            }

            if (!ItemsSelected())
            {
                Interaction.MsgBox("Must Choose at least one Item type", MsgBoxStyle.Exclamation, Name);
                return;
            }

            TempSettings.ItemsCombo = cmbItemsSplitPrices.Text;
            TempSettings.RawMatsCombo = cmbRawMatsSplitPrices.Text;

            TempSettings.RawPriceModifier = Conversions.ToDouble(txtRawPriceModifier.Text.Replace("%", "")) / 100d;
            TempSettings.ItemsPriceModifier = Conversions.ToDouble(txtItemsPriceModifier.Text.Replace("%", "")) / 100d;

            // Search for a set system first
            TempSettings.SelectedSystem = "";
            if ((cmbPriceSystems.Text ?? "") != Public_Variables.DefaultSystemPriceCombo & (cmbPriceSystems.Text ?? "") != Public_Variables.AllSystems)
            {
                TempSettings.SelectedSystem = cmbPriceSystems.Text;
            }
            else if ((cmbPriceSystems.Text ?? "") == Public_Variables.AllSystems)
            {
                TempSettings.SelectedSystem = Public_Variables.AllSystems;
            }
            else
            {
                var loopTo1 = SystemCheckBoxes.Count() - 1;
                for (i = 1; i <= loopTo1; i++)
                {
                    if (SystemCheckBoxes[i].Checked)
                    {
                        // Save it
                        TempSettings.SelectedSystem += SystemCheckBoxes[i].Text;
                    }
                }
            }

            // If no system found, then region
            TempSettings.SelectedRegion = "0"; // Save something we can check so the default not loaded
            if ((cmbPriceRegions.Text ?? "") != Public_Variables.DefaultRegionPriceCombo)
            {
                TempSettings.SelectedRegion = cmbPriceRegions.Text;
            }

            // Raw items
            // Manufactured Items
            TempSettings.AllRawMats = chkPriceMaterialResearchEqPrices.Checked;

            TempSettings.AdvancedProtectiveTechnology = chkAdvancedProtectiveTechnology.Checked;
            TempSettings.Gas = chkGas.Checked;
            TempSettings.IceProducts = chkIceProducts.Checked;
            TempSettings.MolecularForgingTools = chkMolecularForgingTools.Checked;
            TempSettings.FactionMaterials = chkFactionMaterials.Checked;
            TempSettings.NamedComponents = chkNamedComponents.Checked;
            TempSettings.Minerals = chkMinerals.Checked;
            TempSettings.Planetary = chkPlanetary.Checked;
            TempSettings.RawMaterials = chkRawMaterials.Checked;
            TempSettings.Salvage = chkSalvage.Checked;
            TempSettings.Misc = chkMisc.Checked;
            TempSettings.BPCs = chkBPCs.Checked;

            TempSettings.AncientRelics = chkAncientRelics.Checked;
            TempSettings.Datacores = chkDatacores.Checked;
            TempSettings.Decryptors = chkDecryptors.Checked;
            TempSettings.RDB = chkRDb.Checked;

            TempSettings.AdvancedMoonMats = chkAdvancedMats.Checked;
            TempSettings.BoosterMats = chkBoosterMats.Checked;
            TempSettings.MolecularForgedMats = chkMolecularForgedMaterials.Checked;
            TempSettings.Polymers = chkPolymers.Checked;
            TempSettings.ProcessedMoonMats = chkProcessedMats.Checked;
            TempSettings.RawMoonMats = chkRawMoonMats.Checked;

            TempSettings.AllManufacturedItems = chkPriceManufacturedPrices.Checked;

            TempSettings.Ships = chkShips.Checked;
            TempSettings.Charges = chkCharges.Checked;
            TempSettings.Modules = chkModules.Checked;
            TempSettings.Drones = chkDrones.Checked;
            TempSettings.Rigs = chkRigs.Checked;
            TempSettings.Subsystems = chkSubsystems.Checked;
            TempSettings.Deployables = chkDeployables.Checked;
            TempSettings.Boosters = chkBoosters.Checked;
            TempSettings.Structures = chkStructures.Checked;
            TempSettings.StructureRigs = chkStructureRigs.Checked;
            TempSettings.Celestials = chkCelestials.Checked;
            TempSettings.StructureModules = chkStructureModules.Checked;
            TempSettings.Implants = chkImplants.Checked;

            TempSettings.AdvancedCapComponents = chkCapT2Components.Checked;
            TempSettings.AdvancedComponents = chkComponents.Checked;
            TempSettings.FuelBlocks = chkFuelBlocks.Checked;
            TempSettings.ProtectiveComponents = chkProtectiveComponents.Checked;
            TempSettings.RAM = chkRAM.Checked;
            TempSettings.NoBuildItems = chkNoBuildItems.Checked;
            TempSettings.CapitalShipComponents = chkCapitalShipComponents.Checked;
            TempSettings.StructureComponents = chkStructureComponents.Checked;
            TempSettings.SubsystemComponents = chkSubsystemComponents.Checked;

            TempSettings.T1 = chkPricesT1.Checked;
            TempSettings.T2 = chkPricesT2.Checked;
            TempSettings.T3 = chkPricesT3.Checked;
            TempSettings.Storyline = chkPricesT4.Checked;
            TempSettings.Faction = chkPricesT5.Checked;
            TempSettings.Pirate = chkPricesT6.Checked;

            if (rbtnPriceSourceCCPData.Checked)
            {
                TempSettings.PriceDataSource = DataSource.CCP;
            }
            else if (rbtnPriceSourceEM.Checked)
            {
                TempSettings.PriceDataSource = DataSource.Fuzzworks;
            }
            else if (rbtnPriceSourceFW.Checked)
            {
                TempSettings.PriceDataSource = DataSource.Fuzzworks;
            }

            if (rbtnPriceSettingPriceProfile.Checked)
            {
                TempSettings.UsePriceProfile = true;
            }
            else
            {
                TempSettings.UsePriceProfile = false;
            }

            // Price profile defaults
            if (tabPriceProfile.SelectedTab.TabIndex == 0)
            {
                TempSettings.PPRawPriceType = cmbPPDefaultsPriceType.Text;
                TempSettings.PPRawRegion = cmbPPDefaultsRegion.Text;
                TempSettings.PPRawSystem = cmbPPDefaultsSystem.Text;
                TempSettings.PPRawPriceMod = Conversions.ToDouble(txtPPDefaultsPriceMod.Text.Replace("%", "")) / 100d;
                // Save the current item settings too
                TempSettings.PPItemsPriceType = SettingsVariables.UserUpdatePricesTabSettings.PPItemsPriceType;
                TempSettings.PPItemsRegion = SettingsVariables.UserUpdatePricesTabSettings.PPItemsRegion;
                TempSettings.PPItemsSystem = SettingsVariables.UserUpdatePricesTabSettings.PPItemsSystem;
                TempSettings.PPItemsPriceMod = SettingsVariables.UserUpdatePricesTabSettings.PPItemsPriceMod;
            }
            else
            {
                TempSettings.PPItemsPriceType = cmbPPDefaultsPriceType.Text;
                TempSettings.PPItemsRegion = cmbPPDefaultsRegion.Text;
                TempSettings.PPItemsSystem = cmbPPDefaultsSystem.Text;
                TempSettings.PPItemsPriceMod = Conversions.ToDouble(txtPPDefaultsPriceMod.Text.Replace("%", "")) / 100d;
                // Save the current raw settings too
                TempSettings.PPRawPriceType = SettingsVariables.UserUpdatePricesTabSettings.PPRawPriceType;
                TempSettings.PPRawRegion = SettingsVariables.UserUpdatePricesTabSettings.PPRawRegion;
                TempSettings.PPRawSystem = SettingsVariables.UserUpdatePricesTabSettings.PPRawSystem;
                TempSettings.PPRawPriceMod = SettingsVariables.UserUpdatePricesTabSettings.PPRawPriceMod;
            }

            TempSettings.ColumnSort = UpdatePricesColumnClicked;

            if (UpdatePricesColumnSortType == SortOrder.Ascending)
            {
                TempSettings.ColumnSortType = "Ascending";
            }
            else
            {
                TempSettings.ColumnSortType = "Descending";
            }

            // Save the data in the XML file
            SettingsVariables.AllSettings.SaveUpdatePricesSettings(TempSettings);

            // Save the data to the local variable
            SettingsVariables.UserUpdatePricesTabSettings = TempSettings;

            Interaction.MsgBox("Update Prices Settings Saved", Constants.vbInformation, Application.ProductName);
            btnDownloadPrices.Focus();
            Application.UseWaitCursor = false;

        }

        // If we change tabs, save the previous tab info in the settings and load the selected tab
        private void tabPriceProfile_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                {
                    ref var withBlock = ref SettingsVariables.UserUpdatePricesTabSettings;
                    if (tabPriceProfile.SelectedTab.TabIndex == 0)
                    {
                        // First save the items settings
                        withBlock.PPItemsPriceType = cmbPPDefaultsPriceType.Text;
                        withBlock.PPItemsRegion = cmbPPDefaultsRegion.Text;
                        withBlock.PPItemsSystem = cmbPPDefaultsSystem.Text;
                        withBlock.PPItemsPriceMod = Conversions.ToDouble(txtPPDefaultsPriceMod.Text.Replace("%", "")) / 100d;

                        cmbPPDefaultsPriceType.Text = withBlock.PPRawPriceType;
                        PreviousPPRegion = withBlock.PPRawRegion;
                        var argRegionCombo = cmbPPDefaultsRegion;
                        Public_Variables.LoadRegionCombo(ref argRegionCombo, withBlock.PPRawRegion);
                        cmbPPDefaultsRegion = argRegionCombo;
                        var argSystemCombo = cmbPPDefaultsSystem;
                        LoadSystemCombo(ref argSystemCombo, withBlock.PPRawRegion, withBlock.PPRawSystem);
                        cmbPPDefaultsSystem = argSystemCombo;
                        txtPPDefaultsPriceMod.Text = Strings.FormatPercent(withBlock.PPRawPriceMod, 1);
                    }
                    else
                    {
                        // First save the raw settings
                        withBlock.PPRawPriceType = cmbPPDefaultsPriceType.Text;
                        withBlock.PPRawRegion = cmbPPDefaultsRegion.Text;
                        withBlock.PPRawSystem = cmbPPDefaultsSystem.Text;
                        withBlock.PPRawPriceMod = Conversions.ToDouble(txtPPDefaultsPriceMod.Text.Replace("%", "")) / 100d;

                        cmbPPDefaultsPriceType.Text = withBlock.PPItemsPriceType;
                        PreviousPPRegion = withBlock.PPItemsRegion;
                        var argRegionCombo1 = cmbPPDefaultsRegion;
                        Public_Variables.LoadRegionCombo(ref argRegionCombo1, withBlock.PPItemsRegion);
                        cmbPPDefaultsRegion = argRegionCombo1;
                        var argSystemCombo1 = cmbPPDefaultsSystem;
                        LoadSystemCombo(ref argSystemCombo1, withBlock.PPItemsRegion, withBlock.PPItemsSystem);
                        cmbPPDefaultsSystem = argSystemCombo1;
                        txtPPDefaultsPriceMod.Text = Strings.FormatPercent(withBlock.PPItemsPriceMod, 1);
                    }
                    PPSystemsLoaded = true;
                }
            }

        }

        // Structure for loading price profiles in the appropriate grids
        private struct PriceProfile
        {
            public string GroupName;
            public string PriceType;
            public string RegionName;
            public string SolarSystemName;
            public double PriceModifier;
            public bool RawMaterial;
        }

        // Loads the price profiles system combo
        private void LoadSystemCombo(ref ComboBox SystemCombo, string Region, string System)
        {

            if ((Region ?? "") != Public_Variables.DefaultRegionPriceCombo)
            {
                string SQL = "";
                SQLiteDataReader rsData;
                string SystemName;

                SQL = "SELECT solarSystemName FROM SOLAR_SYSTEMS, REGIONS ";
                SQL += "WHERE SOLAR_SYSTEMS.regionID = REGIONS.regionID ";
                SQL += "AND REGIONS.regionName = '" + Region + "' ORDER BY solarSystemName";

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                rsData = Public_Variables.DBCommand.ExecuteReader();
                SystemCombo.BeginUpdate();
                SystemCombo.Items.Clear();
                // Add the all systems item
                SystemCombo.Items.Add(Public_Variables.AllSystems);
                while (rsData.Read())
                {
                    SystemName = rsData.GetString(0);
                    SystemCombo.Items.Add(SystemName);
                    if (SystemName == "Jita")
                    {
                        // Add Jita/Perimeter
                        SystemCombo.Items.Add(Public_Variables.JitaPerimeter);
                    }
                }
                SystemCombo.EndUpdate();
                rsData.Close();
                SystemCombo.Text = System;
            }

        }

        // Loads up the settings in the price profile grids on update prices
        private void LoadPriceProfileGrids()
        {
            SQLiteDataReader rsPP;
            string SQL;
            string GroupRawFlagList = "";
            var Profiles = new List<PriceProfile>();
            PriceProfile TempProfile;

            SQL = "SELECT GROUP_NAME, PRICE_TYPE, REGION_NAME, SOLAR_SYSTEM_NAME, PRICE_MODIFIER, RAW_MATERIAL ";
            SQL += "FROM PRICE_PROFILES WHERE ID = " + Public_Variables.SelectedCharacter.ID.ToString();
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsPP = Public_Variables.DBCommand.ExecuteReader();

            while (rsPP.Read())
            {
                // Build the list of groups we have, then use to query the ones we don't
                GroupRawFlagList = GroupRawFlagList + "AND NOT (GROUP_NAME ='" + rsPP.GetString(0) + "' AND RAW_MATERIAL =" + rsPP.GetInt32(5).ToString() + ") ";

                TempProfile.GroupName = rsPP.GetString(0);
                TempProfile.PriceType = rsPP.GetString(1);
                TempProfile.RegionName = rsPP.GetString(2);
                TempProfile.SolarSystemName = rsPP.GetString(3);
                TempProfile.PriceModifier = rsPP.GetDouble(4);
                TempProfile.RawMaterial = Conversions.ToBoolean(rsPP.GetInt32(5));
                Profiles.Add(TempProfile);
            }

            rsPP.Close();

            // Now get everything we don't have
            SQL = "SELECT GROUP_NAME, PRICE_TYPE, REGION_NAME, SOLAR_SYSTEM_NAME, PRICE_MODIFIER, RAW_MATERIAL ";
            SQL += "FROM PRICE_PROFILES WHERE ID = 0 " + GroupRawFlagList + "";
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsPP = Public_Variables.DBCommand.ExecuteReader();

            while (rsPP.Read())
            {
                TempProfile.GroupName = rsPP.GetString(0);
                TempProfile.PriceType = rsPP.GetString(1);
                TempProfile.RegionName = rsPP.GetString(2);
                TempProfile.SolarSystemName = rsPP.GetString(3);
                TempProfile.PriceModifier = rsPP.GetDouble(4);
                TempProfile.RawMaterial = Conversions.ToBoolean(rsPP.GetInt32(5));
                Profiles.Add(TempProfile);
            }

            rsPP.Close();

            // Load the lists
            var listRow = new ListViewItem();
            lstRawPriceProfile.Items.Clear();
            lstManufacturedPriceProfile.Items.Clear();
            lstRawPriceProfile.BeginUpdate();
            lstManufacturedPriceProfile.BeginUpdate();

            for (int i = 0, loopTo = Profiles.Count - 1; i <= loopTo; i++)
            {
                {
                    var withBlock = Profiles[i];
                    listRow = new ListViewItem(withBlock.GroupName);
                    // The remaining columns are subitems  
                    listRow.SubItems.Add(withBlock.PriceType);
                    listRow.SubItems.Add(withBlock.RegionName);
                    listRow.SubItems.Add(withBlock.SolarSystemName);
                    listRow.SubItems.Add(Strings.FormatPercent(withBlock.PriceModifier, 1));

                    if (withBlock.RawMaterial)
                    {
                        lstRawPriceProfile.Items.Add(listRow);
                    }
                    else
                    {
                        lstManufacturedPriceProfile.Items.Add(listRow);
                    }
                }
            }

            // Sort by group name - don't enable column sorting here - use desc since the function flips it
            ListView argRefListView = lstRawPriceProfile;
            int argListPrevColumnClicked = 0;
            var argListPrevColumnSortOrder = SortOrder.Descending;
            Public_Variables.ListViewColumnSorter(0, ref argRefListView, ref argListPrevColumnClicked, ref argListPrevColumnSortOrder);
            ListView argRefListView1 = lstManufacturedPriceProfile;
            int argListPrevColumnClicked1 = 0;
            var argListPrevColumnSortOrder1 = SortOrder.Descending;
            Public_Variables.ListViewColumnSorter(0, ref argRefListView1, ref argListPrevColumnClicked1, ref argListPrevColumnSortOrder1);

            lstRawPriceProfile.EndUpdate();
            lstManufacturedPriceProfile.EndUpdate();

        }

        private void lstPricesView_MouseClick(object sender, MouseEventArgs e)
        {
            ListClicked(lstPricesView, sender, e);
        }

        private void lstRawPriceProfile_MouseClick(object sender, MouseEventArgs e)
        {
            ListClicked(lstRawPriceProfile, sender, e);
        }

        private void lstManufacturedPriceProfile_MouseClick(object sender, MouseEventArgs e)
        {
            ListClicked(lstManufacturedPriceProfile, sender, e);
        }

        private void btnAddStructureIDs_Click(object sender, EventArgs e)
        {
            var f1 = new frmAddStructureIDs();

            f1.ShowDialog();

        }

        // Checks the user entry and then sends the type ids and regions to the cache update
        private void btnImportPrices_Click(object sender, EventArgs e)
        {
            bool RegionSelected;
            bool SystemSelected;
            SQLiteDataReader readerSystems;
            string SQL;

            string RegionName = "";
            var Items = new List<PriceItem>();
            var BlueprintItems = new List<PriceItem>();
            PriceItem TempItem;
            string SearchRegion = "";
            string SearchSystem = "";
            string SearchStructureID = "";
            int NumSystems = 0;
            string BPRegionID = "";

            RegionSelected = false;
            SystemSelected = false;

            bool DataErrors = true;

            // Progress Bar Init
            pnlProgressBar.Value = 0;

            int RegionSelectedCount = 0;
            bool JitaPerimeterChecked = false;
            bool SavedgbPPValue = gbPriceProfile.Enabled;
            bool SavedgbSSValue = gbSingleSource.Enabled;

            // Check region
            if ((cmbPriceRegions.Text ?? "") != Public_Variables.DefaultRegionPriceCombo)
            {
                RegionSelected = true;
            }

            // Check systems too
            for (int i = 1, loopTo = SystemCheckBoxes.Length - 1; i <= loopTo; i++)
            {
                if (SystemCheckBoxes[i].Checked == true)
                {
                    // Save the checked system (can only be one)
                    SearchSystem = SystemCheckBoxes[i].Text;
                    SystemSelected = true;
                    break;
                }
            }

            if (chkSystems1.Checked & chkSystems6.Checked & rbtnPriceSettingSingleSelect.Checked | (cmbPriceSystems.Text ?? "") == Public_Variables.JitaPerimeter)
            {
                // Need to run for both for non-price profile 
                JitaPerimeterChecked = true;
            }

            // Finally check system combo
            if (!SystemSelected & (cmbPriceSystems.Text ?? "") != Public_Variables.DefaultSystemPriceCombo & (cmbPriceSystems.Text ?? "") != Public_Variables.AllSystems)
            {
                SystemSelected = true;
                SearchSystem = cmbPriceSystems.Text;
            }

            if (!RegionSelected & !SystemSelected & !rbtnPriceSettingPriceProfile.Checked)
            {
                Interaction.MsgBox("Must Choose a Region or System", MsgBoxStyle.Exclamation, Name);
                goto ExitSub;
            }

            if ((string.IsNullOrEmpty(Strings.Trim(cmbPriceSystems.Text)) | !cmbPriceSystems.Items.Contains(cmbPriceSystems.Text) & (cmbPriceSystems.Text ?? "") != Public_Variables.DefaultSystemPriceCombo) & rbtnPriceSettingSingleSelect.Checked & cmbPriceSystems.Enabled)
            {
                Interaction.MsgBox("Invalid Solar System Name", Constants.vbCritical, Application.ProductName);
                goto ExitSub;
            }

            if (!ItemsSelected())
            {
                Interaction.MsgBox("Must Choose at least one Item type", MsgBoxStyle.Exclamation, Name);
                goto ExitSub;
            }

            if (rbtnPriceSourceCCPData.Checked & RegionSelectedCount > 1)
            {
                Interaction.MsgBox("You cannot choose more than one region when downloading CCP Data", MsgBoxStyle.Exclamation, Name);
                goto ExitSub;
            }

            DataErrors = false;

            // Working
            DisableUpdatePricesTab(true);

            SavedgbPPValue = gbPriceProfile.Enabled;
            SavedgbSSValue = gbSingleSource.Enabled;

            gbPriceProfile.Enabled = false;
            gbSingleSource.Enabled = false;

            // Enable cancel
            btnCancelUpdate.Enabled = true;

            // Set the source for the entire update
            if (rbtnPriceSourceEM.Checked)
            {
                UpdatePricesDataSource = ((int)DataSource.Fuzzworks).ToString();
            }
            else if (rbtnPriceSourceFW.Checked)
            {
                UpdatePricesDataSource = ((int)DataSource.Fuzzworks).ToString();
            }
            else if (rbtnPriceSourceCCPData.Checked)
            {
                UpdatePricesDataSource = ((int)DataSource.CCP).ToString();
            }

            Refresh();
            Cursor = Cursors.WaitCursor;
            pnlStatus.Text = "Initializing Query...";
            Application.DoEvents();

            // Find the selected region - single select
            if (rbtnPriceSettingSingleSelect.Checked)
            {
                if (RegionSelected & !SystemSelected) // If they selected a region but not a system, look up region data
                {
                    // Get the search list string
                    SQL = "SELECT regionID FROM REGIONS ";
                    SQL += "WHERE regionName = '" + cmbPriceRegions.Text + "'";

                    Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                    readerSystems = Public_Variables.DBCommand.ExecuteReader();
                    if (readerSystems.Read())
                    {
                        SearchRegion = Conversions.ToString(readerSystems.GetValue(0));
                    }
                    else
                    {
                        Interaction.MsgBox("Invalid Region Name", Constants.vbCritical, Application.ProductName);
                        goto ExitSub;
                    }

                    readerSystems.Close();
                }

                else if (SystemSelected)
                {
                    if ((SearchSystem ?? "") == Public_Variables.JitaPerimeter)
                    {
                        SearchSystem = "Jita";
                    }

                    // Get the system ID string
                    SQL = "SELECT solarSystemID, regionName FROM SOLAR_SYSTEMS, REGIONS ";
                    SQL += "WHERE REGIONS.regionID = SOLAR_SYSTEMS.regionID AND solarSystemName = '" + SearchSystem + "'";

                    Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                    readerSystems = Public_Variables.DBCommand.ExecuteReader();
                    if (readerSystems.Read())
                    {
                        SearchSystem = Conversions.ToString(readerSystems.GetValue(0));
                    }
                    else
                    {
                        Interaction.MsgBox("Invalid Solar System Name", Constants.vbCritical, Application.ProductName);
                        goto ExitSub;
                    }

                    readerSystems.Close();
                }
            }

            // Build the list of types we want to update and include the type, region/system
            for (int i = 0, loopTo1 = lstPricesView.Items.Count - 1; i <= loopTo1; i++)
            {
                // Only include items that are in the market (Market ID not null in Inventory Types) or blueprints/reactions
                if (!string.IsNullOrEmpty(lstPricesView.Items[i].SubItems[5].Text) | lstPricesView.Items[i].SubItems[1].Text.Contains("Blueprint") | lstPricesView.Items[i].SubItems[1].Text.Contains("Reaction"))
                {
                    TempItem = new PriceItem();
                    TempItem.TypeID = Conversions.ToLong(lstPricesView.Items[i].SubItems[0].Text);
                    TempItem.GroupName = GetPriceGroupName(TempItem.TypeID);

                    // If the group name exists, then look it up
                    if (!string.IsNullOrEmpty(TempItem.GroupName))
                    {
                        TempItem.Manufacture = Conversions.ToBoolean(lstPricesView.Items[i].SubItems[4].Text);
                        TempItem.RegionID = "";

                        if (rbtnPriceSettingSingleSelect.Checked)
                        {
                            TempItem.RegionID = SearchRegion;
                            TempItem.SystemID = SearchSystem;
                            TempItem.StructureID = SearchStructureID;
                            if (TempItem.Manufacture)
                            {
                                TempItem.PriceType = cmbItemsSplitPrices.Text;
                                TempItem.PriceModifier = Conversions.ToDouble(txtItemsPriceModifier.Text.Replace("%", "")) / 100d;
                            }
                            else
                            {
                                TempItem.PriceType = cmbRawMatsSplitPrices.Text;
                                TempItem.PriceModifier = Conversions.ToDouble(txtRawPriceModifier.Text.Replace("%", "")) / 100d;
                            }
                        }
                        else // *** PRICE PROFILES ***
                        {
                            // Using price profiles, so look up all the data per group name
                            SQLiteDataReader rsPP;
                            SQL = "SELECT PRICE_TYPE, regionID, SOLAR_SYSTEM_NAME, PRICE_MODIFIER FROM PRICE_PROFILES, REGIONS ";
                            SQL += "WHERE REGIONS.regionName = PRICE_PROFILES.REGION_NAME ";
                            SQL += "AND (ID = " + Public_Variables.SelectedCharacter.ID.ToString() + " OR ID = 0) AND GROUP_NAME = '" + TempItem.GroupName + "' ";
                            if (Public_Variables.SelectedCharacter.ID != Public_Variables.DummyCharacterID)
                            {
                                SQL += "ORDER BY ID DESC";
                            }
                            else
                            {
                                SQL += "ORDER BY ID";
                            }

                            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                            rsPP = Public_Variables.DBCommand.ExecuteReader();

                            if (rsPP.Read())
                            {
                                TempItem.PriceType = rsPP.GetString(0);
                                if ((rsPP.GetString(2) ?? "") == Public_Variables.AllSystems)
                                {
                                    // Can only do one region for price profile
                                    TempItem.RegionID = rsPP.GetInt64(1).ToString();
                                    TempItem.SystemID = "";
                                }
                                // Look up the system name
                                else if ((rsPP.GetString(2) ?? "") == Public_Variables.JitaPerimeter)
                                {
                                    // System name set below
                                    JitaPerimeterChecked = true;
                                }
                                else
                                {
                                    JitaPerimeterChecked = false;
                                    TempItem.SystemID = Public_Variables.GetSolarSystemID(rsPP.GetString(2)).ToString();
                                }
                                TempItem.PriceModifier = rsPP.GetDouble(3);
                            }
                            rsPP.Close();
                        }

                        // Add the item to the list if not there 
                        if (!Items.Contains(TempItem) & TempItem.GroupName != "Blueprint" & !TempItem.GroupName.Contains("Reaction"))
                        {
                            if (JitaPerimeterChecked)
                            {
                                // Add Jita first with flag
                                TempItem.JitaPerimeterPrice = true;
                                TempItem.SystemID = JitaID;
                                Items.Add(TempItem);
                                // Perimeter will always be after Jita but add both temp items to get prices for both
                                var TempItem2 = new PriceItem();
                                TempItem2 = (PriceItem)TempItem.Clone();
                                TempItem2.SystemID = PerimeterID;
                                Items.Add(TempItem2);
                            }
                            else
                            {
                                // Just basic add
                                TempItem.JitaPerimeterPrice = false;
                                Items.Add(TempItem);
                            }
                        }
                        else if (TempItem.GroupName == "Blueprint" | TempItem.GroupName.Contains("Reaction"))
                        {
                            // Put this in the blueprints list and we will look at contracts for prices
                            // Jita/Perimeter won't matter since they are in the same region and we can only query regions for contracts
                            BlueprintItems.Add(TempItem);
                            BPRegionID = TempItem.RegionID; // Will always be the same for all BPCs
                        }
                    }
                }
            }

            // Load the prices
            LoadPrices(Items, BlueprintItems, BPRegionID);

            // Update all the prices in the program
            Public_Variables.UpdateProgramPrices();

        ExitSub:
            ;


            Application.UseWaitCursor = false;
            Application.DoEvents();

            if (!DataErrors)
            {
                // Enable tab
                DisableUpdatePricesTab(false);

                gbSingleSource.Enabled = SavedgbSSValue;
                gbPriceProfile.Enabled = SavedgbPPValue;
            }

            // Disable cancel
            btnCancelUpdate.Enabled = false;

            Refresh();
            Cursor = Cursors.Default;
            pnlProgressBar.Visible = false;
            pnlStatus.Text = "";

        }

        private string RegiontoFind;
        private string TypeIDRegiontoFind;

        // Predicate for searching a list items
        private bool FindTypeIDRegion(Public_Variables.TypeIDRegion Item)
        {
            if ((Item.RegionString ?? "") == (RegiontoFind ?? ""))
            {
                // Go through the list to see if the id is already in there
                if (Item.TypeIDs.Contains(TypeIDRegiontoFind))
                {
                    return true;
                }
            }

            return false;

        }

        // Loads prices from the cache into the ITEM_PRICES table based on the info selected on the main form
        private void LoadPrices(List<PriceItem> SentItems, List<PriceItem> BPItems, string BPCRegionID)
        {
            SQLiteDataReader readerPrices;
            string SQL = "";
            int i;
            string RegionorSystemList;
            double SelectedPrice;
            var argSentPG = pnlProgressBar;
            var MP = new MarketPriceInterface(ref argSentPG);
            pnlProgressBar = argSentPG;
            var ESIData = new ESI();
            string RegionID = "";
            var PriceRegions = new List<string>();
            var StructurePriceLocations = new List<Public_Variables.SystemRegion>();
            string PriceType = ""; // Default
            var Items = new List<Public_Variables.TypeIDRegion>();

            // Use CCP Data
            if (rbtnPriceSourceCCPData.Checked)
            {
                // Loop through each item and set it's pair for query
                var loopTo = SentItems.Count - 1;
                for (i = 0; i <= loopTo; i++)
                {
                    var Temp = new Public_Variables.TypeIDRegion();
                    var SystemRegionData = new Public_Variables.SystemRegion();
                    Temp.TypeIDs.Add(SentItems[i].TypeID.ToString());

                    // Look up regionID since we can only look up regions in ESI
                    if (!string.IsNullOrEmpty(SentItems[i].SystemID))
                    {
                        Public_Variables.DBCommand = new SQLiteCommand("SELECT regionID FROM SOLAR_SYSTEMS WHERE solarsystemID = '" + SentItems[i].SystemID + "'", Public_Variables.EVEDB.DBREf());
                        readerPrices = Public_Variables.DBCommand.ExecuteReader();
                        readerPrices.Read();
                        RegionID = readerPrices.GetInt64(0).ToString();
                        readerPrices.Close();
                        Public_Variables.DBCommand = null;
                        SystemRegionData.SystemID = SentItems[i].SystemID;
                        SystemRegionData.RegionID = RegionID;
                    }
                    else
                    {
                        // for ESI, only one region per update
                        RegionID = SentItems[i].RegionID;
                        SystemRegionData.SystemID = "";
                        SystemRegionData.RegionID = RegionID;
                    }

                    // Save for structures later
                    if (!StructurePriceLocations.Contains(SystemRegionData))
                    {
                        StructurePriceLocations.Add(SystemRegionData);
                    }

                    // Set the region
                    Temp.RegionString = RegionID;

                    // Save the regionID in the list
                    if (!PriceRegions.Contains(RegionID))
                    {
                        PriceRegions.Add(RegionID);
                    }

                    // If not in the main list, add it
                    var TempItem = new Public_Variables.TypeIDRegion();
                    RegiontoFind = RegionID;
                    TypeIDRegiontoFind = SentItems[i].TypeID.ToString();
                    TempItem = Items.Find(FindTypeIDRegion);
                    if (TempItem == null)
                    {
                        Items.Add(Temp);
                    }
                }

                pnlStatus.Text = "Downloading Station Prices...";

                // Update the ESI prices cache
                if (!MP.UpdateESIMarketOrders(Items))
                {
                    // Update Failed, don't reload everything
                    Interaction.MsgBox("Some prices did not update from stations. Please try again.", Constants.vbInformation, Application.ProductName);
                    pnlStatus.Text = "";
                    return;
                }

                if (Public_Variables.CancelThreading)
                {
                    // They had a ton of errors
                    Interaction.MsgBox("You had an excessive amount of errors while attempting to update station orders and the process was canceled. Please try again later.", Constants.vbCritical, Application.ProductName);
                    Public_Variables.CancelThreading = false;
                    return;
                }

                pnlStatus.Text = "";
                Application.DoEvents();

                // Now, based on the region and selected items, select the public upwell structures and get each set of market data from those
                if (Public_Variables.SelectedCharacter.StructureMarketsAccess & Public_Variables.SelectedCharacter.PublicStructuresAccess & !Public_Variables.CancelUpdatePrices)
                {
                    pnlStatus.Text = "Downloading Public Structure Prices...";

                    // First, make sure we have structures in the table to query
                    Label argUpdateLabel = null;
                    ProgressBar argPB = null;
                    ESIData.UpdatePublicStructureswithMarkets(UpdateLabel: ref argUpdateLabel, PB: ref argPB);

                    bool localUpdateStructureMarketOrders() { var argrefPG = pnlProgressBar; var ret = ESIData.UpdateStructureMarketOrders(StructurePriceLocations, Public_Variables.SelectedCharacter.CharacterTokenData, ref argrefPG); pnlProgressBar = argrefPG; return ret; }

                    if (!localUpdateStructureMarketOrders())
                    {
                        // Update Failed, don't reload everything
                        Interaction.MsgBox("Some prices did not update from public structures. Please try again.", Constants.vbInformation, Application.ProductName);
                        pnlStatus.Text = "";
                        return;
                    }

                    if (Public_Variables.CancelThreading)
                    {
                        // They had a ton of errors
                        Interaction.MsgBox("You had an excessive amount of errors while attempting to update structure orders and the process was canceled. Please try again later.", Constants.vbCritical, Application.ProductName);
                        Public_Variables.CancelThreading = false;
                        return;
                    }

                    pnlStatus.Text = "";
                }
            }
            // Update the cache with EVE Marketer or Fuzzworks selected
            else if (!UpdatePricesCache(SentItems))
            {
                // Update Failed, don't reload everything
                return;
            }

            // Working
            pnlStatus.Text = "Updating Item Prices...";
            RegionorSystemList = "";
            pnlProgressBar.Value = 0;
            pnlProgressBar.Minimum = 0;
            pnlProgressBar.Maximum = SentItems.Count + 1;
            pnlProgressBar.Visible = true;

            Application.DoEvents();

            if (Public_Variables.EVEDB.TransactionActive() & Public_Variables.CancelUpdatePrices)
            {
                // We Canceled the update so rollback anything
                Public_Variables.EVEDB.RollbackSQLiteTransaction();
            }

            Public_Variables.EVEDB.BeginSQLiteTransaction();

            // Select the prices from the cache table
            var loopTo1 = SentItems.Count - 1;
            for (i = 0; i <= loopTo1; i++)
            {
                // Use combo values for min or max.
                switch (SentItems[i].PriceType ?? "")
                {
                    case "Min Sell":
                        {
                            PriceType = "sellMin";
                            break;
                        }
                    case "Max Sell":
                        {
                            PriceType = "sellMax";
                            break;
                        }
                    case "Avg Sell":
                        {
                            PriceType = "sellAvg";
                            break;
                        }
                    case "Median Sell":
                        {
                            PriceType = "sellMedian";
                            break;
                        }
                    case "Percentile Sell":
                        {
                            PriceType = "sellPercentile";
                            break;
                        }
                    case "Min Buy":
                        {
                            PriceType = "buyMin";
                            break;
                        }
                    case "Max Buy":
                        {
                            PriceType = "buyMax";
                            break;
                        }
                    case "Avg Buy":
                        {
                            PriceType = "buyAvg";
                            break;
                        }
                    case "Median Buy":
                        {
                            PriceType = "buyMedian";
                            break;
                        }
                    case "Percentile Buy":
                        {
                            PriceType = "buyPercentile";
                            break;
                        }
                    case "Split Price":
                        {
                            PriceType = "splitPrice";
                            break;
                        }
                }

                // Build the region list for each item
                RegionorSystemList = "";
                if (SentItems[i].JitaPerimeterPrice)
                {
                    RegionorSystemList = JitaID + "," + PerimeterID;
                }
                else if (string.IsNullOrEmpty(SentItems[i].SystemID))
                {
                    RegionorSystemList = SentItems[i].RegionID;
                }
                else
                {
                    RegionorSystemList = SentItems[i].SystemID;
                }

                // Third Party data pull
                if (rbtnPriceSourceEM.Checked | rbtnPriceSourceFW.Checked)
                {
                    string SQLPricetype = "";
                    if (PriceType != "splitPrice")
                    {
                        // If it's Jita Perimeter, we need to do functions on the values - just take averages of non-min/max values
                        if (SentItems[i].JitaPerimeterPrice)
                        {
                            switch (PriceType ?? "")
                            {
                                case "buyAvg":
                                    {
                                        SQLPricetype = "AVG(buyAvg)";
                                        break;
                                    }
                                case "buyMax":
                                    {
                                        SQLPricetype = "MAX(buyMax)";
                                        break;
                                    }
                                case "buyMedian":
                                    {
                                        SQLPricetype = "AVG(buyMedian)";
                                        break;
                                    }
                                case "buyMin":
                                    {
                                        SQLPricetype = "MIN(buyMin)";
                                        break;
                                    }
                                case "buyPercentile":
                                    {
                                        SQLPricetype = "AVG(buyPercentile)";
                                        break;
                                    }
                                case "sellAvg":
                                    {
                                        SQLPricetype = "AVG(sellAvg)";
                                        break;
                                    }
                                case "sellMax":
                                    {
                                        SQLPricetype = "MAX(sellMax)";
                                        break;
                                    }
                                case "sellMedian":
                                    {
                                        SQLPricetype = "AVG(sellMedian)";
                                        break;
                                    }
                                case "sellMin":
                                    {
                                        SQLPricetype = "MIN(sellMin)";
                                        break;
                                    }
                                case "sellPercentile":
                                    {
                                        SQLPricetype = "AVG(sellPercentile)";
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            SQLPricetype = PriceType;
                        }
                    }
                    else
                    {
                        SQLPricetype = "((buyMax + sellMin) / 2)";
                    }

                    SQL = "SELECT " + SQLPricetype + ", RegionORSystem FROM ITEM_PRICES_CACHE WHERE TYPEID = " + SentItems[i].TypeID.ToString();
                    SQL += " AND RegionOrSystem IN (" + RegionorSystemList + ") AND PRICE_SOURCE = " + UpdatePricesDataSource;
                    if (SentItems[i].JitaPerimeterPrice)
                    {
                        if (PriceType == "sellMin")
                        {
                            SQL += " AND sellMin > 0";
                        }
                        else if (PriceType == "buyMin0")
                        {
                            SQL += " AND buyMin > 0";
                        }
                    }
                    SQL += " ORDER BY DateTime(UPDATEDATE) DESC";
                }
                else
                {
                    bool LimittoBuy = false;
                    bool LimittoSell = false;
                    string SystemID = "";

                    RegionID = "";

                    if (!string.IsNullOrEmpty(SentItems[i].SystemID))
                    {
                        SystemID = RegionorSystemList;
                    }
                    else
                    {
                        RegionID = RegionorSystemList;
                    }

                    // Get the data from ESI so we need to do some calcuations depending on the type they want
                    SQL = "SELECT ";
                    switch (PriceType ?? "")
                    {
                        case "buyAvg":
                            {
                                SQL += "AVG(PRICE)";
                                LimittoBuy = true;
                                break;
                            }
                        case "buyMax":
                            {
                                SQL += "MAX(PRICE)";
                                LimittoBuy = true;
                                break;
                            }
                        case "buyMedian":
                            {
                                SQL += CalcMedian(SentItems[i].TypeID, RegionID, SystemID, true);
                                break;
                            }
                        case "buyMin":
                            {
                                SQL += "MIN(PRICE)";
                                LimittoBuy = true;
                                break;
                            }
                        case "buyPercentile":
                            {
                                SQL += CalcPercentile(SentItems[i].TypeID, RegionID, SystemID, true);
                                break;
                            }
                        case "sellAvg":
                            {
                                SQL += "AVG(PRICE)";
                                LimittoSell = true;
                                break;
                            }
                        case "sellMax":
                            {
                                SQL += "MAX(PRICE)";
                                LimittoSell = true;
                                break;
                            }
                        case "sellMedian":
                            {
                                SQL += CalcMedian(SentItems[i].TypeID, RegionID, SystemID, false);
                                break;
                            }
                        case "sellMin":
                            {
                                SQL += "MIN(PRICE)";
                                LimittoSell = true;
                                break;
                            }
                        case "sellPercentile":
                            {
                                SQL += CalcPercentile(SentItems[i].TypeID, RegionID, SystemID, false);
                                break;
                            }
                        case "splitPrice":
                            {
                                SQL += CalcSplit(SentItems[i].TypeID, RegionID, SystemID);
                                break;
                            }
                    }

                    // If they want a system, then limit all the data to that system id
                    if (!string.IsNullOrEmpty(SentItems[i].SystemID))
                    {
                        // Set the main from using both CCP Data price locations
                        SQL += ", SOLAR_SYSTEM_ID FROM (SELECT * FROM MARKET_ORDERS UNION ALL SELECT * FROM STRUCTURE_MARKET_ORDERS) WHERE TYPE_ID = " + SentItems[i].TypeID.ToString() + " ";
                        SQL += "AND SOLAR_SYSTEM_ID IN (" + RegionorSystemList + ") ";
                    }
                    else
                    {
                        // Use the region
                        // Set the main from using both CCP Data price locations
                        SQL += ", REGION_ID FROM (SELECT * FROM MARKET_ORDERS UNION ALL SELECT * FROM STRUCTURE_MARKET_ORDERS) WHERE TYPE_ID = " + SentItems[i].TypeID.ToString() + " ";
                        SQL += "AND REGION_ID = " + RegionorSystemList + " ";
                    }

                    // See if we limit to buy/sell only
                    if (LimittoBuy)
                    {
                        SQL += "AND IS_BUY_ORDER <> 0 ";
                    }
                    else if (LimittoSell)
                    {
                        SQL += "AND IS_BUY_ORDER = 0 ";
                    }

                    SQL += "AND PRICE > 0 ";

                }

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerPrices = Public_Variables.DBCommand.ExecuteReader();

                double DownloadedPrice;
                string DownloadedLocation;

                // Grab the first record, which will be the latest one, if no record then set to zero
                if (readerPrices.Read())
                {
                    if (!(readerPrices.GetValue(0) is DBNull))
                    {
                        DownloadedPrice = readerPrices.GetDouble(0);
                        DownloadedLocation = Conversions.ToString(readerPrices.GetValue(1));
                    }
                    else
                    {
                        DownloadedPrice = 0d;
                        if (SentItems[i].JitaPerimeterPrice)
                        {
                            DownloadedLocation = SentItems[i].SystemID;
                        }
                        else
                        {
                            DownloadedLocation = RegionorSystemList;
                        }
                    }

                    // Modify the price depending on modifier
                    SelectedPrice = DownloadedPrice * (1d + SentItems[i].PriceModifier);

                    // Now Update the ITEM_PRICES table, set price, price type, Data source, and RegionORSystem used for the price
                    SQL = "UPDATE ITEM_PRICES_FACT Set PRICE = " + SelectedPrice.ToString() + ", PRICE_TYPE = '" + PriceType + "' ";
                    SQL += ", RegionORSystem = " + DownloadedLocation + ", PRICE_SOURCE = " + UpdatePricesDataSource;
                    SQL += " WHERE ITEM_ID = " + SentItems[i].TypeID.ToString();
                    // Only overwrite a user price if it's downloaded, if zero - keep it there
                    if (DownloadedPrice == 0d)
                    {
                        SQL += " AND PRICE_TYPE <> 'User'";
                    }
                    Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                    readerPrices.Close();
                }

                // For each record, update the progress bar
                var argPG = pnlProgressBar;
                Public_Variables.IncrementToolStripProgressBar(ref argPG);
                pnlProgressBar = argPG;

                Application.DoEvents();
            }

            Public_Variables.EVEDB.CommitSQLiteTransaction();

            // Done updating, hide the progress bar
            pnlProgressBar.Visible = false;
            pnlStatus.Text = "";
            Application.DoEvents();

        }

        private string CalcSplit(long TypeID, string RegionID, string SystemID)
        {
            string SQL = "";
            SQLiteDataReader rsData;
            var PriceList = new List<double>();
            string SellOrderSQL = "AND IS_BUY_ORDER = 0 ";
            string BuyOrderSQL = "AND IS_BUY_ORDER <> 0 ";

            double MinSellPrice = 0d;
            double MaxBuyPrice = 0d;

            SQL = "SELECT MIN(PRICE) FROM (SELECT * FROM MARKET_ORDERS UNION ALL SELECT * FROM STRUCTURE_MARKET_ORDERS) WHERE TYPE_ID = " + TypeID.ToString() + " ";
            if (!string.IsNullOrEmpty(SystemID))
            {
                if (SystemID.Contains(","))
                {
                    SQL += "AND SOLAR_SYSTEM_ID IN (" + SystemID + ") ";
                }
                else
                {
                    SQL += "AND SOLAR_SYSTEM_ID = " + SystemID + " ";
                }
            }
            else
            {
                // Use the region
                SQL += "AND REGION_ID = " + RegionID + " ";
            }

            // Look up the min sell price
            Public_Variables.DBCommand = new SQLiteCommand(SQL + SellOrderSQL, Public_Variables.EVEDB.DBREf());
            rsData = Public_Variables.DBCommand.ExecuteReader();
            rsData.Read();

            if (rsData.HasRows)
            {
                if (!(rsData.GetValue(0) is DBNull))
                {
                    MinSellPrice = rsData.GetDouble(0);
                }
            }

            rsData.Close();

            SQL = "SELECT MAX(PRICE) FROM (SELECT * FROM MARKET_ORDERS UNION ALL SELECT * FROM STRUCTURE_MARKET_ORDERS) WHERE TYPE_ID = " + TypeID.ToString() + " ";
            if (!string.IsNullOrEmpty(SystemID))
            {
                if (SystemID.Contains(","))
                {
                    SQL += "AND SOLAR_SYSTEM_ID IN (" + SystemID + ") ";
                }
                else
                {
                    SQL += "AND SOLAR_SYSTEM_ID = " + SystemID + " ";
                }
            }
            else
            {
                // Use the region
                SQL += "AND REGION_ID = " + RegionID + " ";
            }

            // Look up the max buy order
            Public_Variables.DBCommand = new SQLiteCommand(SQL + BuyOrderSQL, Public_Variables.EVEDB.DBREf());
            rsData = Public_Variables.DBCommand.ExecuteReader();
            rsData.Read();

            if (rsData.HasRows)
            {
                if (!(rsData.GetValue(0) is DBNull))
                {
                    MaxBuyPrice = rsData.GetDouble(0);
                }
            }

            rsData.Close();

            return ((MaxBuyPrice + MinSellPrice) / 2d).ToString();

        }

        // Queries market orders and calculates the median and returns the median as a string
        private string CalcMedian(long TypeID, string RegionID, string SystemID, bool IsBuyOrder)
        {
            var MedianList = GetMarketOrderPriceList(TypeID, RegionID, SystemID, IsBuyOrder);
            double value;
            int size = MedianList.Count;

            // Calculate the median
            if (size > 0)
            {
                if (size % 2 == 0)
                {
                    // Need to average
                    double a = MedianList[(int)Math.Round(size / 2d - 1d)];
                    double b = MedianList[(int)Math.Round(size / 2d)];
                    value = (a + b) / 2d;
                }
                else
                {
                    value = MedianList[(int)Math.Round(Math.Floor(size / 2d))];
                }
            }
            else
            {
                value = 0d;
            }

            // return 2 decimals
            return Strings.Format(value, "0.##");

        }

        // Queries market orders and calculates the percential price
        private string CalcPercentile(long TypeID, string RegionID, string SystemID, bool IsBuyOrder)
        {
            var PriceList = GetMarketOrderPriceList(TypeID, RegionID, SystemID, IsBuyOrder);
            int index;

            if (PriceList.Count > 0)
            {
                if (IsBuyOrder)
                {
                    // Get the top 5% 
                    index = (int)Math.Round(Math.Floor(0.95d * PriceList.Count));
                }
                else
                {
                    // Get the bottom 5% for SELL or ALL - matches EVE Central?
                    index = (int)Math.Round(Math.Floor(0.05d * PriceList.Count));
                }
                return PriceList[index].ToString();
            }
            else
            {
                return "0.00";
            }

        }

        // Returns the list of prices for variables sent, sorted ascending
        private List<double> GetMarketOrderPriceList(long TypeID, string RegionID, string SystemID, bool IsBuyOrder)
        {
            string SQL = "";
            SQLiteDataReader rsData;
            var PriceList = new List<double>();

            SQL = "SELECT PRICE FROM (SELECT * FROM MARKET_ORDERS UNION ALL SELECT * FROM STRUCTURE_MARKET_ORDERS) WHERE TYPE_ID = " + TypeID.ToString() + " ";
            if (!string.IsNullOrEmpty(SystemID))
            {
                if (SystemID.Contains(","))
                {
                    SQL += "AND SOLAR_SYSTEM_ID IN (" + SystemID + ") ";
                }
                else
                {
                    SQL += "AND SOLAR_SYSTEM_ID = " + SystemID + " ";
                }
            }
            else
            {
                // Use the region
                SQL += "AND REGION_ID = " + RegionID + " ";
            }

            if (IsBuyOrder)
            {
                SQL += "AND IS_BUY_ORDER <> 0 ";
            }
            else
            {
                SQL += "AND IS_BUY_ORDER = 0 ";
            }

            SQL += "ORDER BY PRICE ASC";

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsData = Public_Variables.DBCommand.ExecuteReader();

            while (rsData.Read())
                PriceList.Add(rsData.GetDouble(0));

            rsData.Close();

            return PriceList;

        }

        // Gets the group name from ITEM_PRICES
        private string GetPriceGroupName(long TypeID)
        {
            string SQL = "SELECT ITEM_GROUP, ITEM_CATEGORY, ITEM_NAME FROM ITEM_PRICES WHERE ITEM_ID = " + TypeID.ToString();
            SQLiteDataReader rsGroup;
            string RGN = "";
            string GN = "";
            string CN = "";
            string ITN = "";

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsGroup = Public_Variables.DBCommand.ExecuteReader();

            if (rsGroup.Read())
            {
                GN = rsGroup.GetString(0);
                CN = rsGroup.GetString(1);
                ITN = rsGroup.GetString(2);

                switch (GN ?? "")
                {
                    case "Advanced Protective Technology":
                        {
                            RGN = "Advanced Protective Technology";
                            break;
                        }
                    case "Materials and Compounds":
                    case "Artifacts and Prototypes":
                    case "Rogue Drone Components":
                        {
                            RGN = "Faction Materials";
                            break;
                        }
                    case "Harvestable Cloud":
                        {
                            RGN = "Harvestable Cloud";
                            break;
                        }
                    case "Ice Product":
                        {
                            RGN = "Ice Products";
                            break;
                        }
                    case "Mineral":
                        {
                            RGN = "Minerals";
                            break;
                        }
                    case "Molecular-Forging Tools":
                        {
                            RGN = "Molecular-Forging Tools";
                            break;
                        }
                    case "Salvaged Materials":
                    case "Ancient Salvage":
                        {
                            RGN = "Salvage";
                            break;
                        }

                    case "Hybrid Polymers":
                        {
                            RGN = "Hybrid Polymers";
                            break;
                        }
                    case "Moon Materials":
                        {
                            RGN = "Raw Moon Materials";
                            break;
                        }
                    case "Intermediate Materials":
                        {
                            RGN = "Processed Moon Materials";
                            break;
                        }
                    case "Composite":
                        {
                            RGN = "Advanced Moon Materials";
                            break;
                        }
                    case "Molecular-Forged Materials":
                        {
                            RGN = "Molecular-Forged Materials";
                            break;
                        }
                    case "Named Components":
                        {
                            RGN = "Named Components";
                            break;
                        }
                    case "Biochemical Material":
                        {
                            RGN = "Booster Materials";
                            break;
                        }

                    case "Advanced Capital Construction Components":
                        {
                            RGN = "Adv. Capital Components";
                            break;
                        }
                    case "Construction Components":
                        {
                            RGN = "Advanced Components";
                            break;
                        }
                    case "Fuel Block":
                        {
                            RGN = "Fuel Blocks";
                            break;
                        }
                    case "Protective Components":
                        {
                            RGN = "Protective Components";
                            break;
                        }
                    case "Capital Construction Components":
                        {
                            RGN = "Std. Capital Ship Components";
                            break;
                        }
                    case "Structure Components":
                        {
                            RGN = "Structure Components";
                            break;
                        }
                    case "Hybrid Tech Components":
                        {
                            RGN = "Subsystem Components";
                            break;
                        }

                    case "Booster":
                        {
                            RGN = "Boosters";
                            break;
                        }
                    case "Datacores":
                        {
                            RGN = "Datacores";
                            break;
                        }

                    default:
                        {
                            // Do if checks or select on category
                            if (GN.Contains("Decryptor"))
                            {
                                RGN = "Decryptors";
                            }
                            else if (ITN.Contains("R.Db") & !ITN.Contains("Blueprint"))
                            {
                                RGN = "R.Db.";
                            }
                            else if (ITN.Contains("R.A.M.") & !ITN.Contains("Blueprint"))
                            {
                                RGN = "R.A.M.s";
                            }
                            else if (GN == "General" | GN == "Livestock" | GN == "Radioactive" | GN == "Biohazard" | GN == "Commodities" | GN == "Empire Insignia Drops" | GN == "Criminal Tags" | GN == "Miscellaneous" | GN == "Unknown Components" | GN == "Lease")
                            {
                                RGN = "Misc.";
                            }
                            else if (GN == "Rogue Drone Components" | ITN == "Elite Drone AI")
                            {
                                RGN = "Rogue Drone Components";
                            }
                            else if (GN == "Cyberimplant" | CN == "Implant" & GN != "Booster")
                            {
                                RGN = "Implants";
                            }
                            else if (CN.Contains("Planetary") | ITN == "Oxygen" | ITN == "Water")
                            {
                                RGN = "Planetary Materials";
                            }
                            else if (CN.Contains("Blueprint"))
                            {
                                RGN = "Blueprint";
                            }
                            else if (CN == "Ancient Relics")
                            {
                                RGN = "Ancient Relics";
                            }
                            else if (CN == "Deployable")
                            {
                                RGN = "Deployables";
                            }
                            else if (CN == "Asteroid" | GN == "Abyssal Materials")
                            {
                                RGN = "Raw Materials";
                            }
                            else if (CN == "Ship")
                            {
                                RGN = "Ships";
                            }
                            else if (CN == "Subsystem")
                            {
                                RGN = "Subsystems";
                            }
                            else if (CN == "Structure Module")
                            {
                                RGN = "Structure Modules";
                            }
                            else if (CN == "Starbase")
                            {
                                RGN = "Structures";
                            }
                            else if (CN == "Charge")
                            {
                                RGN = "Charges";
                            }
                            else if (CN == "Drone" | CN == "Fighter")
                            {
                                RGN = "Drones";
                            }
                            else if (CN == "Module" & !GN.Contains("Rig"))
                            {
                                RGN = "Modules";
                            }
                            else if (CN == "Module" & GN.Contains("Rig"))
                            {
                                RGN = "Rigs";
                            }
                            else if ((CN == "Celestial" | CN == "Orbitals" | CN == "Sovereignty Structures" | CN == "Station" | CN == "Accessories" | CN == "Infrastructure Upgrades") & GN != "Harvestable Clound")
                            {
                                RGN = "Celestials";
                            }
                            else if (CN == "Structure")
                            {
                                RGN = "Structures";
                            }
                            else if (CN == "Structure Rigs")
                            {
                                RGN = "Structure Rigs";
                            }

                            break;
                        }
                }
            }

            if (string.IsNullOrEmpty(RGN))
            {
                // If no groupname, then set it as a nobuild item
                RGN = "No Build Items";
            }

            rsGroup.Close();

            return RGN;

        }

        // Adds prices for each type id and region to the cache 
        private bool UpdatePricesCache(List<PriceItem> CacheItems)
        {
            bool UpdatePricesCacheRet = default;
            var TypeIDUpdatePriceList = new List<PriceItem>();
            int i;
            string SQL = "";
            List<FuzzworksMarketPrice> FWPriceRecords;
            var FuzzworksMarketPrices = new FuzzworksMarket();
            List<EVEMarketerPrice> EMPriceRecords;
            var EVEMarketerPrices = new EVEMarketer();
            Public_Variables.MyError PriceDLError;

            string RegionSystem = ""; // Used for querying the Price Cache for regions
            int TotalUpdateItems = 0; // For progress bar, only count the ones we update
            bool InsertRecord = false;
            bool Query3rdPartySource = false;
            SQLiteDataReader readerPriceCheck;

            long SystemID;
            long RegionID;

            // Reset the value of the progress bar
            pnlProgressBar.Value = 0;
            if (CacheItems.Count != 0)
            {
                pnlProgressBar.Maximum = CacheItems.Count - 1;
            }
            else
            {
                pnlProgressBar.Maximum = 0;
            }

            pnlProgressBar.Visible = true;
            Public_Variables.CancelUpdatePrices = false;

            pnlStatus.Text = "Checking Items...";
            Application.DoEvents();

            // Loop through the list of items to get full query of just those that need to be updated
            var loopTo = CacheItems.Count - 1;
            for (i = 0; i <= loopTo; i++)
            {

                if (Public_Variables.CancelUpdatePrices)
                {
                    break;
                }

                // Reset Insert
                InsertRecord = false;

                // Get the region/system list since they will always be the same, use the first one for EVE Marketer/Fuzzworks
                if (!string.IsNullOrEmpty(CacheItems[i].SystemID))
                {
                    RegionSystem = CacheItems[i].SystemID;
                    SystemID = Conversions.ToLong(CacheItems[i].SystemID);
                }
                else
                {
                    RegionSystem = CacheItems[i].RegionID;
                    RegionID = Conversions.ToLong(CacheItems[i].RegionID);
                }

                // See if the record is in the cache first
                SQL = "SELECT * FROM ITEM_PRICES_CACHE WHERE TYPEID = " + CacheItems[i].TypeID.ToString() + " AND RegionOrSystem = " + RegionSystem + " AND PRICE_SOURCE = " + UpdatePricesDataSource;

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerPriceCheck = Public_Variables.DBCommand.ExecuteReader();

                if (!readerPriceCheck.HasRows)
                {
                    // Not found
                    InsertRecord = true;
                }
                else
                {
                    readerPriceCheck.Close();
                    // There is a record, see if it needs to be updated
                    SQL = "SELECT UPDATEDATE FROM ITEM_PRICES_CACHE WHERE TYPEID = " + CacheItems[i].TypeID.ToString() + " AND RegionOrSystem = " + RegionSystem + " AND PRICE_SOURCE = " + UpdatePricesDataSource;
                    Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                    readerPriceCheck = Public_Variables.DBCommand.ExecuteReader();

                    // If no record or the max date
                    if (readerPriceCheck.Read())
                    {
                        // If older than the interval, add a new record
                        if (DateTime.ParseExact(readerPriceCheck.GetString(0), Public_Variables.SQLiteDateFormat, Public_Variables.LocalCulture) < DateAndTime.DateAdd(DateInterval.Minute, -1 * SettingsVariables.UserApplicationSettings.UpdatePricesRefreshInterval, DateTime.Now))
                        {
                            InsertRecord = true;
                        }
                    }
                }

                readerPriceCheck.Close();

                // Add to query item list for EVE Marketer
                if (InsertRecord)
                {
                    // Add to the list
                    TypeIDUpdatePriceList.Add(CacheItems[i]);

                    // Count up the update items
                    TotalUpdateItems = TotalUpdateItems + 1;
                    // We are inserting at least one record, so query eve marketer/FW
                    Query3rdPartySource = true;

                }

                // For each record, update the progress bar
                var argPG = pnlProgressBar;
                Public_Variables.IncrementToolStripProgressBar(ref argPG);
                pnlProgressBar = argPG;

                Application.DoEvents();
            }

            // Don't show until download is done
            pnlProgressBar.Visible = false;
            // Reset the value of the progress bar
            pnlProgressBar.Value = 0;
            // Set the maximum updates for the progress bar
            pnlProgressBar.Maximum = TotalUpdateItems + 1;

            if (Query3rdPartySource)
            {
                pnlStatus.Text = "Downloading Item Prices...";
                Application.DoEvents();

                // Get the list of records to insert
                // *** Fuzzworks ***
                if (rbtnPriceSourceFW.Checked)
                {

                    FWPriceRecords = FuzzworksMarketPrices.GetPrices(TypeIDUpdatePriceList);

                    if (FWPriceRecords == null)
                    {
                        // There was an error in the request 
                        PriceDLError = FuzzworksMarketPrices.GetErrorData();
                        Interaction.MsgBox("Fuzzworks Market Server is Unavailable" + '\r' + PriceDLError.Description + '\r' + "Please try again later", Constants.vbExclamation, Text);
                        UpdatePricesCacheRet = false;
                        return UpdatePricesCacheRet;
                    }

                    // Show the progress bar now and update status
                    pnlProgressBar.Visible = true;
                    pnlStatus.Text = "Updating Price Cache...";
                    Application.DoEvents();

                    Public_Variables.EVEDB.BeginSQLiteTransaction();

                    // Loop through the price records and insert each one
                    var loopTo1 = FWPriceRecords.Count - 1;
                    for (i = 0; i <= loopTo1; i++)
                    {

                        if (Public_Variables.CancelUpdatePrices)
                        {
                            break;
                        }

                        // Insert record in Cache
                        {
                            var withBlock = FWPriceRecords[i];
                            // First, delete the record
                            SQL = "DELETE FROM ITEM_PRICES_CACHE WHERE TYPEID = " + withBlock.TypeID.ToString() + " AND RegionOrSystem = " + withBlock.PriceLocation + " AND PRICE_SOURCE = " + UpdatePricesDataSource;
                            Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                            // Insert new data
                            SQL = "INSERT INTO ITEM_PRICES_CACHE (typeID, buyVolume, buyAvg, buyweightedAvg, buyMax, buyMin, buyStdDev, buyMedian, buyPercentile, buyVariance, ";
                            SQL += "sellVolume, sellAvg, sellweightedAvg, sellMax, sellMin, sellStdDev, sellMedian, sellPercentile, sellVariance, RegionOrSystem, UpdateDate, PRICE_SOURCE) VALUES ";
                            SQL += "(" + withBlock.TypeID.ToString() + "," + withBlock.BuyVolume.ToString() + "," + withBlock.BuyWeightedAveragePrice.ToString() + "," + withBlock.BuyWeightedAveragePrice.ToString() + "," + withBlock.BuyMaxPrice.ToString() + "," + withBlock.BuyMinPrice.ToString() + "," + withBlock.BuyStdDev.ToString() + "," + withBlock.BuyMedian.ToString() + "," + withBlock.BuyPercentile.ToString() + "," + "0" + ",";
                            SQL += withBlock.SellVolume.ToString() + "," + withBlock.SellWeightedAveragePrice.ToString() + "," + withBlock.SellWeightedAveragePrice.ToString() + "," + withBlock.SellMaxPrice.ToString() + "," + withBlock.SellMinPrice.ToString() + "," + withBlock.SellStdDev.ToString() + "," + withBlock.SellMedian.ToString() + "," + withBlock.SellPercentile.ToString() + "," + "0" + ",";
                            SQL += withBlock.PriceLocation + ",'" + Strings.Format(DateTime.Now, Public_Variables.SQLiteDateFormat) + "'," + UpdatePricesDataSource + ")";

                        }

                        Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                        // For each record, update the progress bar
                        var argPG1 = pnlProgressBar;
                        Public_Variables.IncrementToolStripProgressBar(ref argPG1);
                        pnlProgressBar = argPG1;

                        Application.DoEvents();
                    }

                    Public_Variables.EVEDB.CommitSQLiteTransaction();
                }

                else // *** EVE Marketer ***
                {
                    EMPriceRecords = EVEMarketerPrices.GetPrices(TypeIDUpdatePriceList);

                    if (EMPriceRecords == null)
                    {
                        // There was an error in the request 
                        PriceDLError = EVEMarketerPrices.GetErrorData();
                        Interaction.MsgBox("EVE Marketer Server is Unavailable" + '\r' + PriceDLError.Description + '\r' + "Please try again later", Constants.vbExclamation, Text);
                        UpdatePricesCacheRet = false;
                        return UpdatePricesCacheRet;
                    }

                    // Show the progress bar now and update status
                    pnlProgressBar.Visible = true;
                    pnlStatus.Text = "Updating Price Cache...";
                    Application.DoEvents();

                    Public_Variables.EVEDB.BeginSQLiteTransaction();

                    // Loop through the price records and insert each one
                    var loopTo2 = EMPriceRecords.Count - 1;
                    for (i = 0; i <= loopTo2; i++)
                    {

                        if (Public_Variables.CancelUpdatePrices)
                        {
                            break;
                        }

                        // Insert record in Cache
                        {
                            var withBlock1 = EMPriceRecords[i];
                            // First, delete the record 
                            SQL = "DELETE FROM ITEM_PRICES_CACHE WHERE TYPEID = " + withBlock1.TypeID.ToString() + " AND RegionOrSystem = " + withBlock1.PriceLocation + " AND PRICE_SOURCE = " + UpdatePricesDataSource;
                            Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                            // Insert new data
                            SQL = "INSERT INTO ITEM_PRICES_CACHE (typeID, buyVolume, buyAvg, buyweightedAvg, buyMax, buyMin, buyStdDev, buyMedian, buyPercentile, buyVariance, sellVolume, ";
                            SQL += " sellAvg, sellweightedAvg, sellMax, sellMin, sellStdDev, sellMedian, sellPercentile, sellVariance, RegionOrSystem, UpdateDate, PRICE_SOURCE) VALUES ";
                            SQL += "(" + withBlock1.TypeID.ToString() + "," + withBlock1.BuyVolume.ToString() + "," + withBlock1.BuyAvgPrice.ToString() + "," + withBlock1.BuyWeightedAveragePrice.ToString() + "," + withBlock1.BuyMaxPrice.ToString() + "," + withBlock1.BuyMinPrice.ToString() + "," + withBlock1.BuyStdDev.ToString() + "," + withBlock1.BuyMedian.ToString() + "," + withBlock1.BuyPercentile.ToString() + "," + withBlock1.BuyVariance.ToString() + ",";
                            SQL += withBlock1.SellVolume.ToString() + "," + withBlock1.SellAvgPrice.ToString() + "," + withBlock1.SellWeightedAveragePrice.ToString() + "," + withBlock1.SellMaxPrice.ToString() + "," + withBlock1.SellMinPrice.ToString() + "," + withBlock1.SellStdDev.ToString() + "," + withBlock1.SellMedian.ToString() + "," + withBlock1.SellPercentile.ToString() + "," + withBlock1.SellVariance.ToString() + ",";
                            SQL += "'" + withBlock1.PriceLocation + "','" + Strings.Format(DateTime.Now, Public_Variables.SQLiteDateFormat) + "'," + UpdatePricesDataSource + ")";

                        }

                        Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                        // For each record, update the progress bar
                        var argPG2 = pnlProgressBar;
                        Public_Variables.IncrementToolStripProgressBar(ref argPG2);
                        pnlProgressBar = argPG2;

                        Application.DoEvents();
                    }

                    Public_Variables.EVEDB.CommitSQLiteTransaction();

                }
            }

            if (Public_Variables.CancelUpdatePrices)
            {
                Interaction.MsgBox("Price Update Canceled", Constants.vbInformation, Application.ProductName);
            }

            // Done updating, hide the progress bar
            Public_Variables.CancelUpdatePrices = false;
            pnlProgressBar.Visible = false;
            UpdatePricesCacheRet = true;
            pnlStatus.Text = "";
            Application.DoEvents();
            return UpdatePricesCacheRet;

        }

        // Function just queries the items table based on the item type selection then updates the list
        public void UpdatePriceList()
        {
            SQLiteDataReader readerMats;
            string SQL;
            string TechSQL = "";
            bool TechChecked = false;
            ListViewItem lstViewRow;
            bool ItemChecked = false;

            // See if we want to run the update
            // This will happen in times of things like selecting all boxes
            if (!RunUpdatePriceList)
            {
                return;
            }

            // Working
            Cursor = Cursors.WaitCursor;
            pnlStatus.Text = "Refreshing List...";
            Application.DoEvents();

            // Add the marketGroupID to the list for checks later
            SQL = "SELECT ITEM_ID, ITEM_NAME, ITEM_GROUP, PRICE, MANUFACTURE, marketGroupID, PRICE_TYPE FROM ITEM_PRICES, INVENTORY_TYPES ";
            SQL += "WHERE ITEM_PRICES.ITEM_ID = INVENTORY_TYPES.typeID AND (";

            // Materials & Research Equipment Grid
            // Materials First
            if (chkAdvancedProtectiveTechnology.Checked)
            {
                SQL += "ITEM_GROUP = 'Advanced Protective Technology' OR ";
                ItemChecked = true;
            }
            if (chkFactionMaterials.Checked)
            {
                SQL += "(ITEM_GROUP IN ('Materials and Compounds','Artifacts and Prototypes','Rogue Drone Components') OR ITEM_GROUP LIKE 'Decryptors -%') OR ";
                ItemChecked = true;
            }
            if (chkGas.Checked)
            {
                SQL += "ITEM_GROUP IN ('Harvestable Cloud','Compressed Gas') OR ";
                ItemChecked = true;
            }
            if (chkIceProducts.Checked)
            {
                SQL += "ITEM_GROUP = 'Ice Product' OR ";
                ItemChecked = true;
            }
            if (chkMinerals.Checked)
            {
                SQL += "ITEM_GROUP = 'Mineral' OR ";
                ItemChecked = true;
            }
            if (chkMolecularForgingTools.Checked)
            {
                SQL += "ITEM_GROUP = 'Molecular-Forging Tools' OR ";
                ItemChecked = true;
            }
            if (chkNamedComponents.Checked)
            {
                SQL += "ITEM_GROUP = 'Named Components' OR ";
                ItemChecked = true;
            }
            if (chkPlanetary.Checked)
            {
                SQL += "ITEM_CATEGORY LIKE 'Planetary%' OR ";
                ItemChecked = true;
            }

            // Raw Materials (Ores)
            if (chkRawMaterials.Checked)
            {
                SQL += "(ITEM_CATEGORY = 'Asteroid' OR ITEM_GROUP = 'Abyssal Materials') OR ";
                ItemChecked = true;
            }

            // Reaction Materials
            if (chkAdvancedMats.Checked)
            {
                SQL += "ITEM_GROUP = 'Composite' OR ";
                ItemChecked = true;
            }
            if (chkBoosterMats.Checked)
            {
                SQL += "ITEM_GROUP = 'Biochemical Material' OR ";
                ItemChecked = true;
            }
            if (chkMolecularForgedMaterials.Checked)
            {
                SQL += "ITEM_GROUP = 'Molecular-Forged Materials' OR ";
                ItemChecked = true;
            }
            if (chkPolymers.Checked)
            {
                SQL += "ITEM_GROUP = 'Hybrid Polymers' OR ";
                ItemChecked = true;
            }
            if (chkProcessedMats.Checked)
            {
                SQL += "ITEM_GROUP = 'Intermediate Materials' OR ";
                ItemChecked = true;
            }
            if (chkRawMoonMats.Checked)
            {
                SQL += "ITEM_GROUP = 'Moon Materials' OR ";
                ItemChecked = true;
            }

            if (chkSalvage.Checked)
            {
                SQL += "ITEM_GROUP IN ('Salvaged Materials','Ancient Salvage') OR ";
                ItemChecked = true;
            }

            // Research Equipment
            if (chkAncientRelics.Checked)
            {
                SQL += "ITEM_CATEGORY = 'Ancient Relics' OR ";
                ItemChecked = true;
            }
            if (chkDatacores.Checked)
            {
                SQL += "ITEM_GROUP = 'Datacores' OR ";
                ItemChecked = true;
            }
            if (chkDecryptors.Checked)
            {
                SQL += "ITEM_CATEGORY = 'Decryptors' OR ";
                ItemChecked = true;
            }
            if (chkRDb.Checked)
            {
                SQL += "ITEM_NAME LIKE 'R.Db%' OR ";
                ItemChecked = true;
            }

            // Misc and Blueprints
            if (chkBPCs.Checked)
            {
                SQL += "ITEM_CATEGORY = 'Blueprint' OR ";
                ItemChecked = true;
            }
            if (chkMisc.Checked) // Commodities = Shattered Villard Wheel
            {
                SQL += "ITEM_GROUP IN ('General','Livestock','Radioactive','Biohazard','Commodities','Empire Insignia Drops','Criminal Tags','Miscellaneous','Unknown Components','Lease') OR ";
                ItemChecked = true;
            }

            // Other Manufacturables
            if (chkCapT2Components.Checked)
            {
                SQL += "ITEM_GROUP = 'Advanced Capital Construction Components' OR ";
                ItemChecked = true;
            }
            if (chkComponents.Checked)
            {
                SQL += "ITEM_GROUP = 'Construction Components' OR ";
                ItemChecked = true;
            }
            if (chkFuelBlocks.Checked)
            {
                SQL += "ITEM_GROUP = 'Fuel Block' OR ";
                ItemChecked = true;
            }
            if (chkProtectiveComponents.Checked)
            {
                SQL += "ITEM_GROUP = 'Protective Components' OR ";
                ItemChecked = true;
            }
            if (chkRAM.Checked)
            {
                SQL += "ITEM_NAME LIKE 'R.A.M.%' OR ";
                ItemChecked = true;
            }
            if (chkNoBuildItems.Checked)
            {
                SQL += "MANUFACTURE = -1 OR ";
                ItemChecked = true;
            }
            if (chkCapitalShipComponents.Checked)
            {
                SQL += "ITEM_GROUP = 'Capital Construction Components' OR ";
                ItemChecked = true;
            }
            if (chkStructureComponents.Checked)
            {
                SQL += "ITEM_GROUP = 'Structure Components' OR ";
                ItemChecked = true;
            }
            if (chkSubsystemComponents.Checked)
            {
                SQL += "ITEM_GROUP = 'Hybrid Tech Components' OR ";
                ItemChecked = true;
            }
            if (chkBoosters.Checked)
            {
                SQL += "ITEM_GROUP = 'Booster' OR ";
                ItemChecked = true;
            }

            // All other manufactured items
            if (chkImplants.Checked)
            {
                SQL += "(ITEM_GROUP = 'Cyberimplant' OR (ITEM_CATEGORY = 'Implant' AND ITEM_GROUP <> 'Booster')) OR ";
                ItemChecked = true;
            }
            if (chkDeployables.Checked)
            {
                SQL += "ITEM_CATEGORY = 'Deployable' OR ";
                ItemChecked = true;
            }
            if (chkStructureModules.Checked)
            {
                SQL += "(ITEM_CATEGORY = 'Structure Module' AND ITEM_GROUP NOT LIKE '%Rig%') OR ";
                ItemChecked = true;
            }
            if (chkCelestials.Checked)
            {
                SQL += "(ITEM_CATEGORY IN ('Celestial','Orbitals','Sovereignty Structures','Station','Accessories','Infrastructure Upgrades')  AND ITEM_GROUP NOT IN ('Harvestable Cloud','Compressed Gas')) OR ";
                ItemChecked = true;
            }

            // Manufactured Items
            if (chkShips.Checked | chkModules.Checked | chkDrones.Checked | chkRigs.Checked | chkSubsystems.Checked | chkStructures.Checked | chkCharges.Checked | chkStructureRigs.Checked)
            {

                // Make sure we have at least one tech checked that is enabled
                TechChecked = CheckTechChecks();

                if (!TechChecked & !ItemChecked)
                {
                    // There isn't an item checked before this and these items all require tech, so exit
                    ItemChecked = false;
                }
                else
                {
                    ItemChecked = true;
                }

                // If they choose a tech level, then build this part of the SQL query
                if (TechChecked)
                {
                    if (PriceCheckT1Enabled)
                    {
                        if (chkPricesT1.Checked)
                        {
                            // Add to SQL query for tech level
                            TechSQL = TechSQL + "ITEM_TYPE = 1 OR ";
                        }
                    }

                    if (PriceCheckT2Enabled)
                    {
                        if (chkPricesT2.Checked)
                        {
                            // Add to SQL query for tech level
                            TechSQL = TechSQL + "ITEM_TYPE = 2 OR ";
                        }
                    }

                    if (PriceCheckT3Enabled)
                    {
                        if (chkPricesT3.Checked)
                        {
                            // Add to SQL query for tech level
                            TechSQL = TechSQL + "ITEM_TYPE = 14 OR ";
                        }
                    }

                    // Add the Pirate, Storyline, Navy search string
                    // Storyline
                    if (PriceCheckT4Enabled)
                    {
                        if (chkPricesT4.Checked)
                        {
                            // Add to SQL query for tech level
                            TechSQL = TechSQL + "ITEM_TYPE = 3 OR ";
                        }
                    }

                    // Navy
                    if (PriceCheckT5Enabled)
                    {
                        if (chkPricesT5.Checked)
                        {
                            // Add to SQL query for tech level
                            TechSQL = TechSQL + "ITEM_TYPE = 16 OR ";
                        }
                    }

                    // Pirate
                    if (PriceCheckT6Enabled)
                    {
                        if (chkPricesT6.Checked)
                        {
                            // Add to SQL query for tech level
                            TechSQL = TechSQL + "ITEM_TYPE = 15 OR ";
                        }
                    }

                    // Format TechSQL - Add on Meta codes - 21,22,23,24 are T3
                    if (!string.IsNullOrEmpty(TechSQL))
                    {
                        TechSQL = "(" + TechSQL.Substring(0, TechSQL.Length - 3) + "OR ITEM_TYPE IN (21,22,23,24)) ";
                    }

                    // Build Tech 1,2,3 Manufactured Items
                    if (chkCharges.Checked)
                    {
                        SQL += "(ITEM_CATEGORY = 'Charge' AND " + TechSQL;
                        if (cmbPriceChargeTypes.Text != "All Charge Types")
                        {
                            SQL += " AND ITEM_GROUP = '" + cmbPriceChargeTypes.Text + "'";
                        }
                        SQL += ") OR ";
                    }
                    if (chkDrones.Checked)
                    {
                        SQL += "(ITEM_CATEGORY IN ('Drone', 'Fighter') AND " + TechSQL + ") OR ";
                    }
                    if (chkModules.Checked) // Not rigs but Modules
                    {
                        SQL += "(ITEM_CATEGORY = 'Module' AND ITEM_GROUP NOT LIKE 'Rig%' AND " + TechSQL + ") OR ";
                    }
                    if (chkShips.Checked)
                    {
                        SQL += "(ITEM_CATEGORY = 'Ship' AND " + TechSQL;
                        if (cmbPriceShipTypes.Text != "All Ship Types")
                        {
                            SQL += " AND ITEM_GROUP = '" + cmbPriceShipTypes.Text + "'";
                        }
                        SQL += ") OR ";
                    }
                    if (chkSubsystems.Checked)
                    {
                        SQL += "(ITEM_CATEGORY = 'Subsystem' AND " + TechSQL + ") OR ";
                    }
                    if (chkStructureRigs.Checked)
                    {
                        SQL += "(ITEM_CATEGORY = 'Structure Rigs' AND " + TechSQL + ") OR ";
                    }
                    if (chkRigs.Checked) // Rigs
                    {
                        SQL += "((ITEM_CATEGORY = 'Module' AND ITEM_GROUP LIKE 'Rig%' AND " + TechSQL + ") OR (ITEM_CATEGORY = 'Structure Module' AND ITEM_GROUP LIKE '%Rig%')) OR ";
                    }
                    if (chkStructures.Checked)
                    {
                        SQL += "((ITEM_CATEGORY IN ('Starbase','Structure') AND " + TechSQL + ") OR ITEM_GROUP = 'Station Components') OR ";
                    }
                }
                else
                {
                    // No tech level chosen, so just continue with other options and skip these that require a tech selection
                }
            }

            // Leave function if no items checked
            if (!ItemChecked)
            {
                lstPricesView.Items.Clear();
            }
            else
            {
                // Take off last OR and add the final )
                SQL = SQL.Substring(0, SQL.Length - 4);
                SQL += ") ";

                // Search based on text
                if (!string.IsNullOrEmpty(txtPriceItemFilter.Text))
                {
                    SQL += "AND " + Public_Variables.GetSearchText(txtPriceItemFilter.Text, "ITEM_NAME", "ITEM_GROUP") + " ";
                }

                // See if we want prices that are 0 only
                if (chkUpdatePricesNoPrice.Checked)
                {
                    SQL += "AND PRICE = 0 ";
                }

                SQL += "ORDER BY ITEM_GROUP, ITEM_CATEGORY, ITEM_NAME";

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerMats = Public_Variables.DBCommand.ExecuteReader();

                // Clear List
                lstPricesView.Items.Clear();
                // Disable sorting because it will crawl after we update if there are too many records
                lstPricesView.ListViewItemSorter = null;
                lstPricesView.BeginUpdate();
                Cursor = Cursors.WaitCursor;

                // Fill list
                while (readerMats.Read())
                {
                    // ITEM_ID, ITEM_NAME, ITEM_GROUP, PRICE, MANUFACTURE
                    lstViewRow = new ListViewItem(Conversions.ToString(readerMats.GetValue(0))); // ID
                                                                                                 // The remaining columns are subitems  
                    lstViewRow.SubItems.Add(readerMats.GetString(2)); // Group
                    lstViewRow.SubItems.Add(readerMats.GetString(1)); // Name
                    lstViewRow.SubItems.Add(Strings.FormatNumber(readerMats.GetDouble(3), 2));
                    lstViewRow.SubItems.Add(Conversions.ToString(readerMats.GetValue(4)));
                    if (readerMats.GetValue(5) is DBNull)
                    {
                        lstViewRow.SubItems.Add("");
                    }
                    else
                    {
                        lstViewRow.SubItems.Add(readerMats.GetInt64(5).ToString());
                    }
                    // Price Type - look it up
                    lstViewRow.SubItems.Add(readerMats.GetString(6));

                    lstPricesView.Items.Add(lstViewRow);
                }

                readerMats.Close();

                // Now sort this
                SortOrder TempType;
                if (UpdatePricesColumnSortType == SortOrder.Ascending)
                {
                    TempType = SortOrder.Descending;
                }
                else
                {
                    TempType = SortOrder.Ascending;
                }
                ListView argRefListView = lstPricesView;
                Public_Variables.ListViewColumnSorter(UpdatePricesColumnClicked, ref argRefListView, ref UpdatePricesColumnClicked, ref TempType);
                Cursor = Cursors.Default;
                lstPricesView.EndUpdate();
            }

            // Reset
            txtListEdit.Visible = false;
            Cursor = Cursors.Default;
            Application.DoEvents();
            pnlStatus.Text = "";

        }

        // Makes sure a tech is enabled and checked for items that require tech based on saved values, not current due to disabling form
        private bool CheckTechChecks()
        {

            if (PriceCheckT1Enabled)
            {
                if (TechCheckBoxes[1].Checked)
                {
                    return true;
                }
            }

            if (PriceCheckT2Enabled)
            {
                if (TechCheckBoxes[2].Checked)
                {
                    return true;
                }
            }

            if (PriceCheckT3Enabled)
            {
                if (TechCheckBoxes[3].Checked)
                {
                    return true;
                }
            }

            if (PriceCheckT4Enabled)
            {
                if (TechCheckBoxes[4].Checked)
                {
                    return true;
                }
            }

            if (PriceCheckT5Enabled)
            {
                if (TechCheckBoxes[5].Checked)
                {
                    return true;
                }
            }

            if (PriceCheckT6Enabled)
            {
                if (TechCheckBoxes[6].Checked)
                {
                    return true;
                }
            }

            return false;

        }

        private void LoadPriceShipTypes()
        {
            string SQL;
            SQLiteDataReader readerShipType;

            // Load the select systems combobox with systems
            SQL = "SELECT groupName from inventory_types, inventory_groups, inventory_categories ";
            SQL += "WHERE  inventory_types.groupID = inventory_groups.groupID ";
            SQL += "AND inventory_groups.categoryID = inventory_categories.categoryID ";
            SQL += "AND categoryname = 'Ship' AND groupName NOT IN ('Rookie ship','Prototype Exploration Ship') ";
            SQL += "AND inventory_types.published <> 0  ";
            SQL += "GROUP BY groupName ";

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerShipType = Public_Variables.DBCommand.ExecuteReader();

            cmbPriceShipTypes.Items.Add("All Ship Types");

            while (readerShipType.Read())
                cmbPriceShipTypes.Items.Add(readerShipType.GetString(0));

            readerShipType.Close();

            cmbPriceShipTypes.Text = "All Ship Types";

        }

        private void LoadPriceChargeTypes()
        {
            string SQL;
            SQLiteDataReader readerChargeType;

            // Load the select systems combobox with systems
            SQL = "SELECT groupName from inventory_types, inventory_groups, inventory_categories ";
            SQL += "WHERE  inventory_types.groupID = inventory_groups.groupID ";
            SQL += "AND inventory_groups.categoryID = inventory_categories.categoryID ";
            SQL += "AND categoryname = 'Charge' ";
            SQL += "AND inventory_types.published <> 0 and inventory_groups.published <> 0 and inventory_categories.published <> 0 ";
            SQL += "GROUP BY groupName ";

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerChargeType = Public_Variables.DBCommand.ExecuteReader();

            cmbPriceChargeTypes.Items.Add("All Charge Types");

            while (readerChargeType.Read())
                cmbPriceChargeTypes.Items.Add(readerChargeType.GetString(0));

            readerChargeType.Close();

            cmbPriceChargeTypes.Text = "All Charge Types";

        }

        private void btnSavePricestoFile_Click(object sender, EventArgs e)
        {
            StreamWriter MyStream;
            string FileName;
            string OutputText;

            ListView.ListViewItemCollection Items;
            int i = 0;

            // Show the dialog
            string ExportTypeString;
            string Separator;
            string FileHeader;

            if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.CSVDataExport)
            {
                // Save file name with date
                FileName = "Price List - " + Strings.Format(DateTime.Now, "MMddyyyy") + ".csv";
                ExportTypeString = Public_Variables.CSVDataExport;
                Separator = ",";
                FileHeader = PriceListHeaderCSV;
                SaveFileDialog.Filter = "csv files (*.csv)|*.csv|All files (*.*)|*.*";
            }
            else if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.SSVDataExport)
            {
                // Save file name with date
                FileName = "Price List - " + Strings.Format(DateTime.Now, "MMddyyyy") + ".ssv";
                ExportTypeString = Public_Variables.SSVDataExport;
                Separator = ";";
                FileHeader = PriceListHeaderSSV;
                SaveFileDialog.Filter = "ssv files (*.ssv*)|*.ssv*|All files (*.*)|*.*";
            }
            else
            {
                // Save file name with date
                FileName = "Price List - " + Strings.Format(DateTime.Now, "MMddyyyy") + ".txt";
                ExportTypeString = Public_Variables.DefaultTextDataExport;
                Separator = "|";
                FileHeader = PriceListHeaderTXT;
                SaveFileDialog.Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*";
            }

            SaveFileDialog.FilterIndex = 1;
            SaveFileDialog.RestoreDirectory = true;
            SaveFileDialog.FileName = FileName;

            if (SaveFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    MyStream = File.CreateText(SaveFileDialog.FileName);

                    if (MyStream is not null)
                    {

                        // Output the buy list first
                        Items = lstPricesView.Items;

                        if (Items.Count > 0)
                        {
                            Cursor = Cursors.WaitCursor;

                            Application.DoEvents();

                            OutputText = FileHeader;
                            MyStream.Write(OutputText + Environment.NewLine);

                            foreach (ListViewItem Price in Items)
                            {
                                Application.DoEvents();
                                // Build the output text -"Group,Item Name,Price,Price Type,Raw Material,Type ID"
                                OutputText = Price.SubItems[1].Text + Separator;
                                OutputText = OutputText + Price.SubItems[2].Text + Separator;
                                if ((ExportTypeString ?? "") == Public_Variables.SSVDataExport)
                                {
                                    // Format to EU
                                    OutputText = OutputText + Public_Variables.ConvertUStoEUDecimal(Price.SubItems[3].Text) + Separator;
                                }
                                else
                                {
                                    OutputText = OutputText + Strings.Format(Price.SubItems[3].Text, "Fixed") + Separator;
                                }
                                OutputText = OutputText + Price.SubItems[6].Text + Separator;
                                // Manufacturing flag - set if raw mat or not (raw mats are not manufactured)
                                if (Price.SubItems[4].Text == "0")
                                {
                                    OutputText = OutputText + "TRUE" + Separator;
                                }
                                else
                                {
                                    OutputText = OutputText + "FALSE" + Separator;
                                }
                                OutputText = OutputText + Price.SubItems[0].Text;

                                MyStream.Write(OutputText + Environment.NewLine);
                            }

                        }

                        MyStream.Flush();
                        MyStream.Close();

                        Interaction.MsgBox("Price List Saved", Constants.vbInformation, Application.ProductName);

                    }
                }
                catch
                {
                    Interaction.MsgBox(Information.Err().Description, Constants.vbExclamation, Application.ProductName);
                }
            }

            // Done processing 
            Cursor = Cursors.Default;
            Refresh();
            Application.DoEvents();

        }

        private void btnLoadPricesfromFile_Click(object sender, EventArgs e)
        {
            string SQL;
            StreamReader BPStream = null;
            var openFileDialog1 = new OpenFileDialog();
            string Line;
            string Header = "";
            string[] ParsedLine;
            string Separator = "";
            string FileType;

            if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.CSVDataExport)
            {
                FileType = Public_Variables.CSVDataExport;
                openFileDialog1.Filter = "csv files (*.csv)|*.csv|All files (*.*)|*.*";
                openFileDialog1.FileName = "*.csv";
                openFileDialog1.FilterIndex = 2;
                openFileDialog1.RestoreDirectory = true;
            }
            else if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.SSVDataExport)
            {
                FileType = Public_Variables.SSVDataExport;
                openFileDialog1.Filter = "ssv files (*.ssv*)|*.ssv*|All files (*.*)|*.*";
                openFileDialog1.FileName = "*.ssv";
                openFileDialog1.FilterIndex = 2;
                openFileDialog1.RestoreDirectory = true;
            }
            else
            {
                FileType = Public_Variables.DefaultTextDataExport;
                openFileDialog1.Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*";
                openFileDialog1.FileName = "*.txt";
                openFileDialog1.FilterIndex = 2;
                openFileDialog1.RestoreDirectory = true;
            }

            bool SavedgbPPValue = gbPriceProfile.Enabled;
            bool SavedgbSSValue = gbSingleSource.Enabled;

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                do
                {
                    try
                    {
                        BPStream = new StreamReader(openFileDialog1.FileName);

                        if (BPStream is not null)
                        {
                            // Read the file line by line here, start with headers
                            Header = BPStream.ReadLine();
                            Line = BPStream.ReadLine(); // First line of data

                            if (Line is null)
                            {
                                // Leave loop
                                break;
                            }
                            else
                            {
                                // disable the tab
                                DisableUpdatePricesTab(true);
                                gbPriceProfile.Enabled = false;
                                gbSingleSource.Enabled = false;
                            }

                            Public_Variables.EVEDB.BeginSQLiteTransaction();
                            Application.UseWaitCursor = true;

                            while (Line is not null)
                            {
                                Application.DoEvents();
                                // Format for IPH saved file is is: Group Name, Item Name, Price, Price Type, Raw Material, Type ID

                                // Parse it
                                switch (FileType ?? "")
                                {
                                    case Public_Variables.CSVDataExport:
                                        {
                                            ParsedLine = Line.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                            break;
                                        }
                                    case Public_Variables.SSVDataExport:
                                        {
                                            ParsedLine = Line.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries); // Text
                                            break;
                                        }

                                    default:
                                        {
                                            // See if this is an IPH saved file or an EVE Client file
                                            if (Header == "price,volRemaining,typeID,range,orderID,volEntered,minVolume,bid,issueDate,duration,stationID,regionID,solarSystemID,jumps,")
                                            {
                                                // This is the EVE Client format so just throw a message and exit
                                                ParsedLine = null;
                                                Interaction.MsgBox("This file was exprted by the EVE Client. IPH does not load prices from the EVE Client export.", Constants.vbInformation, Application.ProductName);
                                                goto ExitPRocessing;
                                            }
                                            else
                                            {
                                                // IPH format
                                                ParsedLine = Line.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                                            }

                                            break;
                                        }
                                }

                                // Loop through and update the price and price type, the rest is static
                                SQL = "UPDATE ITEM_PRICES_FACT SET ";
                                if ((FileType ?? "") == Public_Variables.SSVDataExport)
                                {
                                    // Need to swap periods and commas before inserting
                                    ParsedLine[2] = ParsedLine[2].Replace(".", ""); // Just replace the periods as they are commas for numbers, which aren't needed
                                    ParsedLine[2] = ParsedLine[2].Replace(",", "."); // now update the commas for decimal
                                }
                                else
                                {
                                    ParsedLine[2] = ParsedLine[2].Replace(",", "");
                                } // Make sure we format correctly, strip out any commas
                                SQL += "PRICE = " + ParsedLine[2] + ",";
                                SQL += "PRICE_TYPE = '" + ParsedLine[3] + "' ";
                                SQL += "WHERE ITEM_ID = " + ParsedLine[5];

                                // Update the record
                                Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                                Line = BPStream.ReadLine(); // Read next line

                            }

                            Public_Variables.EVEDB.CommitSQLiteTransaction();

                            Application.UseWaitCursor = false;
                            Interaction.MsgBox("Prices Loaded", Constants.vbInformation, Application.ProductName);

                        }
                    }
                    catch (Exception Ex)
                    {
                        Application.UseWaitCursor = false;
                        Public_Variables.EVEDB.RollbackSQLiteTransaction();
                        MessageBox.Show("Cannot read file from disk. Original error: " + Ex.Message);
                    }
                    finally
                    {
                        // Check this again, since we need to make sure we didn't throw an exception on open.
                        if (BPStream is not null)
                        {
                            BPStream.Close();
                        }
                    }
                }
                while (false);
            }

        ExitPRocessing:
            ;


            Application.UseWaitCursor = false;
            // Enable the tab
            DisableUpdatePricesTab(false);
            gbSingleSource.Enabled = SavedgbSSValue;
            gbPriceProfile.Enabled = SavedgbPPValue;
            UpdatePriceList();
            Application.DoEvents();

        }

        private void btnViewSavedStructures_Click(object sender, EventArgs e)
        {
            if (Public_Variables.frmViewStructures.Visible == false)
            {
                Public_Variables.frmViewStructures = new frmViewSavedStructures();
                Public_Variables.frmViewStructures.Show();
            }
        }

        #endregion

        #region Manufacturing

        #region Manufacturing Object Functions

        private void lstManufacturing_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.C && e.Control == true) // Copy
            {
                // Find the bp record selected
                var FoundItem = new ManufacturingItem();
                // Copy the bps to the clipboard or item name if bp isn't set
                string OutputText = "";

                for (int i = 0, loopTo = lstManufacturing.SelectedItems.Count - 1; i <= loopTo; i++)
                {
                    // Find the item clicked in the list of items then just send those values over
                    ManufacturingRecordIDToFind = Conversions.ToLong(lstManufacturing.SelectedItems[i].SubItems[0].Text);
                    FoundItem = FinalManufacturingItemList.Find(FindManufacturingItem);
                    OutputText += FoundItem.ItemName + Constants.vbCrLf;
                }

                // Remove last vbCRLF
                OutputText = OutputText.TrimEnd();

                Public_Variables.CopyTextToClipboard(OutputText);
            }

            else if (e.KeyCode == Keys.A && e.Control == true) // Select all
            {
                for (int i = 0, loopTo1 = lstManufacturing.Items.Count - 1; i <= loopTo1; i++)
                {
                    lstManufacturing.Items[i].Selected = true;
                    Application.DoEvents();
                }
            }

        }

        private void btnCalcShowAssets_Click(object sender, EventArgs e)
        {
            // Make sure it's not disposed
            if (Public_Variables.frmDefaultAssets == null)
            {
                // Make new form
                Public_Variables.frmDefaultAssets = new frmAssetsViewer(AssetWindow.ManufacturingTab);
            }
            else if (Public_Variables.frmDefaultAssets.IsDisposed)
            {
                // Make new form
                Public_Variables.frmDefaultAssets = new frmAssetsViewer(AssetWindow.ManufacturingTab);
            }

            // Now open the Asset List
            Public_Variables.frmDefaultAssets.Show();
            Public_Variables.frmDefaultAssets.Focus();

            Application.DoEvents();
        }

        private void cmbCalcFWManufUpgradeLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcFWCopyUpgradeLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcFWInventionUpgradeLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcFWUpgrade_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void CheckRelicCalcChecks()
        {
            int i;

            if (chkCalcT3.Checked)
            {
                if (!Public_Variables.FirstLoad)
                {
                    var loopTo = CalcRelicCheckboxes.Count() - 1;
                    for (i = 1; i <= loopTo; i++)
                    {
                        if (CalcRelicCheckboxes[i].Checked)
                        {
                            return;
                        }
                    }

                    // One wasn't checked, display message and check wrecked
                    Interaction.MsgBox("Must select at least one relic type", Constants.vbExclamation, Application.ProductName);
                    chkCalcRERelic1.Checked = true;
                }
            }

        }

        private void CheckDecryptorChecks()
        {
            int i;

            // Only check decryptor checks if they have T2 bp's checked
            if (chkCalcT2.Checked)
            {
                if (!Public_Variables.FirstLoad)
                {
                    var loopTo = CalcDecryptorCheckBoxes.Count() - 1;
                    for (i = 1; i <= loopTo; i++)
                    {
                        if (CalcDecryptorCheckBoxes[i].Checked)
                        {
                            goto CheckTechs;
                        }
                    }

                    // One wasn't checked, display message and check wrecked
                    Interaction.MsgBox("Must select at least one decryptor type", Constants.vbExclamation, Application.ProductName);
                    chkCalcDecryptor1.Checked = true;
                }
            }

        CheckTechs:
            ;


            if (chkCalcDecryptorforT2.Enabled & chkCalcDecryptorforT3.Enabled)
            {
                // If both enabled, one needs to be checked
                if (chkCalcDecryptorforT2.Checked == false & chkCalcDecryptorforT3.Checked == false)
                {
                    Interaction.MsgBox("Must select Decryptor if using Tech 2 and 3", Constants.vbExclamation, Application.ProductName);
                    chkCalcDecryptorforT2.Checked = true;
                }
            }
            else if (chkCalcDecryptorforT2.Enabled)
            {
                if (chkCalcDecryptorforT2.Checked == false)
                {
                    Interaction.MsgBox("Must select Decryptor if using Tech 2", Constants.vbExclamation, Application.ProductName);
                    chkCalcDecryptorforT2.Checked = true;
                }
            }
            else if (chkCalcDecryptorforT3.Enabled)
            {
                if (chkCalcDecryptorforT3.Checked == false)
                {
                    Interaction.MsgBox("Must select Decryptor if using Tech 3", Constants.vbExclamation, Application.ProductName);
                    chkCalcDecryptorforT3.Checked = true;
                }
            }

        }

        private void rbtnCalcRawT2MatType_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnCalcRawT2MatType.Checked)
            {
                SettingsVariables.UserManufacturingTabSettings.BuildT2T3Materials = BuildMatType.RawMaterials;
                ResetRefresh();
                ProcessT2MatSelection();
            }
        }

        private void rbtnCalcProcT2MatType_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnCalcProcT2MatType.Checked)
            {
                SettingsVariables.UserManufacturingTabSettings.BuildT2T3Materials = BuildMatType.ProcessedMaterials;
                ResetRefresh();
                ProcessT2MatSelection();
            }
        }

        private void rbtnCalcAdvT2MatType_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtnCalcAdvT2MatType.Checked)
            {
                SettingsVariables.UserManufacturingTabSettings.BuildT2T3Materials = BuildMatType.AdvMaterials;
                ResetRefresh();
                ProcessT2MatSelection();
            }
        }

        private void txtCalcProdLines_DoubleClick(object sender, EventArgs e)
        {
            // Enter the max lines we have
            txtCalcProdLines.Text = Public_Variables.SelectedCharacter.MaximumProductionLines.ToString();
        }

        private void txtCalcProdLines_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void txtCalcProdLines_TextChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void txtCalcBPs_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void txtCalcBPs_TextChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void txtCalcRuns_TextChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void txtCalcLabLines_DoubleClick(object sender, EventArgs e)
        {
            // Enter the max lab lines we have
            txtCalcLabLines.Text = Public_Variables.SelectedCharacter.MaximumLaboratoryLines.ToString();
        }

        private void txtCalcLabLines_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void txtCalcLabLines_TextChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcIgnoreLowSVR_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcAvgPriceDuration_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void cmbCalcAvgPriceDuration_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcIgnoreMinerals_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcIgnoreT1_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcTaxes_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcFees_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcFees_Click(object sender, EventArgs e)
        {
            if (chkCalcFees.Checked & chkCalcFees.CheckState == CheckState.Indeterminate) // Show rate box
            {
                txtCalcBrokerFeeRate.Visible = true;
            }
            else
            {
                txtCalcBrokerFeeRate.Visible = false;
            }
        }

        private void txtCalcBrokerFeeRate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtCalcBrokerFeeRate.Text = Public_Variables.GetFormattedPercentEntry(txtCalcBrokerFeeRate);
            }
        }

        private void txtCalcBrokerFeeRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers, decimal, percent or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPercentChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtCalcBrokerFeeRate_GotFocus(object sender, EventArgs e)
        {
            txtCalcBrokerFeeRate.SelectAll();
        }

        private void txtCalcBrokerFeeRate_LostFocus(object sender, EventArgs e)
        {
            txtCalcBrokerFeeRate.Text = Public_Variables.GetFormattedPercentEntry(txtCalcBrokerFeeRate);
        }

        private void chkCalcSellExessItems_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcUsage_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcIgnoreRAMS_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcIgnoreInvention_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcEstimateCopyCost_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcIgnoreInvention_CheckedChanged_1(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcIgnoreMinerals_CheckedChanged_1(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcIgnoreT1Item_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void rbtnCalcCompareAll_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void txtCalcSVRThreshold_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers, decimal, negative or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedDecimalChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void txtCalcSVRThreshold_TextChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcSVRIncludeNull_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void rbtnCalcCompareBuildBuy_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void rbtnCalcCompareRawMats_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void rbtnCalcCompareComponents_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcPPU_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcShipBPCNoD_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcShipBPCD_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcNonShipBPCNoD_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcNonShipBPCD_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcCanBuild_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcCanInvent_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void txtTempME_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers, negative or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedMETEChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void txtTempPE_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedMETEChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void txtCalcItemFilter_TextChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcRERelic1_CheckedChanged(object sender, EventArgs e)
        {
            CheckRelicCalcChecks();
            ResetRefresh();
        }

        private void chkCalcUseMaxBPCRunsNoRunsDecryptor_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcRERelic2_CheckedChanged(object sender, EventArgs e)
        {
            CheckRelicCalcChecks();
            ResetRefresh();
        }

        private void chkCalcRERelic3_CheckedChanged(object sender, EventArgs e)
        {
            CheckRelicCalcChecks();
            ResetRefresh();
        }

        private void btnCalcReset_Click(object sender, EventArgs e)
        {
            FirstManufacturingGridLoad = true; // Reset
            InitManufacturingTab();
            // Load the calc types because it won't get loaded if firstmanufacturinggridload = true
            LoadCalcBPTypes();
        }

        private void cmbCalcBPTypeFilter_DropDown(object sender, EventArgs e)
        {
            if (FirstLoadCalcBPTypes)
            {
                LoadCalcBPTypes();
                FirstLoadCalcBPTypes = false;
            }
        }

        private void cmbCalcBPTypeFilter_GotFocus(object sender, EventArgs e)
        {
            cmbCalcBPTypeFilter.SelectAll();
        }

        private void cmbCalcBPTypeFilter_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only let them select a bp by clicking
            int i;
            i = 0;
        }

        private void cmbCalcBPTypeFilter_SelectedValueChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcBPTypeFilter_Click(object sender, EventArgs e)
        {
            cmbCalcBPTypeFilter.SelectAll();
        }

        private void chkCalcOnlyOwnedBPOInvent_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcT1_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";

                // Disable NPC BPOs
                if (chkCalcT1.Checked == false)
                {
                    chkCalcNPCBPOs.Enabled = false;
                }
                else
                {
                    chkCalcNPCBPOs.Enabled = true;
                }

                ResetRefresh();
            }
        }

        private void chkCalcT2_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                EnableDisableT2T3Options();
            }
        }

        private void chkCalcT3_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                EnableDisableT2T3Options();
            }
        }

        // Enables and disables the checks on the screen when T2 or T3 is selected
        private void EnableDisableT2T3Options()
        {

            FirstLoadCalcBPTypes = true;
            cmbCalcBPTypeFilter.Text = "All Types";
            ResetRefresh();

            // If checked, show the options, disable if not
            if (chkCalcT2.Checked == true)
            {
                chkCalcCanInvent.Enabled = true;
                chkCalcCanInvent.Enabled = true;
                chkCalcIncludeT2Owned.Enabled = true;
                chkCalcDecryptorforT2.Enabled = true;
            }
            else
            {
                chkCalcCanInvent.Enabled = false;
                chkCalcCanInvent.Enabled = false;
                chkCalcIncludeT2Owned.Enabled = false;
                chkCalcDecryptorforT2.Enabled = false;
            }

            // If T3 checked, enable T3 options, else disable
            if (chkCalcT3.Checked == true)
            {
                gbCalcRelics.Enabled = true;
                chkCalcIncludeT3Owned.Enabled = true;
                chkCalcDecryptorforT3.Enabled = true;
            }
            else
            {
                gbCalcRelics.Enabled = false;
                chkCalcIncludeT3Owned.Enabled = false;
                chkCalcDecryptorforT3.Enabled = false;
            }

            if (chkCalcT3.Checked == false & chkCalcT2.Checked == false)
            {
                gbCalcInvention.Enabled = false;
            }
            else
            {
                gbCalcInvention.Enabled = true;
            }

            // Auto check if only one option enabled
            if (chkCalcDecryptorforT2.Enabled & chkCalcT2.Checked & chkCalcDecryptorforT3.Enabled == false)
            {
                // Auto check this
                chkCalcDecryptorforT2.Checked = true;
            }
            else if (chkCalcDecryptorforT3.Enabled & chkCalcT3.Checked & chkCalcDecryptorforT2.Enabled == false)
            {
                // Auto check this
                chkCalcDecryptorforT3.Checked = true;
            }

        }

        private void chkCalcT2_Click(object sender, EventArgs e)
        {
            CheckDecryptorChecks();
            ResetRefresh();
        }

        private void chkCalcT3_Click(object sender, EventArgs e)
        {
            CheckRelicCalcChecks();
            ResetRefresh();
        }

        private void chkCalcStoryline_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcNavyFaction_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcPirateFaction_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcNPCBPOs_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcShips_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcModules_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcDrones_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcAmmo_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcRigs_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcComponents_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcStationParts_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcSubsystems_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcStructures_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcBoosters_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcMisc_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcCelestials_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcReactions_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcStructureModules_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcDeployables_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void rbtnCalcBPOwned_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                gbCalcIncludeOwned.Enabled = true;
                ResetRefresh();
            }
        }

        private void rbtnCalcAllBPs_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                gbCalcIncludeOwned.Enabled = false;
                ResetRefresh();
            }
        }

        private void rbtnCalcBPFavorites_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                gbCalcIncludeOwned.Enabled = true;
                ResetRefresh();
            }
        }

        private void txtCalcItemFilter_KeyDown(object sender, KeyEventArgs e)
        {
            // Call ProcessCutCopyPasteSelect(txtCalcItemFilter, e)
            if (e.KeyCode == Keys.Enter)
            {
                ResetRefresh();
                DisplayManufacturingResults(false);
            }
        }

        private void btnCalcResetTextSearch_Click(object sender, EventArgs e)
        {
            txtCalcItemFilter.Text = "";
            txtCalcItemFilter.Focus();
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void txtCalcBPCCosts_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPriceChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void chkCalcDecryptor0_Click(object sender, EventArgs e)
        {
            // Change the name based on the check state
            if (chkCalcDecryptor0.CheckState == CheckState.Unchecked)
            {
                chkCalcDecryptor0.Text = "Optimal";
            }
            else if (chkCalcDecryptor0.CheckState == CheckState.Checked)
            {
                chkCalcDecryptor0.Text = "Optimal IPH";
            }
            else if (chkCalcDecryptor0.CheckState == CheckState.Indeterminate)
            {
                chkCalcDecryptor0.Text = "Optimal Profit";
            }

            if (!Public_Variables.FirstLoad)
            {
                // For this one, it's optimal so disable all the others if checked
                if (chkCalcDecryptor0.Checked)
                {
                    chkCalcDecryptor1.Enabled = false;
                    chkCalcDecryptor2.Enabled = false;
                    chkCalcDecryptor3.Enabled = false;
                    chkCalcDecryptor4.Enabled = false;
                    chkCalcDecryptor5.Enabled = false;
                    chkCalcDecryptor6.Enabled = false;
                    chkCalcDecryptor7.Enabled = false;
                    chkCalcDecryptor8.Enabled = false;
                    chkCalcDecryptor9.Enabled = false;
                }
                else
                {
                    chkCalcDecryptor1.Enabled = true;
                    chkCalcDecryptor2.Enabled = true;
                    chkCalcDecryptor3.Enabled = true;
                    chkCalcDecryptor4.Enabled = true;
                    chkCalcDecryptor5.Enabled = true;
                    chkCalcDecryptor6.Enabled = true;
                    chkCalcDecryptor7.Enabled = true;
                    chkCalcDecryptor8.Enabled = true;
                    chkCalcDecryptor9.Enabled = true;
                }
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptor1_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptor2_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptor3_CheckedChanged_1(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptor4_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptor5_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptor6_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptor7_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptor8_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptor9_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptorforT2_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcDecryptorforT3_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                CheckDecryptorChecks();
                ResetRefresh();
            }
        }

        private void chkCalcIncludeT2Owned_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcIncludeT3Owned_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcRaceAmarr_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcRaceCaldari_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcRaceGallente_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcRaceMinmatar_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcRacePirate_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcRaceOther_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcHistoryRegion_DropDown(object sender, EventArgs e)
        {
            if (!Public_Variables.CalcHistoryRegionLoaded)
            {
                var argRegionCombo = cmbCalcHistoryRegion;
                Public_Variables.LoadRegionCombo(ref argRegionCombo, cmbCalcHistoryRegion.Text);
                cmbCalcHistoryRegion = argRegionCombo;
                Public_Variables.CalcHistoryRegionLoaded = true;
            }
        }

        private void cmbCalcSVRRegion_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void cmbCalcSVRRegion_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void cmbCalcBuildTimeMod_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcSmall_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcMedium_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcLarge_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void chkCalcXL_CheckedChanged(object sender, EventArgs e)
        {
            if (!FirstManufacturingGridLoad)
            {
                FirstLoadCalcBPTypes = true;
                cmbCalcBPTypeFilter.Text = "All Types";
                ResetRefresh();
            }
        }

        private void btnCalcSelectColumns_Click(object sender, EventArgs e)
        {
            var f1 = new frmSelectManufacturingTabColumns();
            Public_Variables.ManufacturingTabColumnsChanged = false;
            f1.ShowDialog();

            // Now Refresh the grid if it changed
            if (Public_Variables.ManufacturingTabColumnsChanged)
            {
                if (lstManufacturing.Items.Count != 0)
                {
                    RefreshCalcData = true;
                    DisplayManufacturingResults(false);
                }
                else
                {
                    RefreshManufacturingTabColumns();
                }
            }
        }

        private void txtCalcTempME_TextChanged(object sender, EventArgs e)
        {
            var argMETETextBox = txtCalcTempME;
            Public_Variables.VerifyMETEEntry(ref argMETETextBox, "ME");
            txtCalcTempME = argMETETextBox;
        }

        private void txtCalcTempTE_TextChanged(object sender, EventArgs e)
        {
            var argMETETextBox = txtCalcTempTE;
            Public_Variables.VerifyMETEEntry(ref argMETETextBox, "TE");
            txtCalcTempTE = argMETETextBox;
        }

        private void chkCalcAutoCalcT2NumBPs_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void lstManufacturing_ColumnClick(object sender, ColumnClickEventArgs e)
        {

            ListView argRefListView = lstManufacturing;
            Public_Variables.ListViewColumnSorter(e.Column, ref argRefListView, ref ManufacturingColumnClicked, ref ManufacturingColumnSortType);

        }

        private void txtCalcIPHThreshold_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers, decimal, negative or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedDecimalChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void txtCalcIPHThreshold_LostFocus(object sender, EventArgs e)
        {
            txtCalcIPHThreshold.Text = Strings.FormatNumber(txtCalcIPHThreshold.Text, 2);
        }

        private void txtCalcProfitThreshold_KeyPress(object sender, KeyPressEventArgs e)
        {

            if (chkCalcProfitThreshold.Text.Contains("%"))
            {
                // Only allow numbers, decimal, negative or backspace
                if (e.KeyChar != ControlChars.Back)
                {
                    if (Public_Variables.allowedPercentChars.IndexOf(e.KeyChar) == -1)
                    {
                        // Invalid Character
                        e.Handled = true;
                    }
                    else
                    {
                        ProfitPercentText = txtCalcProfitThreshold.Text;
                        ResetRefresh();
                    }
                }
            }
            // Only allow numbers, decimal, negative or backspace
            else if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedDecimalChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ProfitText = txtCalcProfitThreshold.Text;
                    ResetRefresh();
                }
            }
        }

        private void txtCalcProfitThreshold_LostFocus(object sender, EventArgs e)
        {

            if (chkCalcProfitThreshold.Text.Contains("%"))
            {
                txtCalcProfitThreshold.Text = Strings.FormatPercent(Conversions.ToDouble(txtCalcProfitThreshold.Text.Replace("%", "")) / 100d, 1);
            }
            else
            {
                txtCalcProfitThreshold.Text = Strings.FormatNumber(txtCalcProfitThreshold.Text, 2);
            }
        }

        private void txtCalcVolumeThreshold_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow postive numbers
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
                else
                {
                    ResetRefresh();
                }
            }
        }

        private void txtCalcVolumeThreshold_LostFocus(object sender, EventArgs e)
        {
            txtCalcVolumeThreshold.Text = Strings.FormatNumber(txtCalcVolumeThreshold.Text, 0);
        }

        private void cmbCalcPriceTrend_SelectedIndexChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void txtCalcIPHThreshold_TextChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void txtCalcProfitThreshold_TextChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void txtCalcVolumeThreshold_TextChanged(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void chkCalcMinBuildTimeFilter_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
            if (chkCalcMinBuildTimeFilter.Checked)
            {
                tpMinBuildTimeFilter.Enabled = true;
            }
            else
            {
                tpMinBuildTimeFilter.Enabled = false;
            }
        }

        private void chkCalcMaxBuildTimeFilter_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
            if (chkCalcMaxBuildTimeFilter.Checked)
            {
                tpMaxBuildTimeFilter.Enabled = true;
            }
            else
            {
                tpMaxBuildTimeFilter.Enabled = false;
            }
        }

        private void chkCalcIPHThreshold_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
            if (chkCalcIPHThreshold.Checked)
            {
                txtCalcIPHThreshold.Enabled = true;
            }
            else
            {
                txtCalcIPHThreshold.Enabled = false;
            }
        }

        private void chkCalcProfitThreshold_Click(object sender, EventArgs e)
        {

            // Save the value
            if (txtCalcProfitThreshold.Text.Contains("%"))
            {
                ProfitPercentText = Strings.Trim(txtCalcProfitThreshold.Text);
                if (!Information.IsNumeric(ProfitPercentText.Replace("%", "")))
                {
                    ProfitPercentText = "0.0%";
                }
            }
            else
            {
                ProfitText = Strings.Trim(txtCalcProfitThreshold.Text);
                if (ProfitText.Contains("%"))
                {
                    ProfitText = ProfitText.Replace("%", "");
                }
                if (!Information.IsNumeric(ProfitText))
                {
                    ProfitText = "0.00";
                }
            }

            // Change the name based on the check state
            if (chkCalcProfitThreshold.CheckState != CheckState.Indeterminate)
            {
                chkCalcProfitThreshold.Text = "Profit Threshold:";
                txtCalcProfitThreshold.Text = Strings.FormatNumber(ProfitText, 2);
            }
            else if (chkCalcProfitThreshold.CheckState == CheckState.Indeterminate)
            {
                chkCalcProfitThreshold.Text = "Profit % Threshold:";
                txtCalcProfitThreshold.Text = Strings.FormatPercent(Conversions.ToDouble(ProfitPercentText.Replace("%", "")) / 100d);
            }

            if (!Public_Variables.FirstLoad)
            {
                // For this one, it's optimal so disable all the others if checked
                if (chkCalcProfitThreshold.CheckState != CheckState.Unchecked)
                {
                    txtCalcProfitThreshold.Enabled = true;
                }
                else
                {
                    txtCalcProfitThreshold.Enabled = false;
                }
                ResetRefresh();
            }
        }

        private void chkCalcVolumeThreshold_CheckedChanged(object sender, EventArgs e)
        {
            ResetRefresh();
            if (chkCalcVolumeThreshold.Checked)
            {
                txtCalcVolumeThreshold.Enabled = true;
            }
            else
            {
                txtCalcVolumeThreshold.Enabled = false;
            }
        }

        private void tpMinBuildTimeFilter_TimeChange(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        private void tpMaxBuildTimeFilter_TimeChange(object sender, EventArgs e)
        {
            ResetRefresh();
        }

        #endregion

        #region Column Select Functions

        // Clears the list and rebuilds it with columns they selected
        private void RefreshManufacturingTabColumns()
        {

            LoadManufacturingTabColumnPositions();
            lstManufacturing.Clear();
            AddingColumns = true;

            // Add the first hidden column
            lstManufacturing.Columns.Add("ListID");
            lstManufacturing.Columns[0].Width = 0;

            // Now load all the columns in order of the settings
            for (int i = 1, loopTo = ColumnPositions.Count() - 1; i <= loopTo; i++)
            {
                if (!string.IsNullOrEmpty(ColumnPositions[i]))
                {
                    lstManufacturing.Columns.Add(ColumnPositions[i], GetColumnWidth(ColumnPositions[i]), GetColumnAlignment(ColumnPositions[i]));
                }
            }

            // Hack to get around the scroll bar not showing
            lstManufacturing.AutoResizeColumn(0, ColumnHeaderAutoResizeStyle.None);

            AddingColumns = false;

        }

        // Takes the column settings and saves the order to an array
        private void LoadManufacturingTabColumnPositions()
        {

            for (int i = 0, loopTo = ColumnPositions.Count() - 1; i <= loopTo; i++)
                ColumnPositions[i] = "";

            {
                ref var withBlock = ref SettingsVariables.UserManufacturingTabColumnSettings;
                ColumnPositions[withBlock.ItemCategory] = ProgramSettings.ItemCategoryColumnName;
                ColumnPositions[withBlock.ItemGroup] = ProgramSettings.ItemGroupColumnName;
                ColumnPositions[withBlock.ItemName] = ProgramSettings.ItemNameColumnName;
                ColumnPositions[withBlock.Owned] = ProgramSettings.OwnedColumnName;
                ColumnPositions[withBlock.Tech] = ProgramSettings.TechColumnName;
                ColumnPositions[withBlock.BPME] = ProgramSettings.BPMEColumnName;
                ColumnPositions[withBlock.BPTE] = ProgramSettings.BPTEColumnName;
                ColumnPositions[withBlock.Inputs] = ProgramSettings.InputsColumnName;
                ColumnPositions[withBlock.Compared] = ProgramSettings.ComparedColumnName;
                ColumnPositions[withBlock.TotalRuns] = ProgramSettings.TotalRunsColumnName;
                ColumnPositions[withBlock.SingleInventedBPCRuns] = ProgramSettings.SingleInventedBPCRunsColumnName;
                ColumnPositions[withBlock.ProductionLines] = ProgramSettings.ProductionLinesColumnName;
                ColumnPositions[withBlock.LaboratoryLines] = ProgramSettings.LaboratoryLinesColumnName;
                ColumnPositions[withBlock.TotalInventionCost] = ProgramSettings.TotalInventionCostColumnName;
                ColumnPositions[withBlock.TotalCopyCost] = ProgramSettings.TotalCopyCostColumnName;
                ColumnPositions[withBlock.Taxes] = ProgramSettings.TaxesColumnName;
                ColumnPositions[withBlock.BrokerFees] = ProgramSettings.BrokerFeesColumnName;
                ColumnPositions[withBlock.BPProductionTime] = ProgramSettings.BPProductionTimeColumnName;
                ColumnPositions[withBlock.TotalProductionTime] = ProgramSettings.TotalProductionTimeColumnName;
                ColumnPositions[withBlock.CopyTime] = ProgramSettings.CopyTimeColumnName;
                ColumnPositions[withBlock.InventionTime] = ProgramSettings.InventionTimeColumnName;
                ColumnPositions[withBlock.ItemMarketPrice] = ProgramSettings.ItemMarketPriceColumnName;
                ColumnPositions[withBlock.Profit] = ProgramSettings.ProfitColumnName;
                ColumnPositions[withBlock.ProfitPercentage] = ProgramSettings.ProfitPercentageColumnName;
                ColumnPositions[withBlock.IskperHour] = ProgramSettings.IskperHourColumnName;
                ColumnPositions[withBlock.SVR] = ProgramSettings.SVRColumnName;
                ColumnPositions[withBlock.SVRxIPH] = ProgramSettings.SVRxIPHColumnName;
                ColumnPositions[withBlock.PriceTrend] = ProgramSettings.PriceTrendColumnName;
                ColumnPositions[withBlock.TotalItemsSold] = ProgramSettings.TotalItemsSoldColumnName;
                ColumnPositions[withBlock.TotalOrdersFilled] = ProgramSettings.TotalOrdersFilledColumnName;
                ColumnPositions[withBlock.AvgItemsperOrder] = ProgramSettings.AvgItemsperOrderColumnName;
                ColumnPositions[withBlock.CurrentSellOrders] = ProgramSettings.CurrentSellOrdersColumnName;
                ColumnPositions[withBlock.CurrentBuyOrders] = ProgramSettings.CurrentBuyOrdersColumnName;
                ColumnPositions[withBlock.ItemsinProduction] = ProgramSettings.ItemsinProductionColumnName;
                ColumnPositions[withBlock.ItemsinStock] = ProgramSettings.ItemsinStockColumnName;
                ColumnPositions[withBlock.MaterialCost] = ProgramSettings.MaterialCostColumnName;
                ColumnPositions[withBlock.TotalCost] = ProgramSettings.TotalCostColumnName;
                ColumnPositions[withBlock.BaseJobCost] = ProgramSettings.BaseJobCostColumnName;
                ColumnPositions[withBlock.NumBPs] = ProgramSettings.NumBPsColumnName;
                ColumnPositions[withBlock.InventionChance] = ProgramSettings.InventionChanceColumnName;
                ColumnPositions[withBlock.BPType] = ProgramSettings.BPTypeColumnName;
                ColumnPositions[withBlock.Race] = ProgramSettings.RaceColumnName;
                ColumnPositions[withBlock.VolumeperItem] = ProgramSettings.VolumeperItemColumnName;
                ColumnPositions[withBlock.TotalVolume] = ProgramSettings.TotalVolumeColumnName;
                ColumnPositions[withBlock.SellExcess] = ProgramSettings.SellExcessColumnName;
                ColumnPositions[withBlock.ROI] = ProgramSettings.ROIColumnName;
                ColumnPositions[withBlock.PortionSize] = ProgramSettings.PortionSizeColumnName;
                ColumnPositions[withBlock.ManufacturingJobFee] = ProgramSettings.ManufacturingJobFeeColumnName;
                ColumnPositions[withBlock.ManufacturingFacilityName] = ProgramSettings.ManufacturingFacilityNameColumnName;
                ColumnPositions[withBlock.ManufacturingFacilitySystem] = ProgramSettings.ManufacturingFacilitySystemColumnName;
                ColumnPositions[withBlock.ManufacturingFacilityRegion] = ProgramSettings.ManufacturingFacilityRegionColumnName;
                ColumnPositions[withBlock.ManufacturingFacilitySystemIndex] = ProgramSettings.ManufacturingFacilitySystemIndexColumnName;
                ColumnPositions[withBlock.ManufacturingFacilityTax] = ProgramSettings.ManufacturingFacilityTaxColumnName;
                ColumnPositions[withBlock.ManufacturingFacilityMEBonus] = ProgramSettings.ManufacturingFacilityMEBonusColumnName;
                ColumnPositions[withBlock.ManufacturingFacilityTEBonus] = ProgramSettings.ManufacturingFacilityTEBonusColumnName;
                ColumnPositions[withBlock.ManufacturingFacilityUsage] = ProgramSettings.ManufacturingFacilityUsageColumnName;
                ColumnPositions[withBlock.ManufacturingFacilityFWSystemLevel] = ProgramSettings.ManufacturingFacilityFWSystemLevelColumnName;
                ColumnPositions[withBlock.ComponentFacilityName] = ProgramSettings.ComponentFacilityNameColumnName;
                ColumnPositions[withBlock.ComponentFacilitySystem] = ProgramSettings.ComponentFacilitySystemColumnName;
                ColumnPositions[withBlock.ComponentFacilityRegion] = ProgramSettings.ComponentFacilityRegionColumnName;
                ColumnPositions[withBlock.ComponentFacilitySystemIndex] = ProgramSettings.ComponentFacilitySystemIndexColumnName;
                ColumnPositions[withBlock.ComponentFacilityTax] = ProgramSettings.ComponentFacilityTaxColumnName;
                ColumnPositions[withBlock.ComponentFacilityMEBonus] = ProgramSettings.ComponentFacilityMEBonusColumnName;
                ColumnPositions[withBlock.ComponentFacilityTEBonus] = ProgramSettings.ComponentFacilityTEBonusColumnName;
                ColumnPositions[withBlock.ComponentFacilityUsage] = ProgramSettings.ComponentFacilityUsageColumnName;
                ColumnPositions[withBlock.ComponentFacilityFWSystemLevel] = ProgramSettings.ComponentFacilityFWSystemLevelColumnName;
                ColumnPositions[withBlock.CapComponentFacilityName] = ProgramSettings.CapComponentFacilityNameColumnName;
                ColumnPositions[withBlock.CapComponentFacilitySystem] = ProgramSettings.CapComponentFacilitySystemColumnName;
                ColumnPositions[withBlock.CapComponentFacilityRegion] = ProgramSettings.CapComponentFacilityRegionColumnName;
                ColumnPositions[withBlock.CapComponentFacilitySystemIndex] = ProgramSettings.CapComponentFacilitySystemIndexColumnName;
                ColumnPositions[withBlock.CapComponentFacilityTax] = ProgramSettings.CapComponentFacilityTaxColumnName;
                ColumnPositions[withBlock.CapComponentFacilityMEBonus] = ProgramSettings.CapComponentFacilityMEBonusColumnName;
                ColumnPositions[withBlock.CapComponentFacilityTEBonus] = ProgramSettings.CapComponentFacilityTEBonusColumnName;
                ColumnPositions[withBlock.CapComponentFacilityUsage] = ProgramSettings.CapComponentFacilityUsageColumnName;
                ColumnPositions[withBlock.CapComponentFacilityFWSystemLevel] = ProgramSettings.CapComponentFacilityFWSystemLevelColumnName;
                ColumnPositions[withBlock.CopyingFacilityName] = ProgramSettings.CopyingFacilityNameColumnName;
                ColumnPositions[withBlock.CopyingFacilitySystem] = ProgramSettings.CopyingFacilitySystemColumnName;
                ColumnPositions[withBlock.CopyingFacilityRegion] = ProgramSettings.CopyingFacilityRegionColumnName;
                ColumnPositions[withBlock.CopyingFacilitySystemIndex] = ProgramSettings.CopyingFacilitySystemIndexColumnName;
                ColumnPositions[withBlock.CopyingFacilityTax] = ProgramSettings.CopyingFacilityTaxColumnName;
                ColumnPositions[withBlock.CopyingFacilityMEBonus] = ProgramSettings.CopyingFacilityMEBonusColumnName;
                ColumnPositions[withBlock.CopyingFacilityTEBonus] = ProgramSettings.CopyingFacilityTEBonusColumnName;
                ColumnPositions[withBlock.CopyingFacilityUsage] = ProgramSettings.CopyingFacilityUsageColumnName;
                ColumnPositions[withBlock.CopyingFacilityFWSystemLevel] = ProgramSettings.CopyingFacilityFWSystemLevelColumnName;
                ColumnPositions[withBlock.InventionFacilityName] = ProgramSettings.InventionFacilityNameColumnName;
                ColumnPositions[withBlock.InventionFacilitySystem] = ProgramSettings.InventionFacilitySystemColumnName;
                ColumnPositions[withBlock.InventionFacilityRegion] = ProgramSettings.InventionFacilityRegionColumnName;
                ColumnPositions[withBlock.InventionFacilitySystemIndex] = ProgramSettings.InventionFacilitySystemIndexColumnName;
                ColumnPositions[withBlock.InventionFacilityTax] = ProgramSettings.InventionFacilityTaxColumnName;
                ColumnPositions[withBlock.InventionFacilityMEBonus] = ProgramSettings.InventionFacilityMEBonusColumnName;
                ColumnPositions[withBlock.InventionFacilityTEBonus] = ProgramSettings.InventionFacilityTEBonusColumnName;
                ColumnPositions[withBlock.InventionFacilityUsage] = ProgramSettings.InventionFacilityUsageColumnName;
                ColumnPositions[withBlock.InventionFacilityFWSystemLevel] = ProgramSettings.InventionFacilityFWSystemLevelColumnName;
                ColumnPositions[withBlock.ReactionFacilityName] = ProgramSettings.ReactionFacilityNameColumnName;
                ColumnPositions[withBlock.ReactionFacilitySystem] = ProgramSettings.ReactionFacilitySystemColumnName;
                ColumnPositions[withBlock.ReactionFacilityRegion] = ProgramSettings.ReactionFacilityRegionColumnName;
                ColumnPositions[withBlock.ReactionFacilitySystemIndex] = ProgramSettings.ReactionFacilitySystemIndexColumnName;
                ColumnPositions[withBlock.ReactionFacilityTax] = ProgramSettings.ReactionFacilityTaxColumnName;
                ColumnPositions[withBlock.ReactionFacilityMEBonus] = ProgramSettings.ReactionFacilityMEBonusColumnName;
                ColumnPositions[withBlock.ReactionFacilityTEBonus] = ProgramSettings.ReactionFacilityTEBonusColumnName;
                ColumnPositions[withBlock.ReactionFacilityUsage] = ProgramSettings.ReactionFacilityUsageColumnName;
                ColumnPositions[withBlock.ReactionFacilityFWSystemLevel] = ProgramSettings.ReactionFacilityFWSystemLevelColumnName;
                ColumnPositions[withBlock.ReprocessingFacilityName] = ProgramSettings.ReprocessingFacilityNameColumnName;
                ColumnPositions[withBlock.ReprocessingFacilitySystem] = ProgramSettings.ReprocessingFacilitySystemColumnName;
                ColumnPositions[withBlock.ReprocessingFacilityRegion] = ProgramSettings.ReprocessingFacilityRegionColumnName;
                ColumnPositions[withBlock.ReprocessingFacilityTax] = ProgramSettings.ReprocessingFacilityTaxColumnName;
                ColumnPositions[withBlock.ReprocessingFacilityUsage] = ProgramSettings.ReprocessingFacilityUsageColumnName;
                ColumnPositions[withBlock.ReprocessingFacilityOreRefineRate] = ProgramSettings.ReprocessingFacilityOreRefineRateColumnName;
                ColumnPositions[withBlock.ReprocessingFacilityIceRefineRate] = ProgramSettings.ReprocessingFacilityIceRefineRateColumnName;
                ColumnPositions[withBlock.ReprocessingFacilityMoonRefineRate] = ProgramSettings.ReprocessingFacilityMoonRefineRateColumnName;
            }

            // First column is always the ListID
            ColumnPositions[0] = "ListID";

        }

        // Returns the column Width for the sent column name
        private int GetColumnWidth(string ColumnName)
        {

            {
                ref var withBlock = ref SettingsVariables.UserManufacturingTabColumnSettings;
                switch (ColumnName ?? "")
                {
                    case ProgramSettings.ItemCategoryColumnName:
                        {
                            return withBlock.ItemCategoryWidth;
                        }
                    case ProgramSettings.ItemGroupColumnName:
                        {
                            return withBlock.ItemGroupWidth;
                        }
                    case ProgramSettings.ItemNameColumnName:
                        {
                            return withBlock.ItemNameWidth;
                        }
                    case ProgramSettings.OwnedColumnName:
                        {
                            return withBlock.OwnedWidth;
                        }
                    case ProgramSettings.TechColumnName:
                        {
                            return withBlock.TechWidth;
                        }
                    case ProgramSettings.BPMEColumnName:
                        {
                            return withBlock.BPMEWidth;
                        }
                    case ProgramSettings.BPTEColumnName:
                        {
                            return withBlock.BPTEWidth;
                        }
                    case ProgramSettings.InputsColumnName:
                        {
                            return withBlock.InputsWidth;
                        }
                    case ProgramSettings.ComparedColumnName:
                        {
                            return withBlock.ComparedWidth;
                        }
                    case ProgramSettings.TotalRunsColumnName:
                        {
                            return withBlock.TotalRunsWidth;
                        }
                    case ProgramSettings.SingleInventedBPCRunsColumnName:
                        {
                            return withBlock.SingleInventedBPCRunsWidth;
                        }
                    case ProgramSettings.ProductionLinesColumnName:
                        {
                            return withBlock.ProductionLinesWidth;
                        }
                    case ProgramSettings.LaboratoryLinesColumnName:
                        {
                            return withBlock.LaboratoryLinesWidth;
                        }
                    case ProgramSettings.TotalInventionCostColumnName:
                        {
                            return withBlock.TotalInventionCostWidth;
                        }
                    case ProgramSettings.TotalCopyCostColumnName:
                        {
                            return withBlock.TotalCopyCostWidth;
                        }
                    case ProgramSettings.TaxesColumnName:
                        {
                            return withBlock.TaxesWidth;
                        }
                    case ProgramSettings.BrokerFeesColumnName:
                        {
                            return withBlock.BrokerFeesWidth;
                        }
                    case ProgramSettings.BPProductionTimeColumnName:
                        {
                            return withBlock.BPProductionTimeWidth;
                        }
                    case ProgramSettings.TotalProductionTimeColumnName:
                        {
                            return withBlock.TotalProductionTimeWidth;
                        }
                    case ProgramSettings.CopyTimeColumnName:
                        {
                            return withBlock.CopyTimeWidth;
                        }
                    case ProgramSettings.InventionTimeColumnName:
                        {
                            return withBlock.InventionTimeWidth;
                        }
                    case ProgramSettings.ItemMarketPriceColumnName:
                        {
                            return withBlock.ItemMarketPriceWidth;
                        }
                    case ProgramSettings.ProfitColumnName:
                        {
                            return withBlock.ProfitWidth;
                        }
                    case ProgramSettings.ProfitPercentageColumnName:
                        {
                            return withBlock.ProfitPercentageWidth;
                        }
                    case ProgramSettings.IskperHourColumnName:
                        {
                            return withBlock.IskperHourWidth;
                        }
                    case ProgramSettings.SVRColumnName:
                        {
                            return withBlock.SVRWidth;
                        }
                    case ProgramSettings.SVRxIPHColumnName:
                        {
                            return withBlock.SVRxIPHWidth;
                        }
                    case ProgramSettings.PriceTrendColumnName:
                        {
                            return withBlock.PriceTrendWidth;
                        }
                    case ProgramSettings.TotalItemsSoldColumnName:
                        {
                            return withBlock.TotalItemsSoldWidth;
                        }
                    case ProgramSettings.TotalOrdersFilledColumnName:
                        {
                            return withBlock.TotalOrdersFilledWidth;
                        }
                    case ProgramSettings.AvgItemsperOrderColumnName:
                        {
                            return withBlock.AvgItemsperOrderWidth;
                        }
                    case ProgramSettings.CurrentSellOrdersColumnName:
                        {
                            return withBlock.CurrentSellOrdersWidth;
                        }
                    case ProgramSettings.CurrentBuyOrdersColumnName:
                        {
                            return withBlock.CurrentBuyOrdersWidth;
                        }
                    case ProgramSettings.ItemsinProductionColumnName:
                        {
                            return withBlock.ItemsinProductionWidth;
                        }
                    case ProgramSettings.ItemsinStockColumnName:
                        {
                            return withBlock.ItemsinStockWidth;
                        }
                    case ProgramSettings.MaterialCostColumnName:
                        {
                            return withBlock.MaterialCostWidth;
                        }
                    case ProgramSettings.TotalCostColumnName:
                        {
                            return withBlock.TotalCostWidth;
                        }
                    case ProgramSettings.BaseJobCostColumnName:
                        {
                            return withBlock.BaseJobCostWidth;
                        }
                    case ProgramSettings.NumBPsColumnName:
                        {
                            return withBlock.NumBPsWidth;
                        }
                    case ProgramSettings.InventionChanceColumnName:
                        {
                            return withBlock.InventionChanceWidth;
                        }
                    case ProgramSettings.BPTypeColumnName:
                        {
                            return withBlock.BPTypeWidth;
                        }
                    case ProgramSettings.RaceColumnName:
                        {
                            return withBlock.RaceWidth;
                        }
                    case ProgramSettings.VolumeperItemColumnName:
                        {
                            return withBlock.VolumeperItemWidth;
                        }
                    case ProgramSettings.TotalVolumeColumnName:
                        {
                            return withBlock.TotalVolumeWidth;
                        }
                    case ProgramSettings.SellExcessColumnName:
                        {
                            return withBlock.SellExcessWidth;
                        }
                    case ProgramSettings.ROIColumnName:
                        {
                            return withBlock.ROIWidth;
                        }
                    case ProgramSettings.PortionSizeColumnName:
                        {
                            return withBlock.PortionSizeWidth;
                        }
                    case ProgramSettings.ManufacturingJobFeeColumnName:
                        {
                            return withBlock.ManufacturingJobFeeWidth;
                        }
                    case ProgramSettings.ManufacturingFacilityNameColumnName:
                        {
                            return withBlock.ManufacturingFacilityNameWidth;
                        }
                    case ProgramSettings.ManufacturingFacilitySystemColumnName:
                        {
                            return withBlock.ManufacturingFacilitySystemWidth;
                        }
                    case ProgramSettings.ManufacturingFacilityRegionColumnName:
                        {
                            return withBlock.ManufacturingFacilityRegionWidth;
                        }
                    case ProgramSettings.ManufacturingFacilitySystemIndexColumnName:
                        {
                            return withBlock.ManufacturingFacilitySystemIndexWidth;
                        }
                    case ProgramSettings.ManufacturingFacilityTaxColumnName:
                        {
                            return withBlock.ManufacturingFacilityTaxWidth;
                        }
                    case ProgramSettings.ManufacturingFacilityMEBonusColumnName:
                        {
                            return withBlock.ManufacturingFacilityMEBonusWidth;
                        }
                    case ProgramSettings.ManufacturingFacilityTEBonusColumnName:
                        {
                            return withBlock.ManufacturingFacilityTEBonusWidth;
                        }
                    case ProgramSettings.ManufacturingFacilityUsageColumnName:
                        {
                            return withBlock.ManufacturingFacilityUsageWidth;
                        }
                    case ProgramSettings.ManufacturingFacilityFWSystemLevelColumnName:
                        {
                            return withBlock.ManufacturingFacilityFWSystemLevelWidth;
                        }
                    case ProgramSettings.ComponentFacilityNameColumnName:
                        {
                            return withBlock.ComponentFacilityNameWidth;
                        }
                    case ProgramSettings.ComponentFacilitySystemColumnName:
                        {
                            return withBlock.ComponentFacilitySystemWidth;
                        }
                    case ProgramSettings.ComponentFacilityRegionColumnName:
                        {
                            return withBlock.ComponentFacilityRegionWidth;
                        }
                    case ProgramSettings.ComponentFacilitySystemIndexColumnName:
                        {
                            return withBlock.ComponentFacilitySystemIndexWidth;
                        }
                    case ProgramSettings.ComponentFacilityTaxColumnName:
                        {
                            return withBlock.ComponentFacilityTaxWidth;
                        }
                    case ProgramSettings.ComponentFacilityMEBonusColumnName:
                        {
                            return withBlock.ComponentFacilityMEBonusWidth;
                        }
                    case ProgramSettings.ComponentFacilityTEBonusColumnName:
                        {
                            return withBlock.ComponentFacilityTEBonusWidth;
                        }
                    case ProgramSettings.ComponentFacilityUsageColumnName:
                        {
                            return withBlock.ComponentFacilityUsageWidth;
                        }
                    case ProgramSettings.ComponentFacilityFWSystemLevelColumnName:
                        {
                            return withBlock.ComponentFacilityFWSystemLevelWidth;
                        }
                    case ProgramSettings.CapComponentFacilityNameColumnName:
                        {
                            return withBlock.CapComponentFacilityNameWidth;
                        }
                    case ProgramSettings.CapComponentFacilitySystemColumnName:
                        {
                            return withBlock.CapComponentFacilitySystemWidth;
                        }
                    case ProgramSettings.CapComponentFacilityRegionColumnName:
                        {
                            return withBlock.CapComponentFacilityRegionWidth;
                        }
                    case ProgramSettings.CapComponentFacilitySystemIndexColumnName:
                        {
                            return withBlock.CapComponentFacilitySystemIndexWidth;
                        }
                    case ProgramSettings.CapComponentFacilityTaxColumnName:
                        {
                            return withBlock.CapComponentFacilityTaxWidth;
                        }
                    case ProgramSettings.CapComponentFacilityMEBonusColumnName:
                        {
                            return withBlock.CapComponentFacilityMEBonusWidth;
                        }
                    case ProgramSettings.CapComponentFacilityTEBonusColumnName:
                        {
                            return withBlock.CapComponentFacilityTEBonusWidth;
                        }
                    case ProgramSettings.CapComponentFacilityUsageColumnName:
                        {
                            return withBlock.CapComponentFacilityUsageWidth;
                        }
                    case ProgramSettings.CapComponentFacilityFWSystemLevelColumnName:
                        {
                            return withBlock.CapComponentFacilityFWSystemLevelWidth;
                        }
                    case ProgramSettings.CopyingFacilityNameColumnName:
                        {
                            return withBlock.CopyingFacilityNameWidth;
                        }
                    case ProgramSettings.CopyingFacilitySystemColumnName:
                        {
                            return withBlock.CopyingFacilitySystemWidth;
                        }
                    case ProgramSettings.CopyingFacilityRegionColumnName:
                        {
                            return withBlock.CopyingFacilityRegionWidth;
                        }
                    case ProgramSettings.CopyingFacilitySystemIndexColumnName:
                        {
                            return withBlock.CopyingFacilitySystemIndexWidth;
                        }
                    case ProgramSettings.CopyingFacilityTaxColumnName:
                        {
                            return withBlock.CopyingFacilityTaxWidth;
                        }
                    case ProgramSettings.CopyingFacilityMEBonusColumnName:
                        {
                            return withBlock.CopyingFacilityMEBonusWidth;
                        }
                    case ProgramSettings.CopyingFacilityTEBonusColumnName:
                        {
                            return withBlock.CopyingFacilityTEBonusWidth;
                        }
                    case ProgramSettings.CopyingFacilityUsageColumnName:
                        {
                            return withBlock.CopyingFacilityUsageWidth;
                        }
                    case ProgramSettings.CopyingFacilityFWSystemLevelColumnName:
                        {
                            return withBlock.CopyingFacilityFWSystemLevelWidth;
                        }
                    case ProgramSettings.InventionFacilityNameColumnName:
                        {
                            return withBlock.InventionFacilityNameWidth;
                        }
                    case ProgramSettings.InventionFacilitySystemColumnName:
                        {
                            return withBlock.InventionFacilitySystemWidth;
                        }
                    case ProgramSettings.InventionFacilityRegionColumnName:
                        {
                            return withBlock.InventionFacilityRegionWidth;
                        }
                    case ProgramSettings.InventionFacilitySystemIndexColumnName:
                        {
                            return withBlock.InventionFacilitySystemIndexWidth;
                        }
                    case ProgramSettings.InventionFacilityTaxColumnName:
                        {
                            return withBlock.InventionFacilityTaxWidth;
                        }
                    case ProgramSettings.InventionFacilityMEBonusColumnName:
                        {
                            return withBlock.InventionFacilityMEBonusWidth;
                        }
                    case ProgramSettings.InventionFacilityTEBonusColumnName:
                        {
                            return withBlock.InventionFacilityTEBonusWidth;
                        }
                    case ProgramSettings.InventionFacilityUsageColumnName:
                        {
                            return withBlock.InventionFacilityUsageWidth;
                        }
                    case ProgramSettings.InventionFacilityFWSystemLevelColumnName:
                        {
                            return withBlock.InventionFacilityFWSystemLevelWidth;
                        }
                    case ProgramSettings.ReactionFacilityNameColumnName:
                        {
                            return withBlock.ReactionFacilityNameWidth;
                        }
                    case ProgramSettings.ReactionFacilitySystemColumnName:
                        {
                            return withBlock.ReactionFacilitySystemWidth;
                        }
                    case ProgramSettings.ReactionFacilityRegionColumnName:
                        {
                            return withBlock.ReactionFacilityRegionWidth;
                        }
                    case ProgramSettings.ReactionFacilitySystemIndexColumnName:
                        {
                            return withBlock.ReactionFacilitySystemIndexWidth;
                        }
                    case ProgramSettings.ReactionFacilityTaxColumnName:
                        {
                            return withBlock.ReactionFacilityTaxWidth;
                        }
                    case ProgramSettings.ReactionFacilityMEBonusColumnName:
                        {
                            return withBlock.ReactionFacilityMEBonusWidth;
                        }
                    case ProgramSettings.ReactionFacilityTEBonusColumnName:
                        {
                            return withBlock.ReactionFacilityTEBonusWidth;
                        }
                    case ProgramSettings.ReactionFacilityUsageColumnName:
                        {
                            return withBlock.ReactionFacilityUsageWidth;
                        }
                    case ProgramSettings.ReactionFacilityFWSystemLevelColumnName:
                        {
                            return withBlock.ReactionFacilityFWSystemLevelWidth;
                        }
                    case ProgramSettings.ReprocessingFacilityNameColumnName:
                        {
                            return withBlock.ReprocessingFacilityNameWidth;
                        }
                    case ProgramSettings.ReprocessingFacilitySystemColumnName:
                        {
                            return withBlock.ReprocessingFacilitySystemWidth;
                        }
                    case ProgramSettings.ReprocessingFacilityRegionColumnName:
                        {
                            return withBlock.ReprocessingFacilityRegionWidth;
                        }
                    case ProgramSettings.ReprocessingFacilityTaxColumnName:
                        {
                            return withBlock.ReprocessingFacilityTaxWidth;
                        }
                    case ProgramSettings.ReprocessingFacilityUsageColumnName:
                        {
                            return withBlock.ReprocessingFacilityUsageWidth;
                        }
                    case ProgramSettings.ReprocessingFacilityOreRefineRateColumnName:
                        {
                            return withBlock.ReprocessingFacilityOreRefineRateWidth;
                        }
                    case ProgramSettings.ReprocessingFacilityIceRefineRateColumnName:
                        {
                            return withBlock.ReprocessingFacilityIceRefineRateWidth;
                        }
                    case ProgramSettings.ReprocessingFacilityMoonRefineRateColumnName:
                        {
                            return withBlock.ReprocessingFacilityMoonRefineRateWidth;
                        }

                    default:
                        {
                            return 0;
                        }
                }
            }

        }

        // Updates the column order when changed
        private void lstManufacturing_ColumnReordered(object sender, ColumnReorderedEventArgs e)
        {
            var TempArray = new string[111];
            bool Minus1 = false;

            e.Cancel = true; // Cancel the event so we can manually update the grid columns

            for (int i = 0; i <= Public_Variables.NumManufacturingTabColumns; i++)
                TempArray[i] = "";

            // First index is the ListID
            TempArray[0] = "ListID";

            if (e.OldDisplayIndex > e.NewDisplayIndex)
            {
                // For all indices larger than the new index, need to move it to the next array
                for (int i = 1, loopTo = e.NewDisplayIndex - 1; i <= loopTo; i++)
                    TempArray[i] = ColumnPositions[i];

                // Insert the new column
                TempArray[e.NewDisplayIndex] = ColumnPositions[e.OldDisplayIndex];

                // Move all the rest of the items up one
                for (int i = e.NewDisplayIndex + 1, loopTo1 = TempArray.Count() - 1; i <= loopTo1; i++)
                {
                    if (i < e.OldDisplayIndex + 1)
                    {
                        TempArray[i] = ColumnPositions[i - 1];
                    }
                    else
                    {
                        TempArray[i] = ColumnPositions[i];
                    }
                }
            }
            else
            {
                // For all indices larger than the new index, need to move it to the next array
                for (int i = 1, loopTo2 = e.OldDisplayIndex - 1; i <= loopTo2; i++)
                    TempArray[i] = ColumnPositions[i];

                // Insert the new column
                TempArray[e.NewDisplayIndex] = ColumnPositions[e.OldDisplayIndex];

                // Back fill the array between the column we moved and the new location
                for (int i = e.OldDisplayIndex, loopTo3 = e.NewDisplayIndex - 1; i <= loopTo3; i++)
                    TempArray[i] = ColumnPositions[i + 1];

                // Replace all the items left
                for (int i = e.NewDisplayIndex + 1, loopTo4 = TempArray.Count() - 1; i <= loopTo4; i++)
                    TempArray[i] = ColumnPositions[i];

            }

            ColumnPositions = TempArray;

            // Save the columns based on the current order
            {
                ref var withBlock = ref SettingsVariables.UserManufacturingTabColumnSettings;
                for (int i = 1, loopTo5 = ColumnPositions.Count() - 1; i <= loopTo5; i++)
                {
                    switch (ColumnPositions[i] ?? "")
                    {
                        case ProgramSettings.ItemCategoryColumnName:
                            {
                                withBlock.ItemCategory = i;
                                break;
                            }
                        case ProgramSettings.ItemGroupColumnName:
                            {
                                withBlock.ItemGroup = i;
                                break;
                            }
                        case ProgramSettings.ItemNameColumnName:
                            {
                                withBlock.ItemName = i;
                                break;
                            }
                        case ProgramSettings.OwnedColumnName:
                            {
                                withBlock.Owned = i;
                                break;
                            }
                        case ProgramSettings.TechColumnName:
                            {
                                withBlock.Tech = i;
                                break;
                            }
                        case ProgramSettings.BPMEColumnName:
                            {
                                withBlock.BPME = i;
                                break;
                            }
                        case ProgramSettings.BPTEColumnName:
                            {
                                withBlock.BPTE = i;
                                break;
                            }
                        case ProgramSettings.InputsColumnName:
                            {
                                withBlock.Inputs = i;
                                break;
                            }
                        case ProgramSettings.ComparedColumnName:
                            {
                                withBlock.Compared = i;
                                break;
                            }
                        case ProgramSettings.TotalRunsColumnName:
                            {
                                withBlock.TotalRuns = i;
                                break;
                            }
                        case ProgramSettings.SingleInventedBPCRunsColumnName:
                            {
                                withBlock.SingleInventedBPCRuns = i;
                                break;
                            }
                        case ProgramSettings.ProductionLinesColumnName:
                            {
                                withBlock.ProductionLines = i;
                                break;
                            }
                        case ProgramSettings.LaboratoryLinesColumnName:
                            {
                                withBlock.LaboratoryLines = i;
                                break;
                            }
                        case ProgramSettings.TotalInventionCostColumnName:
                            {
                                withBlock.TotalInventionCost = i;
                                break;
                            }
                        case ProgramSettings.TotalCopyCostColumnName:
                            {
                                withBlock.TotalCopyCost = i;
                                break;
                            }
                        case ProgramSettings.TaxesColumnName:
                            {
                                withBlock.Taxes = i;
                                break;
                            }
                        case ProgramSettings.BrokerFeesColumnName:
                            {
                                withBlock.BrokerFees = i;
                                break;
                            }
                        case ProgramSettings.BPProductionTimeColumnName:
                            {
                                withBlock.BPProductionTime = i;
                                break;
                            }
                        case ProgramSettings.TotalProductionTimeColumnName:
                            {
                                withBlock.TotalProductionTime = i;
                                break;
                            }
                        case ProgramSettings.CopyTimeColumnName:
                            {
                                withBlock.CopyTime = i;
                                break;
                            }
                        case ProgramSettings.InventionTimeColumnName:
                            {
                                withBlock.InventionTime = i;
                                break;
                            }
                        case ProgramSettings.ItemMarketPriceColumnName:
                            {
                                withBlock.ItemMarketPrice = i;
                                break;
                            }
                        case ProgramSettings.ProfitColumnName:
                            {
                                withBlock.Profit = i;
                                break;
                            }
                        case ProgramSettings.ProfitPercentageColumnName:
                            {
                                withBlock.ProfitPercentage = i;
                                break;
                            }
                        case ProgramSettings.IskperHourColumnName:
                            {
                                withBlock.IskperHour = i;
                                break;
                            }
                        case ProgramSettings.SVRColumnName:
                            {
                                withBlock.SVR = i;
                                break;
                            }
                        case ProgramSettings.SVRxIPHColumnName:
                            {
                                withBlock.SVRxIPH = i;
                                break;
                            }
                        case ProgramSettings.PriceTrendColumnName:
                            {
                                withBlock.PriceTrend = i;
                                break;
                            }
                        case ProgramSettings.TotalItemsSoldColumnName:
                            {
                                withBlock.TotalItemsSold = i;
                                break;
                            }
                        case ProgramSettings.TotalOrdersFilledColumnName:
                            {
                                withBlock.TotalOrdersFilled = i;
                                break;
                            }
                        case ProgramSettings.AvgItemsperOrderColumnName:
                            {
                                withBlock.AvgItemsperOrder = i;
                                break;
                            }
                        case ProgramSettings.CurrentSellOrdersColumnName:
                            {
                                withBlock.CurrentSellOrders = i;
                                break;
                            }
                        case ProgramSettings.CurrentBuyOrdersColumnName:
                            {
                                withBlock.CurrentBuyOrders = i;
                                break;
                            }
                        case ProgramSettings.ItemsinProductionColumnName:
                            {
                                withBlock.ItemsinProduction = i;
                                break;
                            }
                        case ProgramSettings.ItemsinStockColumnName:
                            {
                                withBlock.ItemsinStock = i;
                                break;
                            }
                        case ProgramSettings.MaterialCostColumnName:
                            {
                                withBlock.MaterialCost = i;
                                break;
                            }
                        case ProgramSettings.TotalCostColumnName:
                            {
                                withBlock.TotalCost = i;
                                break;
                            }
                        case ProgramSettings.BaseJobCostColumnName:
                            {
                                withBlock.BaseJobCost = i;
                                break;
                            }
                        case ProgramSettings.NumBPsColumnName:
                            {
                                withBlock.NumBPs = i;
                                break;
                            }
                        case ProgramSettings.InventionChanceColumnName:
                            {
                                withBlock.InventionChance = i;
                                break;
                            }
                        case ProgramSettings.BPTypeColumnName:
                            {
                                withBlock.BPType = i;
                                break;
                            }
                        case ProgramSettings.RaceColumnName:
                            {
                                withBlock.Race = i;
                                break;
                            }
                        case ProgramSettings.VolumeperItemColumnName:
                            {
                                withBlock.VolumeperItem = i;
                                break;
                            }
                        case ProgramSettings.TotalVolumeColumnName:
                            {
                                withBlock.TotalVolume = i;
                                break;
                            }
                        case ProgramSettings.SellExcessColumnName:
                            {
                                withBlock.SellExcess = i;
                                break;
                            }
                        case ProgramSettings.ROIColumnName:
                            {
                                withBlock.ROI = i;
                                break;
                            }
                        case ProgramSettings.PortionSizeColumnName:
                            {
                                withBlock.PortionSize = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingJobFeeColumnName:
                            {
                                withBlock.ManufacturingJobFee = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityNameColumnName:
                            {
                                withBlock.ManufacturingFacilityName = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilitySystemColumnName:
                            {
                                withBlock.ManufacturingFacilitySystem = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityRegionColumnName:
                            {
                                withBlock.ManufacturingFacilityRegion = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilitySystemIndexColumnName:
                            {
                                withBlock.ManufacturingFacilitySystemIndex = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityTaxColumnName:
                            {
                                withBlock.ManufacturingFacilityTax = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityMEBonusColumnName:
                            {
                                withBlock.ManufacturingFacilityMEBonus = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityTEBonusColumnName:
                            {
                                withBlock.ManufacturingFacilityTEBonus = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityUsageColumnName:
                            {
                                withBlock.ManufacturingFacilityUsage = i;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityFWSystemLevelColumnName:
                            {
                                withBlock.ManufacturingFacilityFWSystemLevel = i;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityNameColumnName:
                            {
                                withBlock.ComponentFacilityName = i;
                                break;
                            }
                        case ProgramSettings.ComponentFacilitySystemColumnName:
                            {
                                withBlock.ComponentFacilitySystem = i;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityRegionColumnName:
                            {
                                withBlock.ComponentFacilityRegion = i;
                                break;
                            }
                        case ProgramSettings.ComponentFacilitySystemIndexColumnName:
                            {
                                withBlock.ComponentFacilitySystemIndex = i;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityTaxColumnName:
                            {
                                withBlock.ComponentFacilityTax = i;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityMEBonusColumnName:
                            {
                                withBlock.ComponentFacilityMEBonus = i;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityTEBonusColumnName:
                            {
                                withBlock.ComponentFacilityTEBonus = i;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityUsageColumnName:
                            {
                                withBlock.ComponentFacilityUsage = i;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityFWSystemLevelColumnName:
                            {
                                withBlock.ComponentFacilityFWSystemLevel = i;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityNameColumnName:
                            {
                                withBlock.CapComponentFacilityName = i;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilitySystemColumnName:
                            {
                                withBlock.CapComponentFacilitySystem = i;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityRegionColumnName:
                            {
                                withBlock.CapComponentFacilityRegion = i;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilitySystemIndexColumnName:
                            {
                                withBlock.CapComponentFacilitySystemIndex = i;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityTaxColumnName:
                            {
                                withBlock.CapComponentFacilityTax = i;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityMEBonusColumnName:
                            {
                                withBlock.CapComponentFacilityMEBonus = i;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityTEBonusColumnName:
                            {
                                withBlock.CapComponentFacilityTEBonus = i;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityUsageColumnName:
                            {
                                withBlock.CapComponentFacilityUsage = i;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityFWSystemLevelColumnName:
                            {
                                withBlock.CapComponentFacilityFWSystemLevel = i;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityNameColumnName:
                            {
                                withBlock.CopyingFacilityName = i;
                                break;
                            }
                        case ProgramSettings.CopyingFacilitySystemColumnName:
                            {
                                withBlock.CopyingFacilitySystem = i;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityRegionColumnName:
                            {
                                withBlock.CopyingFacilityRegion = i;
                                break;
                            }
                        case ProgramSettings.CopyingFacilitySystemIndexColumnName:
                            {
                                withBlock.CopyingFacilitySystemIndex = i;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityTaxColumnName:
                            {
                                withBlock.CopyingFacilityTax = i;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityMEBonusColumnName:
                            {
                                withBlock.CopyingFacilityMEBonus = i;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityTEBonusColumnName:
                            {
                                withBlock.CopyingFacilityTEBonus = i;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityUsageColumnName:
                            {
                                withBlock.CopyingFacilityUsage = i;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityFWSystemLevelColumnName:
                            {
                                withBlock.CopyingFacilityFWSystemLevel = i;
                                break;
                            }
                        case ProgramSettings.InventionFacilityNameColumnName:
                            {
                                withBlock.InventionFacilityName = i;
                                break;
                            }
                        case ProgramSettings.InventionFacilitySystemColumnName:
                            {
                                withBlock.InventionFacilitySystem = i;
                                break;
                            }
                        case ProgramSettings.InventionFacilityRegionColumnName:
                            {
                                withBlock.InventionFacilityRegion = i;
                                break;
                            }
                        case ProgramSettings.InventionFacilitySystemIndexColumnName:
                            {
                                withBlock.InventionFacilitySystemIndex = i;
                                break;
                            }
                        case ProgramSettings.InventionFacilityTaxColumnName:
                            {
                                withBlock.InventionFacilityTax = i;
                                break;
                            }
                        case ProgramSettings.InventionFacilityMEBonusColumnName:
                            {
                                withBlock.InventionFacilityMEBonus = i;
                                break;
                            }
                        case ProgramSettings.InventionFacilityTEBonusColumnName:
                            {
                                withBlock.InventionFacilityTEBonus = i;
                                break;
                            }
                        case ProgramSettings.InventionFacilityUsageColumnName:
                            {
                                withBlock.InventionFacilityUsage = i;
                                break;
                            }
                        case ProgramSettings.InventionFacilityFWSystemLevelColumnName:
                            {
                                withBlock.InventionFacilityFWSystemLevel = i;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityNameColumnName:
                            {
                                withBlock.ReactionFacilityName = i;
                                break;
                            }
                        case ProgramSettings.ReactionFacilitySystemColumnName:
                            {
                                withBlock.ReactionFacilitySystem = i;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityRegionColumnName:
                            {
                                withBlock.ReactionFacilityRegion = i;
                                break;
                            }
                        case ProgramSettings.ReactionFacilitySystemIndexColumnName:
                            {
                                withBlock.ReactionFacilitySystemIndex = i;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityTaxColumnName:
                            {
                                withBlock.ReactionFacilityTax = i;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityMEBonusColumnName:
                            {
                                withBlock.ReactionFacilityMEBonus = i;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityTEBonusColumnName:
                            {
                                withBlock.ReactionFacilityTEBonus = i;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityUsageColumnName:
                            {
                                withBlock.ReactionFacilityUsage = i;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityFWSystemLevelColumnName:
                            {
                                withBlock.ReactionFacilityFWSystemLevel = i;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityNameColumnName:
                            {
                                withBlock.ReprocessingFacilityName = i;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilitySystemColumnName:
                            {
                                withBlock.ReprocessingFacilitySystem = i;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityRegionColumnName:
                            {
                                withBlock.ReprocessingFacilityRegion = i;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityTaxColumnName:
                            {
                                withBlock.ReprocessingFacilityTax = i;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityUsageColumnName:
                            {
                                withBlock.ReprocessingFacilityUsage = i;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityOreRefineRateColumnName:
                            {
                                withBlock.ReprocessingFacilityOreRefineRate = i;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityIceRefineRateColumnName:
                            {
                                withBlock.ReprocessingFacilityIceRefineRate = i;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityMoonRefineRateColumnName:
                            {
                                withBlock.ReprocessingFacilityMoonRefineRate = i;
                                break;
                            }
                    }
                }
            }

            // Now Refresh the grid
            if (lstManufacturing.Items.Count != 0)
            {
                RefreshCalcData = true;
                DisplayManufacturingResults(false);
            }
            else
            {
                RefreshManufacturingTabColumns();
            }

        }

        // Updates the column sizes when changed
        private void lstManufacturing_ColumnWidthChanged(object sender, ColumnWidthChangedEventArgs e)
        {
            int NewWidth = lstManufacturing.Columns[e.ColumnIndex].Width;

            if (!AddingColumns)
            {
                {
                    ref var withBlock = ref SettingsVariables.UserManufacturingTabColumnSettings;
                    switch (ColumnPositions[e.ColumnIndex] ?? "")
                    {
                        case ProgramSettings.ItemCategoryColumnName:
                            {
                                withBlock.ItemCategoryWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ItemGroupColumnName:
                            {
                                withBlock.ItemGroupWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ItemNameColumnName:
                            {
                                withBlock.ItemNameWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.OwnedColumnName:
                            {
                                withBlock.OwnedWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TechColumnName:
                            {
                                withBlock.TechWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.BPMEColumnName:
                            {
                                withBlock.BPMEWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.BPTEColumnName:
                            {
                                withBlock.BPTEWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InputsColumnName:
                            {
                                withBlock.InputsWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComparedColumnName:
                            {
                                withBlock.ComparedWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TotalRunsColumnName:
                            {
                                withBlock.TotalRunsWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.SingleInventedBPCRunsColumnName:
                            {
                                withBlock.SingleInventedBPCRunsWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ProductionLinesColumnName:
                            {
                                withBlock.ProductionLinesWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.LaboratoryLinesColumnName:
                            {
                                withBlock.LaboratoryLinesWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TotalInventionCostColumnName:
                            {
                                withBlock.TotalInventionCostWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TotalCopyCostColumnName:
                            {
                                withBlock.TotalCopyCostWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TaxesColumnName:
                            {
                                withBlock.TaxesWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.BrokerFeesColumnName:
                            {
                                withBlock.BrokerFeesWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.BPProductionTimeColumnName:
                            {
                                withBlock.BPProductionTimeWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TotalProductionTimeColumnName:
                            {
                                withBlock.TotalProductionTimeWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyTimeColumnName:
                            {
                                withBlock.CopyTimeWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionTimeColumnName:
                            {
                                withBlock.InventionTimeWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ItemMarketPriceColumnName:
                            {
                                withBlock.ItemMarketPriceWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ProfitColumnName:
                            {
                                withBlock.ProfitWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ProfitPercentageColumnName:
                            {
                                withBlock.ProfitPercentageWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.IskperHourColumnName:
                            {
                                withBlock.IskperHourWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.SVRColumnName:
                            {
                                withBlock.SVRWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.SVRxIPHColumnName:
                            {
                                withBlock.SVRxIPHWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.PriceTrendColumnName:
                            {
                                withBlock.PriceTrendWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TotalItemsSoldColumnName:
                            {
                                withBlock.TotalItemsSoldWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TotalOrdersFilledColumnName:
                            {
                                withBlock.TotalOrdersFilledWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.AvgItemsperOrderColumnName:
                            {
                                withBlock.AvgItemsperOrderWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CurrentSellOrdersColumnName:
                            {
                                withBlock.CurrentSellOrdersWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CurrentBuyOrdersColumnName:
                            {
                                withBlock.CurrentBuyOrdersWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ItemsinProductionColumnName:
                            {
                                withBlock.ItemsinProductionWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ItemsinStockColumnName:
                            {
                                withBlock.ItemsinStockWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.MaterialCostColumnName:
                            {
                                withBlock.MaterialCostWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TotalCostColumnName:
                            {
                                withBlock.TotalCostWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.BaseJobCostColumnName:
                            {
                                withBlock.BaseJobCostWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.NumBPsColumnName:
                            {
                                withBlock.NumBPsWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionChanceColumnName:
                            {
                                withBlock.InventionChanceWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.BPTypeColumnName:
                            {
                                withBlock.BPTypeWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.RaceColumnName:
                            {
                                withBlock.RaceWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.VolumeperItemColumnName:
                            {
                                withBlock.VolumeperItemWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.TotalVolumeColumnName:
                            {
                                withBlock.TotalVolumeWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.SellExcessColumnName:
                            {
                                withBlock.SellExcessWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ROIColumnName:
                            {
                                withBlock.ROIWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.PortionSizeColumnName:
                            {
                                withBlock.PortionSizeWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingJobFeeColumnName:
                            {
                                withBlock.ManufacturingJobFeeWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityNameColumnName:
                            {
                                withBlock.ManufacturingFacilityNameWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilitySystemColumnName:
                            {
                                withBlock.ManufacturingFacilitySystemWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityRegionColumnName:
                            {
                                withBlock.ManufacturingFacilityRegionWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilitySystemIndexColumnName:
                            {
                                withBlock.ManufacturingFacilitySystemIndexWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityTaxColumnName:
                            {
                                withBlock.ManufacturingFacilityTaxWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityMEBonusColumnName:
                            {
                                withBlock.ManufacturingFacilityMEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityTEBonusColumnName:
                            {
                                withBlock.ManufacturingFacilityTEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityUsageColumnName:
                            {
                                withBlock.ManufacturingFacilityUsageWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityFWSystemLevelColumnName:
                            {
                                withBlock.ManufacturingFacilityFWSystemLevelWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityNameColumnName:
                            {
                                withBlock.ComponentFacilityNameWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComponentFacilitySystemColumnName:
                            {
                                withBlock.ComponentFacilitySystemWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityRegionColumnName:
                            {
                                withBlock.ComponentFacilityRegionWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComponentFacilitySystemIndexColumnName:
                            {
                                withBlock.ComponentFacilitySystemIndexWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityTaxColumnName:
                            {
                                withBlock.ComponentFacilityTaxWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityMEBonusColumnName:
                            {
                                withBlock.ComponentFacilityMEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityTEBonusColumnName:
                            {
                                withBlock.ComponentFacilityTEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityUsageColumnName:
                            {
                                withBlock.ComponentFacilityUsageWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ComponentFacilityFWSystemLevelColumnName:
                            {
                                withBlock.ComponentFacilityFWSystemLevelWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityNameColumnName:
                            {
                                withBlock.CapComponentFacilityNameWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilitySystemColumnName:
                            {
                                withBlock.CapComponentFacilitySystemWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityRegionColumnName:
                            {
                                withBlock.CapComponentFacilityRegionWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilitySystemIndexColumnName:
                            {
                                withBlock.CapComponentFacilitySystemIndexWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityTaxColumnName:
                            {
                                withBlock.CapComponentFacilityTaxWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityMEBonusColumnName:
                            {
                                withBlock.CapComponentFacilityMEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityTEBonusColumnName:
                            {
                                withBlock.CapComponentFacilityTEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityUsageColumnName:
                            {
                                withBlock.CapComponentFacilityUsageWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityFWSystemLevelColumnName:
                            {
                                withBlock.CapComponentFacilityFWSystemLevelWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityNameColumnName:
                            {
                                withBlock.CopyingFacilityNameWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyingFacilitySystemColumnName:
                            {
                                withBlock.CopyingFacilitySystemWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityRegionColumnName:
                            {
                                withBlock.CopyingFacilityRegionWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyingFacilitySystemIndexColumnName:
                            {
                                withBlock.CopyingFacilitySystemIndexWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityTaxColumnName:
                            {
                                withBlock.CopyingFacilityTaxWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityMEBonusColumnName:
                            {
                                withBlock.CopyingFacilityMEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityTEBonusColumnName:
                            {
                                withBlock.CopyingFacilityTEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityUsageColumnName:
                            {
                                withBlock.CopyingFacilityUsageWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.CopyingFacilityFWSystemLevelColumnName:
                            {
                                withBlock.CopyingFacilityFWSystemLevelWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionFacilityNameColumnName:
                            {
                                withBlock.InventionFacilityNameWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionFacilitySystemColumnName:
                            {
                                withBlock.InventionFacilitySystemWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionFacilityRegionColumnName:
                            {
                                withBlock.InventionFacilityRegionWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionFacilitySystemIndexColumnName:
                            {
                                withBlock.InventionFacilitySystemIndexWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionFacilityTaxColumnName:
                            {
                                withBlock.InventionFacilityTaxWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionFacilityMEBonusColumnName:
                            {
                                withBlock.InventionFacilityMEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionFacilityTEBonusColumnName:
                            {
                                withBlock.InventionFacilityTEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionFacilityUsageColumnName:
                            {
                                withBlock.InventionFacilityUsageWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.InventionFacilityFWSystemLevelColumnName:
                            {
                                withBlock.InventionFacilityFWSystemLevelWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityNameColumnName:
                            {
                                withBlock.ReactionFacilityNameWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReactionFacilitySystemColumnName:
                            {
                                withBlock.ReactionFacilitySystemWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityRegionColumnName:
                            {
                                withBlock.ReactionFacilityRegionWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReactionFacilitySystemIndexColumnName:
                            {
                                withBlock.ReactionFacilitySystemIndexWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityTaxColumnName:
                            {
                                withBlock.ReactionFacilityTaxWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityMEBonusColumnName:
                            {
                                withBlock.ReactionFacilityMEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityTEBonusColumnName:
                            {
                                withBlock.ReactionFacilityTEBonusWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityUsageColumnName:
                            {
                                withBlock.ReactionFacilityUsageWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReactionFacilityFWSystemLevelColumnName:
                            {
                                withBlock.ReactionFacilityFWSystemLevelWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityNameColumnName:
                            {
                                withBlock.ReprocessingFacilityNameWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilitySystemColumnName:
                            {
                                withBlock.ReprocessingFacilitySystemWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityRegionColumnName:
                            {
                                withBlock.ReprocessingFacilityRegionWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityTaxColumnName:
                            {
                                withBlock.ReprocessingFacilityTaxWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityUsageColumnName:
                            {
                                withBlock.ReprocessingFacilityUsageWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityOreRefineRateColumnName:
                            {
                                withBlock.ReprocessingFacilityOreRefineRateWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityIceRefineRateColumnName:
                            {
                                withBlock.ReprocessingFacilityIceRefineRateWidth = NewWidth;
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityMoonRefineRateColumnName:
                            {
                                withBlock.ReprocessingFacilityMoonRefineRateWidth = NewWidth;
                                break;
                            }
                    }
                }
            }

        }

        // Determines if we display the sent column
        private bool ShowColumn(string ColumnName)
        {
            if (Array.IndexOf(ColumnPositions, ColumnName) != -1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        // Returns the allignment for the column name sent
        private HorizontalAlignment GetColumnAlignment(string ColumnName)
        {

            switch (ColumnName ?? "")
            {
                case ProgramSettings.ItemCategoryColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ItemGroupColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ItemNameColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.OwnedColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.TechColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.BPMEColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.BPTEColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.InputsColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ComparedColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.TotalRunsColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.SingleInventedBPCRunsColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ProductionLinesColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.LaboratoryLinesColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.TotalInventionCostColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.TotalCopyCostColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.TaxesColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.BrokerFeesColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.BPProductionTimeColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.TotalProductionTimeColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CopyTimeColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.InventionTimeColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ItemMarketPriceColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ProfitColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ProfitPercentageColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.IskperHourColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.SVRColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.SVRxIPHColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.PriceTrendColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.TotalItemsSoldColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.TotalOrdersFilledColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.AvgItemsperOrderColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CurrentSellOrdersColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CurrentBuyOrdersColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ItemsinProductionColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ItemsinStockColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.MaterialCostColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.TotalCostColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.BaseJobCostColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.NumBPsColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.InventionChanceColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.BPTypeColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.RaceColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.VolumeperItemColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.TotalVolumeColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.SellExcessColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ROIColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.PortionSizeColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ManufacturingJobFeeColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ManufacturingFacilityNameColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ManufacturingFacilitySystemColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ManufacturingFacilityRegionColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ManufacturingFacilitySystemIndexColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ManufacturingFacilityTaxColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ManufacturingFacilityMEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ManufacturingFacilityTEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ManufacturingFacilityUsageColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ManufacturingFacilityFWSystemLevelColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ComponentFacilityNameColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ComponentFacilitySystemColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ComponentFacilityRegionColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ComponentFacilitySystemIndexColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.ComponentFacilityTaxColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ComponentFacilityMEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ComponentFacilityTEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ComponentFacilityUsageColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ComponentFacilityFWSystemLevelColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CapComponentFacilityNameColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.CapComponentFacilitySystemColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.CapComponentFacilityRegionColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.CapComponentFacilitySystemIndexColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.CapComponentFacilityTaxColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CapComponentFacilityMEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CapComponentFacilityTEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CapComponentFacilityUsageColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CapComponentFacilityFWSystemLevelColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CopyingFacilityNameColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.CopyingFacilitySystemColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.CopyingFacilityRegionColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.CopyingFacilitySystemIndexColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.CopyingFacilityTaxColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CopyingFacilityMEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CopyingFacilityTEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CopyingFacilityUsageColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.CopyingFacilityFWSystemLevelColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.InventionFacilityNameColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.InventionFacilitySystemColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.InventionFacilityRegionColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.InventionFacilitySystemIndexColumnName:
                    {
                        return HorizontalAlignment.Left;
                    }
                case ProgramSettings.InventionFacilityTaxColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.InventionFacilityMEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.InventionFacilityTEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.InventionFacilityUsageColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.InventionFacilityFWSystemLevelColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReactionFacilityNameColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReactionFacilitySystemColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReactionFacilityRegionColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReactionFacilitySystemIndexColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReactionFacilityTaxColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReactionFacilityMEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReactionFacilityTEBonusColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReactionFacilityUsageColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReactionFacilityFWSystemLevelColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReprocessingFacilityNameColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReprocessingFacilitySystemColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReprocessingFacilityRegionColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReprocessingFacilityTaxColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReprocessingFacilityUsageColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReprocessingFacilityOreRefineRateColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReprocessingFacilityIceRefineRateColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }
                case ProgramSettings.ReprocessingFacilityMoonRefineRateColumnName:
                    {
                        return HorizontalAlignment.Right;
                    }

                default:
                    {
                        return 0;
                    }
            }

        }

        #endregion

        private void InitManufacturingTab()
        {

            lstManufacturing.Items.Clear();

            {
                ref var withBlock = ref SettingsVariables.UserManufacturingTabSettings;
                // Blueprints
                chkCalcNPCBPOs.Checked = withBlock.CheckBPTypeNPCBPOs;
                chkCalcAmmo.Checked = withBlock.CheckBPTypeAmmoCharges;
                chkCalcBoosters.Checked = withBlock.CheckBPTypeBoosters;
                chkCalcComponents.Checked = withBlock.CheckBPTypeComponents;
                chkCalcDrones.Checked = withBlock.CheckBPTypeDrones;
                chkCalcModules.Checked = withBlock.CheckBPTypeModules;
                chkCalcRigs.Checked = withBlock.CheckBPTypeRigs;
                chkCalcShips.Checked = withBlock.CheckBPTypeShips;
                chkCalcSubsystems.Checked = withBlock.CheckBPTypeSubsystems;
                chkCalcStructures.Checked = withBlock.CheckBPTypeStructures;
                chkCalcMisc.Checked = withBlock.CheckBPTypeMisc;
                chkCalcDeployables.Checked = withBlock.CheckBPTypeDeployables;
                chkCalcCelestials.Checked = withBlock.CheckBPTypeCelestials;
                chkCalcReactions.Checked = withBlock.CheckBPTypeReactions;
                chkCalcStructureModules.Checked = withBlock.CheckBPTypeStructureModules;
                chkCalcStructureRigs.Checked = withBlock.CheckBPTypeStationParts;

                // Tech
                chkCalcT1.Checked = withBlock.CheckTech1;
                chkCalcT2.Checked = withBlock.CheckTech2;
                chkCalcT3.Checked = withBlock.CheckTech3;
                chkCalcStoryline.Checked = withBlock.CheckTechStoryline;
                chkCalcPirateFaction.Checked = withBlock.CheckTechPirate;
                chkCalcNavyFaction.Checked = withBlock.CheckTechNavy;

                // Blueprint load types
                switch (withBlock.BlueprintType ?? "")
                {
                    case var @case when @case == (rbtnCalcAllBPs.Text ?? ""):
                        {
                            rbtnCalcAllBPs.Checked = true;
                            gbCalcIncludeOwned.Enabled = false;
                            break;
                        }
                    case var case1 when case1 == (rbtnCalcBPOwned.Text ?? ""):
                        {
                            rbtnCalcBPOwned.Checked = true;
                            gbCalcIncludeOwned.Enabled = true;
                            break;
                        }
                }

                cmbCalcBPTypeFilter.Text = withBlock.ItemTypeFilter;
                txtCalcItemFilter.Text = withBlock.TextItemFilter;

                chkCalcAutoCalcT2NumBPs.Checked = withBlock.CheckAutoCalcNumBPs;

                FirstManufacturingGridLoad = false; // Change this now so it will load the grids for all on reset

                chkCalcTaxes.Checked = withBlock.CheckIncludeTaxes;
                switch (withBlock.CheckIncludeBrokersFees)
                {
                    case 2:
                        {
                            chkCalcFees.CheckState = CheckState.Indeterminate;
                            txtCalcBrokerFeeRate.Visible = true;
                            break;
                        }
                    case 1:
                        {
                            chkCalcFees.CheckState = CheckState.Checked;
                            break;
                        }
                    case 0:
                        {
                            chkCalcFees.CheckState = CheckState.Unchecked;
                            break;
                        }
                }

                txtCalcBrokerFeeRate.Text = Strings.FormatPercent(withBlock.CalcBrokerFeeRate, 1);

                chkCalcSellExessItems.Checked = withBlock.CheckSellExcessItems;

                switch (withBlock.BuildT2T3Materials)
                {
                    case BuildMatType.AdvMaterials:
                        {
                            rbtnCalcAdvT2MatType.Checked = true;
                            break;
                        }
                    case BuildMatType.ProcessedMaterials:
                        {
                            rbtnCalcProcT2MatType.Checked = true;
                            break;
                        }
                    case BuildMatType.RawMaterials:
                        {
                            rbtnCalcRawT2MatType.Checked = true;
                            break;
                        }
                }

                // Check wrecked Relics, do not check meta levels or decryptors (NONE)
                chkCalcDecryptor0.CheckState = (CheckState)withBlock.CheckDecryptorOptimal;
                chkCalcDecryptor1.Checked = withBlock.CheckDecryptorNone; // No decryptor
                chkCalcDecryptor2.Checked = withBlock.CheckDecryptor06;
                chkCalcDecryptor3.Checked = withBlock.CheckDecryptor09;
                chkCalcDecryptor4.Checked = withBlock.CheckDecryptor10;
                chkCalcDecryptor5.Checked = withBlock.CheckDecryptor11;
                chkCalcDecryptor6.Checked = withBlock.CheckDecryptor12;
                chkCalcDecryptor7.Checked = withBlock.CheckDecryptor15;
                chkCalcDecryptor8.Checked = withBlock.CheckDecryptor18;
                chkCalcDecryptor9.Checked = withBlock.CheckDecryptor19;

                // Change the name based on the check state
                if (chkCalcDecryptor0.CheckState == CheckState.Unchecked)
                {
                    chkCalcDecryptor0.Text = "Optimal";
                }
                else if (chkCalcDecryptor0.CheckState == CheckState.Checked)
                {
                    chkCalcDecryptor0.Text = "Optimal IPH";
                }
                else if (chkCalcDecryptor0.CheckState == CheckState.Indeterminate)
                {
                    chkCalcDecryptor0.Text = "Optimal Profit";
                }

                if (chkCalcDecryptor0.CheckState != CheckState.Unchecked)
                {
                    chkCalcDecryptor1.Enabled = false;
                    chkCalcDecryptor2.Enabled = false;
                    chkCalcDecryptor3.Enabled = false;
                    chkCalcDecryptor4.Enabled = false;
                    chkCalcDecryptor5.Enabled = false;
                    chkCalcDecryptor6.Enabled = false;
                    chkCalcDecryptor7.Enabled = false;
                    chkCalcDecryptor8.Enabled = false;
                    chkCalcDecryptor9.Enabled = false;
                }
                else
                {
                    chkCalcDecryptor1.Enabled = true;
                    chkCalcDecryptor2.Enabled = true;
                    chkCalcDecryptor3.Enabled = true;
                    chkCalcDecryptor4.Enabled = true;
                    chkCalcDecryptor5.Enabled = true;
                    chkCalcDecryptor6.Enabled = true;
                    chkCalcDecryptor7.Enabled = true;
                    chkCalcDecryptor8.Enabled = true;
                    chkCalcDecryptor9.Enabled = true;
                }

                chkCalcDecryptorforT2.Checked = withBlock.CheckDecryptorUseforT2;
                chkCalcDecryptorforT3.Checked = withBlock.CheckDecryptorUseforT3;

                chkCalcRERelic3.Checked = withBlock.CheckRelicIntact;
                chkCalcRERelic2.Checked = withBlock.CheckRelicMalfunction;
                chkCalcRERelic1.Checked = withBlock.CheckRelicWrecked;

                chkCalcRaceAmarr.Checked = withBlock.CheckRaceAmarr;
                chkCalcRaceCaldari.Checked = withBlock.CheckRaceCaldari;
                chkCalcRaceMinmatar.Checked = withBlock.CheckRaceMinmatar;
                chkCalcRaceGallente.Checked = withBlock.CheckRaceGallente;
                chkCalcRacePirate.Checked = withBlock.CheckRacePirate;
                chkCalcRaceOther.Checked = withBlock.CheckRaceOther;

                chkCalcSmall.Checked = withBlock.CheckSmall;
                chkCalcMedium.Checked = withBlock.CheckMedium;
                chkCalcLarge.Checked = withBlock.CheckLarge;
                chkCalcXL.Checked = withBlock.CheckXL;

                chkCalcCanBuild.Checked = withBlock.CheckOnlyBuild;
                chkCalcCanInvent.Checked = withBlock.CheckOnlyInvent;

                switch (withBlock.PriceCompare ?? "")
                {
                    case var case2 when case2 == (rbtnCalcCompareAll.Text ?? ""):
                        {
                            rbtnCalcCompareAll.Checked = true;
                            break;
                        }
                    case var case3 when case3 == (rbtnCalcCompareBuildBuy.Text ?? ""):
                        {
                            rbtnCalcCompareBuildBuy.Checked = true;
                            break;
                        }
                    case var case4 when case4 == (rbtnCalcCompareComponents.Text ?? ""):
                        {
                            rbtnCalcCompareComponents.Checked = true;
                            break;
                        }
                    case var case5 when case5 == (rbtnCalcCompareRawMats.Text ?? ""):
                        {
                            rbtnCalcCompareRawMats.Checked = true;
                            break;
                        }
                }

                // Other defaults
                txtCalcTempME.Text = SettingsVariables.UserApplicationSettings.DefaultBPME.ToString();
                txtCalcTempTE.Text = SettingsVariables.UserApplicationSettings.DefaultBPTE.ToString();

                chkCalcIncludeT2Owned.Checked = withBlock.CheckIncludeT2Owned;
                chkCalcIncludeT3Owned.Checked = withBlock.CheckIncludeT3Owned;

                chkCalcSVRIncludeNull.Checked = withBlock.CheckSVRIncludeNull;

                txtCalcSVRThreshold.Text = SettingsVariables.UserApplicationSettings.IgnoreSVRThresholdValue.ToString();
                cmbCalcHistoryRegion.Text = SettingsVariables.UserApplicationSettings.SVRAveragePriceRegion;
                cmbCalcAvgPriceDuration.Text = SettingsVariables.UserApplicationSettings.SVRAveragePriceDuration;

                txtCalcProdLines.Text = withBlock.ProductionLines.ToString();
                txtCalcLabLines.Text = withBlock.LaboratoryLines.ToString();
                txtCalcRuns.Text = withBlock.Runs.ToString();
                txtCalcNumBPs.Text = withBlock.BPRuns.ToString();

                // Time pickers
                chkCalcMaxBuildTimeFilter.Checked = withBlock.MaxBuildTimeCheck;
                chkCalcMinBuildTimeFilter.Checked = withBlock.MinBuildTimeCheck;
                tpMaxBuildTimeFilter.Text = withBlock.MaxBuildTime;
                tpMinBuildTimeFilter.Text = withBlock.MinBuildTime;

                cmbCalcPriceTrend.Text = withBlock.PriceTrend;

                // Thresholds
                chkCalcIPHThreshold.Checked = withBlock.IPHThresholdCheck;
                txtCalcIPHThreshold.Text = Strings.FormatNumber(withBlock.IPHThreshold, 2);
                chkCalcVolumeThreshold.Checked = withBlock.VolumeThresholdCheck;
                txtCalcVolumeThreshold.Text = Strings.FormatNumber(withBlock.VolumeThreshold, 2);

                ProfitPercentText = "0.0%";
                ProfitText = "0.00";

                switch (withBlock.ProfitThresholdCheck)
                {
                    case (int)CheckState.Checked:
                        {
                            chkCalcProfitThreshold.CheckState = CheckState.Checked;
                            txtCalcProfitThreshold.Text = Strings.FormatNumber(withBlock.ProfitThreshold, 2);
                            ProfitText = txtCalcProfitThreshold.Text;
                            chkCalcProfitThreshold.Text = "Profit Threshold";
                            txtCalcProfitThreshold.Enabled = true;
                            break;
                        }
                    case (int)CheckState.Unchecked:
                        {
                            chkCalcProfitThreshold.CheckState = CheckState.Unchecked;
                            txtCalcProfitThreshold.Text = Strings.FormatNumber(withBlock.ProfitThreshold, 2);
                            ProfitText = txtCalcProfitThreshold.Text;
                            chkCalcProfitThreshold.Text = "Profit Threshold";
                            txtCalcProfitThreshold.Enabled = false;
                            break;
                        }
                    case (int)CheckState.Indeterminate:
                        {
                            chkCalcProfitThreshold.CheckState = CheckState.Indeterminate;
                            txtCalcProfitThreshold.Text = Strings.FormatPercent(withBlock.ProfitThreshold, 1);
                            ProfitPercentText = txtCalcProfitThreshold.Text;
                            chkCalcProfitThreshold.Text = "Profit % Threshold";
                            txtCalcProfitThreshold.Enabled = true;
                            break;
                        }
                }

                chkCalcPPU.Checked = withBlock.CalcPPU;
                chkBPSellExcessItems.Checked = withBlock.CheckSellExcessItems;

                ListIDIterator = 0;

                btnCalcCalculate.Enabled = true;
                lstManufacturing.Enabled = true;

                if (withBlock.ColumnSortType == "Ascending")
                {
                    ManufacturingColumnSortType = SortOrder.Ascending;
                }
                else
                {
                    ManufacturingColumnSortType = SortOrder.Descending;
                }

                ManufacturingColumnClicked = withBlock.ColumnSort;

                AddToShoppingListToolStripMenuItem.Enabled = false; // Don't enable this until they calculate something

            }

            ResetRefresh();
            EnableDisableT2T3Options();

        }

        // Saves all the settings on the screen
        private void btnCalcSaveSettings_Click(object sender, EventArgs e)
        {
            ManufacturingTabSettings TempSettings = default;
            var Settings = new ProgramSettings();

            // If they entered an ME/TE value make sure it's ok
            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcTempME.Text)))
            {
                if (!Information.IsNumeric(txtCalcTempME.Text))
                {
                    Interaction.MsgBox("Invalid Temp ME value", Constants.vbExclamation, Application.ProductName);
                    txtCalcTempME.Focus();
                    return;
                }
            }
            else
            {
                txtCalcTempME.Text = "0";
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcTempTE.Text)))
            {
                if (!Information.IsNumeric(txtCalcTempTE.Text))
                {
                    Interaction.MsgBox("Invalid Temp TE value", Constants.vbExclamation, Application.ProductName);
                    txtCalcTempTE.Focus();
                    return;
                }
            }
            else
            {
                txtCalcTempTE.Text = "0";
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcSVRThreshold.Text)))
            {
                if (!Information.IsNumeric(txtCalcSVRThreshold.Text))
                {
                    Interaction.MsgBox("Invalid SVR Threshold value", Constants.vbExclamation, Application.ProductName);
                    txtCalcSVRThreshold.Focus();
                    return;
                }
            }
            else
            {
                txtCalcSVRThreshold.Text = "0";
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcRuns.Text)))
            {
                if (!Information.IsNumeric(txtCalcRuns.Text))
                {
                    Interaction.MsgBox("Invalid Runs Value", Constants.vbExclamation, Application.ProductName);
                    txtCalcProdLines.Focus();
                    return;
                }
            }
            else
            {
                txtCalcRuns.Text = "1";
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcProdLines.Text)))
            {
                if (!Information.IsNumeric(txtCalcProdLines.Text))
                {
                    Interaction.MsgBox("Invalid Production Lines Value", Constants.vbExclamation, Application.ProductName);
                    txtCalcProdLines.Focus();
                    return;
                }
            }
            else
            {
                txtCalcProdLines.Text = "1";
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcLabLines.Text)))
            {
                if (!Information.IsNumeric(txtCalcLabLines.Text))
                {
                    Interaction.MsgBox("Invalid Laboratory Lines Value", Constants.vbExclamation, Application.ProductName);
                    txtCalcLabLines.Focus();
                    return;
                }
            }
            else
            {
                txtCalcLabLines.Text = "1";
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcNumBPs.Text)))
            {
                if (!Information.IsNumeric(txtCalcRuns.Text))
                {
                    Interaction.MsgBox("Invalid Number of BPs Value", Constants.vbExclamation, Application.ProductName);
                    txtCalcNumBPs.Focus();
                    return;
                }
            }
            else
            {
                txtCalcNumBPs.Text = "1";
            }

            // Save the column order and width first
            SettingsVariables.AllSettings.SaveManufacturingTabColumnSettings(SettingsVariables.UserManufacturingTabColumnSettings);

            TempSettings.CheckBPTypeNPCBPOs = chkCalcNPCBPOs.Checked;
            TempSettings.CheckBPTypeAmmoCharges = chkCalcAmmo.Checked;
            TempSettings.CheckBPTypeBoosters = chkCalcBoosters.Checked;
            TempSettings.CheckBPTypeComponents = chkCalcComponents.Checked;
            TempSettings.CheckBPTypeDrones = chkCalcDrones.Checked;
            TempSettings.CheckBPTypeModules = chkCalcModules.Checked;
            TempSettings.CheckBPTypeRigs = chkCalcRigs.Checked;
            TempSettings.CheckBPTypeShips = chkCalcShips.Checked;
            TempSettings.CheckBPTypeSubsystems = chkCalcSubsystems.Checked;
            TempSettings.CheckBPTypeStructures = chkCalcStructures.Checked;
            TempSettings.CheckBPTypeMisc = chkCalcMisc.Checked;
            TempSettings.CheckBPTypeDeployables = chkCalcDeployables.Checked;
            TempSettings.CheckBPTypeCelestials = chkCalcCelestials.Checked;
            TempSettings.CheckBPTypeReactions = chkCalcReactions.Checked;
            TempSettings.CheckBPTypeStructureModules = chkCalcStructureModules.Checked;
            TempSettings.CheckBPTypeStationParts = chkCalcStructureRigs.Checked;

            TempSettings.CheckTech1 = chkCalcT1.Checked;
            TempSettings.CheckTech2 = chkCalcT2.Checked;
            TempSettings.CheckTech3 = chkCalcT3.Checked;
            TempSettings.CheckTechStoryline = chkCalcStoryline.Checked;
            TempSettings.CheckTechPirate = chkCalcPirateFaction.Checked;
            TempSettings.CheckTechNavy = chkCalcNavyFaction.Checked;

            if (CalcComponentsFacility.GetCurrentFacilityProductionType() == ProductionType.CapitalComponentManufacturing)
            {
                TempSettings.CheckCapitalComponentsFacility = true;
            }
            else
            {
                TempSettings.CheckCapitalComponentsFacility = false;
            }

            if (CalcT3ShipsFacility.GetCurrentFacilityProductionType() == ProductionType.T3DestroyerManufacturing)
            {
                TempSettings.CheckT3DestroyerFacility = true;
            }
            else
            {
                TempSettings.CheckT3DestroyerFacility = false;
            }

            TempSettings.CheckAutoCalcNumBPs = chkCalcAutoCalcT2NumBPs.Checked;

            // Blueprint load types
            if (rbtnCalcAllBPs.Checked)
            {
                TempSettings.BlueprintType = rbtnCalcAllBPs.Text;
            }
            else if (rbtnCalcBPOwned.Checked)
            {
                TempSettings.BlueprintType = rbtnCalcBPOwned.Text;
            }

            TempSettings.ItemTypeFilter = cmbCalcBPTypeFilter.Text;
            TempSettings.TextItemFilter = txtCalcItemFilter.Text;

            TempSettings.CheckIncludeTaxes = chkCalcTaxes.Checked;
            if (chkCalcFees.CheckState == CheckState.Indeterminate)
            {
                TempSettings.CheckIncludeBrokersFees = 2;
            }
            else if (chkCalcFees.CheckState == CheckState.Checked)
            {
                TempSettings.CheckIncludeBrokersFees = 1;
            }
            else
            {
                TempSettings.CheckIncludeBrokersFees = 0;
            }
            TempSettings.CalcBrokerFeeRate = Public_Variables.FormatManualPercentEntry(txtCalcBrokerFeeRate.Text);

            TempSettings.CheckSellExcessItems = chkCalcSellExessItems.Checked;

            TempSettings.CheckDecryptorOptimal = (int)chkCalcDecryptor0.CheckState;
            TempSettings.CheckDecryptorNone = chkCalcDecryptor1.Checked;
            TempSettings.CheckDecryptor06 = chkCalcDecryptor2.Checked;
            TempSettings.CheckDecryptor09 = chkCalcDecryptor3.Checked;
            TempSettings.CheckDecryptor10 = chkCalcDecryptor4.Checked;
            TempSettings.CheckDecryptor11 = chkCalcDecryptor5.Checked;
            TempSettings.CheckDecryptor12 = chkCalcDecryptor6.Checked;
            TempSettings.CheckDecryptor15 = chkCalcDecryptor7.Checked;
            TempSettings.CheckDecryptor18 = chkCalcDecryptor8.Checked;
            TempSettings.CheckDecryptor19 = chkCalcDecryptor9.Checked;

            TempSettings.CheckDecryptorUseforT2 = chkCalcDecryptorforT2.Checked;
            TempSettings.CheckDecryptorUseforT3 = chkCalcDecryptorforT3.Checked;

            TempSettings.CheckRelicIntact = chkCalcRERelic3.Checked;
            TempSettings.CheckRelicMalfunction = chkCalcRERelic2.Checked;
            TempSettings.CheckRelicWrecked = chkCalcRERelic1.Checked;

            TempSettings.CheckRaceAmarr = chkCalcRaceAmarr.Checked;
            TempSettings.CheckRaceCaldari = chkCalcRaceCaldari.Checked;
            TempSettings.CheckRaceMinmatar = chkCalcRaceMinmatar.Checked;
            TempSettings.CheckRaceGallente = chkCalcRaceGallente.Checked;
            TempSettings.CheckRacePirate = chkCalcRacePirate.Checked;
            TempSettings.CheckRaceOther = chkCalcRaceOther.Checked;

            TempSettings.CalcPPU = chkCalcPPU.Checked;
            TempSettings.CheckSellExcessItems = chkBPSellExcessItems.Checked;

            TempSettings.ColumnSort = ManufacturingColumnClicked;
            if (ManufacturingColumnSortType == SortOrder.Ascending)
            {
                TempSettings.ColumnSortType = "Ascending";
            }
            else
            {
                TempSettings.ColumnSortType = "Decending";
            }

            // Sort the list based on the saved column, if they change the number of columns below value, then find IPH, if not there, use column 0
            if (ManufacturingColumnClicked > lstManufacturing.Columns.Count)
            {
                // Find the IPH column
                if (SettingsVariables.UserManufacturingTabColumnSettings.IskperHour != 0)
                {
                    ManufacturingColumnClicked = SettingsVariables.UserManufacturingTabColumnSettings.IskperHour;
                }
                else
                {
                    ManufacturingColumnClicked = 0;
                } // Default, will always be there

            }

            TempSettings.ColumnSort = ManufacturingColumnClicked;

            if (rbtnCalcCompareAll.Checked)
            {
                TempSettings.PriceCompare = rbtnCalcCompareAll.Text;
            }
            else if (rbtnCalcCompareBuildBuy.Checked)
            {
                TempSettings.PriceCompare = rbtnCalcCompareBuildBuy.Text;
            }
            else if (rbtnCalcCompareComponents.Checked)
            {
                TempSettings.PriceCompare = rbtnCalcCompareComponents.Text;
            }
            else if (rbtnCalcCompareRawMats.Checked)
            {
                TempSettings.PriceCompare = rbtnCalcCompareRawMats.Text;
            }

            TempSettings.CheckSmall = chkCalcSmall.Checked;
            TempSettings.CheckMedium = chkCalcMedium.Checked;
            TempSettings.CheckLarge = chkCalcLarge.Checked;
            TempSettings.CheckXL = chkCalcXL.Checked;

            TempSettings.CheckIncludeT2Owned = chkCalcIncludeT2Owned.Checked;
            TempSettings.CheckIncludeT3Owned = chkCalcIncludeT3Owned.Checked;

            TempSettings.CheckSVRIncludeNull = chkCalcSVRIncludeNull.Checked;

            TempSettings.ProductionLines = Conversions.ToInteger(txtCalcProdLines.Text);
            TempSettings.LaboratoryLines = Conversions.ToInteger(txtCalcLabLines.Text);
            TempSettings.Runs = Conversions.ToInteger(txtCalcRuns.Text);
            TempSettings.BPRuns = Conversions.ToInteger(txtCalcNumBPs.Text);

            TempSettings.CheckOnlyBuild = chkCalcCanBuild.Checked;
            TempSettings.CheckOnlyInvent = chkCalcCanInvent.Checked;

            TempSettings.PriceTrend = cmbCalcPriceTrend.Text;

            TempSettings.MaxBuildTimeCheck = chkCalcMaxBuildTimeFilter.Checked;
            TempSettings.MaxBuildTime = tpMaxBuildTimeFilter.Text;
            TempSettings.MinBuildTimeCheck = chkCalcMinBuildTimeFilter.Checked;
            TempSettings.MinBuildTime = tpMinBuildTimeFilter.Text;

            TempSettings.IPHThresholdCheck = chkCalcIPHThreshold.Checked;
            TempSettings.IPHThreshold = Conversions.ToDouble(txtCalcIPHThreshold.Text);
            TempSettings.VolumeThresholdCheck = chkCalcVolumeThreshold.Checked;
            TempSettings.VolumeThreshold = Conversions.ToDouble(txtCalcVolumeThreshold.Text);

            // How they want to build T2/T3 items
            if (rbtnCalcAdvT2MatType.Checked)
            {
                TempSettings.BuildT2T3Materials = BuildMatType.AdvMaterials;
            }
            else if (rbtnCalcProcT2MatType.Checked)
            {
                TempSettings.BuildT2T3Materials = BuildMatType.ProcessedMaterials;
            }
            else if (rbtnCalcRawT2MatType.Checked)
            {
                TempSettings.BuildT2T3Materials = BuildMatType.RawMaterials;
            }

            switch (chkCalcProfitThreshold.CheckState)
            {
                case CheckState.Checked:
                    {
                        TempSettings.ProfitThresholdCheck = (int)CheckState.Checked;
                        TempSettings.ProfitThreshold = Conversions.ToDouble(txtCalcProfitThreshold.Text.Replace("%", ""));
                        break;
                    }
                case CheckState.Unchecked:
                    {
                        TempSettings.ProfitThresholdCheck = (int)CheckState.Unchecked;
                        TempSettings.ProfitThreshold = Conversions.ToDouble(txtCalcProfitThreshold.Text.Replace("%", ""));
                        break;
                    }
                case CheckState.Indeterminate:
                    {
                        // Profit percent
                        TempSettings.ProfitThresholdCheck = (int)CheckState.Indeterminate;
                        TempSettings.ProfitThreshold = Public_Variables.CpctD(txtCalcProfitThreshold.Text);
                        break;
                    }
            }

            // Save these here as well as in settings
            {
                ref var withBlock = ref SettingsVariables.UserApplicationSettings;
                withBlock.DefaultBPME = Conversions.ToInteger(txtCalcTempME.Text);
                withBlock.DefaultBPTE = Conversions.ToInteger(txtCalcTempTE.Text);

                withBlock.IgnoreSVRThresholdValue = Conversions.ToDouble(txtCalcSVRThreshold.Text);
                withBlock.SVRAveragePriceRegion = cmbCalcHistoryRegion.Text;
                withBlock.SVRAveragePriceDuration = cmbCalcAvgPriceDuration.Text;
            }


            Settings.SaveApplicationSettings(SettingsVariables.UserApplicationSettings);


            // Save the data in the XML file
            Settings.SaveManufacturingSettings(TempSettings);

            // Save the data to the local variable
            SettingsVariables.UserManufacturingTabSettings = TempSettings;

            Interaction.MsgBox("Settings Saved", Constants.vbInformation, Application.ProductName);

        }

        // Switches button to calculate
        public void ResetRefresh()
        {
            RefreshCalcData = false;
            btnCalcCalculate.Text = "Calculate";
        }

        public struct OptimalDecryptorItem
        {
            public long ItemTypeID;
            public int ListLocationID; // The unique number of the item in the list
            public string CalcType; // Raw, Component, or Build/Buy
            public double CompareValue; // IPH or profit
        }

        private int ReturnNumber()
        {
            return 1;
        }

        // Displays the results of the options on the screen. If Calculate is true, then it will run the calculations. If not, just a preview of the data
        private void DisplayManufacturingResults(bool Calculate)
        {
            string SQL;
            SQLiteDataReader readerBPs;
            SQLiteDataReader readerIDs;

            var UpdateTypeIDs = new List<long>(); // Full list of TypeID's to update SVR data with, these will have Market IDs
            var MarketRegionID = default(long);
            var AveragePriceDays = default(int);

            var BaseItems = new List<ManufacturingItem>(); // Holds all the items and their decryptors, relics, meta etc for initial list
            var ManufacturingList = new List<ManufacturingItem>(); // List of all the items we manufactured - may be different than the item list
            var FinalItemList = new List<ManufacturingItem>(); // Final list of data

            var InsertItem = new ManufacturingItem();

            Blueprint ManufacturingBlueprint;

            ListViewItem BPList;

            int i, j;
            int BPRecordCount = 0;
            int TotalItemCount = 0;
            int TempItemType = 0;

            var InventionDecryptors = new DecryptorList();

            int OrigME;
            int OrigTE;

            bool AddItem;
            var DecryptorUsed = new Decryptor();

            // T2/T3 variables
            string RelicName = "";
            string InputText = "";
            string DecryptorName = "";

            // BPC stuff
            double CopyPricePerSecond = 0d;
            string T1BPCType = "";
            string T1BPCName = "";
            int T1BPCMaxRuns = 0;

            // SVR Threshold
            double SVRThresholdValue;
            string TypeIDCheck = "";

            // Number of blueprints used
            int NumberofBlueprints;

            bool OriginalBPOwnedFlag;

            // For the optimal decryptor checking
            var OptimalDecryptorItems = new List<OptimalDecryptorItem>();

            bool ItemIsReaction;

            var PolarizedWeapon = default(bool);

            // Set this now and enable it if they calculate
            AddToShoppingListToolStripMenuItem.Enabled = false;

            // If they entered an ME/TE value make sure it's ok
            bool localCorrectMETE() { var argMETextBox3 = txtCalcTempME; var argTETextBox3 = txtCalcTempTE; var ret = CorrectMETE(txtCalcTempME.Text, txtCalcTempTE.Text, ref argMETextBox3, ref argTETextBox3); txtCalcTempME = argMETextBox3; txtCalcTempTE = argTETextBox3; return ret; }

            if (!localCorrectMETE())
            {
                return;
            }

            if (!string.IsNullOrEmpty(Strings.Trim(cmbCalcAvgPriceDuration.Text)))
            {
                if (!Information.IsNumeric(cmbCalcAvgPriceDuration.Text))
                {
                    Interaction.MsgBox("Invalid SVR Average Days. Please select a valid number of days from the combo selection box.", Constants.vbExclamation, Application.ProductName);
                    cmbCalcAvgPriceDuration.Focus();
                    cmbCalcAvgPriceDuration.SelectAll();
                    return;
                }
            }

            // Days can only be between 2 and 365 based on ESI data
            if (Conversions.ToInteger(cmbCalcAvgPriceDuration.Text) < 2 | Conversions.ToInteger(cmbCalcAvgPriceDuration.Text) > 365)
            {
                Interaction.MsgBox("Averge price updates can only be done for greater than 1 or less than 365 days", Constants.vbExclamation, Application.ProductName);
                cmbCalcAvgPriceDuration.Focus();
                cmbCalcAvgPriceDuration.SelectAll();
                return;
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcProdLines.Text)))
            {
                if (!Information.IsNumeric(txtCalcProdLines.Text))
                {
                    Interaction.MsgBox("Invalid Production Lines value", Constants.vbExclamation, Application.ProductName);
                    txtCalcProdLines.Focus();
                    txtCalcProdLines.SelectAll();
                    return;
                }
            }

            if (Conversion.Val(txtCalcProdLines.Text) == 0d)
            {
                Interaction.MsgBox("You must select a non-zero production lines value.", Constants.vbExclamation, Application.ProductName);
                txtCalcProdLines.Focus();
                txtCalcProdLines.SelectAll();
                return;
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcNumBPs.Text)))
            {
                if (!Information.IsNumeric(txtCalcNumBPs.Text))
                {
                    Interaction.MsgBox("Invalid Num BPs value", Constants.vbExclamation, Application.ProductName);
                    txtCalcNumBPs.Focus();
                    txtCalcNumBPs.SelectAll();
                    return;
                }
            }

            if (Conversion.Val(txtCalcNumBPs.Text) == 0d)
            {
                Interaction.MsgBox("You must select a non-zero Num BPs value.", Constants.vbExclamation, Application.ProductName);
                txtCalcNumBPs.Focus();
                txtCalcNumBPs.SelectAll();
                return;
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcRuns.Text)))
            {
                if (!Information.IsNumeric(txtCalcRuns.Text))
                {
                    Interaction.MsgBox("Invalid Runs value", Constants.vbExclamation, Application.ProductName);
                    txtCalcRuns.Focus();
                    txtCalcRuns.SelectAll();
                    return;
                }
            }

            if (Conversion.Val(txtCalcRuns.Text) == 0d)
            {
                Interaction.MsgBox("You must select a non-zero Runs value.", Constants.vbExclamation, Application.ProductName);
                txtCalcRuns.Focus();
                txtCalcRuns.SelectAll();
                return;
            }

            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcLabLines.Text)))
            {
                if (!Information.IsNumeric(txtCalcLabLines.Text))
                {
                    Interaction.MsgBox("Invalid Laboratory Lines value", Constants.vbExclamation, Application.ProductName);
                    txtCalcLabLines.Focus();
                    txtCalcLabLines.SelectAll();
                    return;
                }
            }

            if (Conversion.Val(txtCalcLabLines.Text) == 0d)
            {
                Interaction.MsgBox("You must select a non-zero laboratory lines value.", Constants.vbExclamation, Application.ProductName);
                txtCalcLabLines.Focus();
                txtCalcLabLines.SelectAll();
                return;
            }

            // Make sure the build times don't overlap if both checked
            if (chkCalcMinBuildTimeFilter.Checked & chkCalcMaxBuildTimeFilter.Checked)
            {
                if (Public_Variables.ConvertDHMSTimetoSeconds(tpMinBuildTimeFilter.Text) >= Public_Variables.ConvertDHMSTimetoSeconds(tpMaxBuildTimeFilter.Text))
                {
                    Interaction.MsgBox("You must select a Min Build time less than the Max Build time selected.", Constants.vbExclamation, Application.ProductName);
                    chkCalcMinBuildTimeFilter.Focus();
                    return;
                }
            }

            if (string.IsNullOrEmpty(txtCalcSVRThreshold.Text))
            {
                SVRThresholdValue = (double)default; // Include everything
            }
            else
            {
                SVRThresholdValue = Conversions.ToDouble(txtCalcSVRThreshold.Text);
            }

            // Save the refresh value since everytime we load the facility it will change it
            bool SavedRefreshValue = RefreshCalcData;

            // Make sure they have a facility loaded - if not, load the default for the type
            if (!CalcBaseFacility.GetFacility(ProductionType.Manufacturing).FullyLoaded)
            {
                CalcBaseFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.Manufacturing);
            }
            if (!CalcComponentsFacility.GetFacility(ProductionType.ComponentManufacturing).FullyLoaded)
            {
                CalcComponentsFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.ComponentManufacturing);
            }
            if (!CalcComponentsFacility.GetFacility(ProductionType.CapitalComponentManufacturing).FullyLoaded)
            {
                CalcComponentsFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.CapitalComponentManufacturing);
            }
            if (!CalcInventionFacility.GetFacility(ProductionType.Invention).FullyLoaded)
            {
                CalcInventionFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.Invention);
            }
            if (!CalcCopyFacility.GetFacility(ProductionType.Copying).FullyLoaded)
            {
                CalcCopyFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.Copying);
            }
            if (!CalcT3InventionFacility.GetFacility(ProductionType.T3Invention).FullyLoaded)
            {
                CalcT3InventionFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.T3Invention);
            }
            if (!CalcSupersFacility.GetFacility(ProductionType.SuperManufacturing).FullyLoaded)
            {
                CalcSupersFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.SuperManufacturing);
            }
            if (!CalcCapitalsFacility.GetFacility(ProductionType.CapitalManufacturing).FullyLoaded)
            {
                CalcCapitalsFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.CapitalManufacturing);
            }
            if (!CalcT3ShipsFacility.GetFacility(ProductionType.T3CruiserManufacturing).FullyLoaded)
            {
                CalcT3ShipsFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.T3CruiserManufacturing);
            }
            if (!CalcT3ShipsFacility.GetFacility(ProductionType.T3DestroyerManufacturing).FullyLoaded)
            {
                CalcT3ShipsFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.T3DestroyerManufacturing);
            }
            if (!CalcSubsystemsFacility.GetFacility(ProductionType.SubsystemManufacturing).FullyLoaded)
            {
                CalcSubsystemsFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.SubsystemManufacturing);
            }
            if (!CalcBoostersFacility.GetFacility(ProductionType.BoosterManufacturing).FullyLoaded)
            {
                CalcBoostersFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.BoosterManufacturing);
            }
            if (!CalcReactionsFacility.GetFacility(ProductionType.Reactions).FullyLoaded)
            {
                CalcReactionsFacility.InitializeFacilities(ProgramLocation.ManufacturingTab, ProductionType.Reactions);
            }

            if (!SavedRefreshValue)
            {
                Application.UseWaitCursor = true;
                Cursor = Cursors.WaitCursor;
                Application.DoEvents();

                // Only cancel if they hit the cancel button
                btnCalcCalculate.Text = "Cancel";

                // Get the query for the data
                SQL = BuildManufacturingSelectQuery(ref BPRecordCount, ref UserInventedBPs);

                if (string.IsNullOrEmpty(SQL))
                {
                    // No valid query so just show nothing
                    lstManufacturing.Items.Clear();
                    FinalManufacturingItemList = null;
                    goto ExitCalc;
                }

                // Get data
                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                Public_Variables.DBCommand.Parameters.AddWithValue("@USERBP_USERID", Public_Variables.GetBPUserID(Public_Variables.SelectedCharacter.ID)); // need to search for corp ID too
                Public_Variables.DBCommand.Parameters.AddWithValue("@USERBP_CORPID", Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID.ToString());
                readerBPs = Public_Variables.DBCommand.ExecuteReader();

                if (!readerBPs.HasRows)
                {
                    // No data
                    lstManufacturing.Items.Clear();
                    // Clear list of data
                    FinalManufacturingItemList = null;
                    goto ExitCalc;
                }

                // Me.Cursor = Cursors.WaitCursor
                pnlProgressBar.Minimum = 0;
                pnlProgressBar.Maximum = BPRecordCount;
                pnlProgressBar.Value = 0;
                pnlProgressBar.Visible = true;

                // Reset the record Iterator and list formats
                ListIDIterator = 0;
                ListRowFormats = new List<RowFormat>();

                pnlStatus.Text = "Building List...";

                // Add the data to the final list, then display into the grid
                while (readerBPs.Read())
                {
                    Application.DoEvents();
                    // If they cancel the calc
                    if (Public_Variables.CancelManufacturingTabCalc)
                    {
                        goto ExitCalc;
                    }

                    // 0-BP_ID, 1-BLUEPRINT_GROUP, 2-BLUEPRINT_NAME, 3-ITEM_GROUP_ID, 4-ITEM_GROUP, 5-ITEM_CATEGORY_ID, 
                    // 6-ITEM_CATEGORY, 7-ITEM_ID, 8-ITEM_NAME, 9-ME, 10-TE, 11-USERID, 12-ITEM_TYPE, 13-RACE_ID, 14-OWNED, 15-SCANNED 
                    // 16-BP_TYPE, 17-UNIQUE_BP_ITEM_ID, 18-FAVORITE, 19-VOLUME, 20-MARKET_GROUP_ID, 21-ADDITIONAL_COSTS, 
                    // 22-LOCATION_ID, 23-QUANTITY, 24-FLAG_ID, 25-RUNS, 26-IGNORE, 27-TECH_LEVEL
                    InsertItem = new ManufacturingItem();

                    // Save the items before adding
                    InsertItem.BPID = Conversions.ToLong(readerBPs.GetValue(0)); // Hidden
                    InsertItem.ItemGroupID = readerBPs.GetInt32(3);
                    InsertItem.ItemGroup = readerBPs.GetString(4);
                    InsertItem.ItemCategoryID = readerBPs.GetInt32(5);
                    InsertItem.ItemCategory = readerBPs.GetString(6);
                    InsertItem.ItemTypeID = Conversions.ToLong(readerBPs.GetValue(7));
                    InsertItem.ItemName = readerBPs.GetString(8);
                    InsertItem.AddlCosts = readerBPs.GetDouble(21);

                    PolarizedWeapon = false;

                    if (readerBPs.GetString(2).Contains("Polarized"))
                    {
                        PolarizedWeapon = true;
                    }

                    // 1, 2, 14 are T1, T2, T3
                    // 3 is Storyline
                    // 15 is Pirate Faction
                    // 16 is Navy Faction
                    TempItemType = Conversions.ToInteger(readerBPs.GetValue(12));

                    switch (TempItemType) // For Tech
                    {
                        case 1:
                            {
                                InsertItem.TechLevel = "T1";
                                break;
                            }
                        case 2:
                            {
                                InsertItem.TechLevel = "T2";
                                break;
                            }
                        case 14:
                            {
                                InsertItem.TechLevel = "T3";
                                break;
                            }
                        case 3:
                            {
                                InsertItem.TechLevel = "Storyline";
                                break;
                            }
                        case 15:
                            {
                                InsertItem.TechLevel = "Pirate";
                                break;
                            }
                        case 16:
                            {
                                InsertItem.TechLevel = "Navy";
                                break;
                            }

                        default:
                            {
                                InsertItem.TechLevel = "";
                                break;
                            }
                    }

                    // Owned flag
                    if (readerBPs.GetInt32(14) == 0)
                    {
                        InsertItem.Owned = Public_Variables.No;
                        OriginalBPOwnedFlag = false;
                    }
                    else
                    {
                        InsertItem.Owned = Public_Variables.Yes;
                        OriginalBPOwnedFlag = true;
                    }

                    // Scanned flag for corp or personal bps
                    InsertItem.Scanned = readerBPs.GetInt32(15);

                    // BP Type
                    InsertItem.BlueprintType = Public_Variables.GetBPType(readerBPs.GetInt32(16));

                    // Save the runs for checking decryptors and relics later
                    InsertItem.SavedBPRuns = readerBPs.GetInt32(25);

                    switch (InsertItem.ItemGroupID)
                    {
                        case var @case when @case == ReturnNumber():
                            {
                                ItemIsReaction = false;
                                break;
                            }
                        case var case1 when case1 == Public_Variables.ReactionGroupID(InsertItem.ItemGroupID):
                            {
                                ItemIsReaction = true;
                                break;
                            }

                        default:
                            {
                                ItemIsReaction = false;
                                break;
                            }
                    }

                    // ME value, either what the entered or in the table
                    switch (TempItemType)
                    {
                        case 3:
                        case 15:
                        case 16:
                            {
                                // Storyline, Pirate, and Navy can't be updated
                                InsertItem.BPME = 0;
                                break;
                            }
                        case 2:
                        case 14: // T2 or T3 - either Invented, or BPO
                            {
                                if (PolarizedWeapon)
                                {
                                    InsertItem.BPME = 0;
                                }
                                else if ((InsertItem.Owned ?? "") == Public_Variables.No)
                                {
                                    InsertItem.BPME = Public_Variables.BaseT2T3ME;
                                }
                                else
                                {
                                    // Use what they entered
                                    InsertItem.BPME = Conversions.ToInteger(readerBPs.GetValue(9));
                                }

                                break;
                            }

                        default:
                            {
                                if (ItemIsReaction)
                                {
                                    // Can't research reactions
                                    InsertItem.BPTE = 0;
                                }
                                else if ((InsertItem.Owned ?? "") == Public_Variables.No)
                                {
                                    // Use the default
                                    InsertItem.BPME = Conversions.ToInteger(txtCalcTempME.Text);
                                }
                                else
                                {
                                    // Use what they entered
                                    InsertItem.BPME = Conversions.ToInteger(readerBPs.GetValue(9));
                                }

                                break;
                            }
                    }

                    // TE value, either what the entered or in the table
                    switch (TempItemType)
                    {
                        case 3:
                        case 15:
                        case 16:
                            {
                                // Storyline, Pirate, and Navy can't be updated
                                InsertItem.BPTE = 0;
                                break;
                            }
                        case 2:
                        case 14: // T2 or T3 - either Invented, or BPO
                            {
                                if (PolarizedWeapon)
                                {
                                    InsertItem.BPTE = 0;
                                }
                                else if ((InsertItem.Owned ?? "") == Public_Variables.No)
                                {
                                    InsertItem.BPTE = Public_Variables.BaseT2T3TE;
                                }
                                else
                                {
                                    // Use what they entered
                                    InsertItem.BPTE = Conversions.ToInteger(readerBPs.GetValue(10));
                                }

                                break;
                            }

                        default:
                            {
                                if (ItemIsReaction)
                                {
                                    // Can't research reactions
                                    InsertItem.BPTE = 0;
                                }
                                else if ((InsertItem.Owned ?? "") == Public_Variables.No)
                                {
                                    // Use the default
                                    InsertItem.BPTE = Conversions.ToInteger(txtCalcTempTE.Text);
                                }
                                else
                                {
                                    // Use what they entered
                                    InsertItem.BPTE = Conversions.ToInteger(readerBPs.GetValue(10));
                                }

                                break;
                            }
                    }

                    // Default to building/inventing/RE'ing all
                    InsertItem.CanBuildBP = true;
                    InsertItem.CanInvent = true;
                    InsertItem.CanRE = true;

                    // Default prices
                    InsertItem.Profit = 0d;
                    InsertItem.ProfitPercent = 0d;
                    InsertItem.IPH = 0d;

                    // Save the original ME/TE
                    OrigME = InsertItem.BPME;
                    OrigTE = InsertItem.BPTE;

                    // Runs and lines
                    InsertItem.Runs = Conversions.ToInteger(txtCalcRuns.Text);
                    InsertItem.ProductionLines = Conversions.ToInteger(txtCalcProdLines.Text);
                    InsertItem.LaboratoryLines = Conversions.ToInteger(txtCalcLabLines.Text);

                    // Reset all the industry facilities
                    InsertItem.BuildFacility = new IndustryFacility();
                    InsertItem.ComponentManufacturingFacility = new IndustryFacility();
                    InsertItem.CapComponentManufacturingFacility = new IndustryFacility();
                    InsertItem.CopyFacility = new IndustryFacility();
                    InsertItem.InventionFacility = new IndustryFacility();
                    InsertItem.ReactionFacility = new IndustryFacility();

                    var TempFacility = new ManufacturingFacility();
                    ProductionType BuildType;

                    // Set the facility for manufacturing and set it to the current selected facility for this type
                    if (ItemIsReaction)
                    {
                        BuildType = ProductionType.Reactions;
                    }
                    else
                    {
                        BuildType = TempFacility.GetProductionType(InsertItem.ItemGroupID, InsertItem.ItemCategoryID, ManufacturingFacility.ActivityManufacturing);
                    }

                    switch (BuildType)
                    {
                        case ProductionType.Manufacturing:
                            {
                                InsertItem.BuildFacility = CalcBaseFacility.GetFacility(BuildType);
                                break;
                            }
                        case ProductionType.ComponentManufacturing:
                        case ProductionType.CapitalComponentManufacturing:
                            {
                                InsertItem.BuildFacility = CalcComponentsFacility.GetFacility(BuildType);
                                break;
                            }
                        case ProductionType.BoosterManufacturing:
                            {
                                InsertItem.BuildFacility = CalcBoostersFacility.GetFacility(BuildType);
                                break;
                            }
                        case ProductionType.CapitalManufacturing:
                            {
                                InsertItem.BuildFacility = CalcCapitalsFacility.GetFacility(BuildType);
                                break;
                            }
                        case ProductionType.Reactions:
                            {
                                InsertItem.BuildFacility = CalcReactionsFacility.GetFacility(BuildType);
                                break;
                            }
                        case ProductionType.SubsystemManufacturing:
                            {
                                InsertItem.BuildFacility = CalcSubsystemsFacility.GetFacility(BuildType);
                                break;
                            }
                        case ProductionType.SuperManufacturing:
                            {
                                InsertItem.BuildFacility = CalcSupersFacility.GetFacility(BuildType);
                                break;
                            }
                        case ProductionType.T3CruiserManufacturing:
                        case ProductionType.T3DestroyerManufacturing:
                            {
                                InsertItem.BuildFacility = CalcT3ShipsFacility.GetFacility(BuildType);
                                break;
                            }
                    }

                    if (BuildType == ProductionType.Reactions)
                    {
                        // Need to use the manufacturing facility instead of component facility since they are more likely to make fuel blocks for reactions there
                        InsertItem.ComponentManufacturingFacility = CalcBaseFacility.GetFacility(ProductionType.Manufacturing);
                    }
                    else if ((InsertItem.ItemCategoryID == (int)Public_Variables.ItemIDs.ComponentCategoryID | InsertItem.ItemGroupID == (int)Public_Variables.ItemIDs.AdvCapitalComponentGroupID) & !(InsertItem.ItemGroupID == (int)Public_Variables.ItemIDs.CapitalComponentGroupID))
                    {
                        // Use the reaction facility as the 'component facility' if it's T2 component item, since they will do reactions
                        InsertItem.ComponentManufacturingFacility = CalcReactionsFacility.GetFacility(ProductionType.Reactions);
                    }
                    else
                    {
                        InsertItem.ComponentManufacturingFacility = CalcComponentsFacility.GetFacility(ProductionType.ComponentManufacturing);
                    }

                    InsertItem.CapComponentManufacturingFacility = CalcComponentsFacility.GetFacility(ProductionType.CapitalComponentManufacturing);
                    InsertItem.CopyFacility = CalcCopyFacility.GetFacility(ProductionType.Copying);
                    InsertItem.ReactionFacility = CalcReactionsFacility.GetFacility(ProductionType.Reactions);

                    // Now determine how many copies of the base item we need with different data changed
                    // If T1, just select compare types (raw and components)
                    // If T2, first select each decryptor, then select Compare types (raw and components)
                    // If T3, first choose a decryptor, then Relic, then select compare types (raw and components)
                    // Insert each different combination
                    if ((InsertItem.TechLevel == "T2" | InsertItem.TechLevel == "T3") & !PolarizedWeapon)
                    {
                        // For determining the owned blueprints
                        var TempDecryptors = new DecryptorList();
                        string OriginalRelicUsed = "";
                        bool CheckOwnedBP = false;
                        var OriginalBPType = InsertItem.BlueprintType;
                        var OriginalDecryptorUsed = TempDecryptors.GetDecryptor(OrigME, OrigTE, InsertItem.SavedBPRuns, Conversions.ToInteger(InsertItem.TechLevel.Substring(1)));
                        if (InsertItem.TechLevel == "T3")
                        {
                            OriginalRelicUsed = Public_Variables.GetRelicfromInputs(OriginalDecryptorUsed, InsertItem.BPID, InsertItem.SavedBPRuns);
                        }

                        // Now add additional records for each decryptor
                        var loopTo = CalcDecryptorCheckBoxes.Count() - 1;
                        for (j = 1; j <= loopTo; j++)
                        {
                            // If it's checked or if optimal is checked, add the decryptor
                            if (CalcDecryptorCheckBoxes[j].Checked | chkCalcDecryptor0.Checked)
                            {

                                // These are all invented BPCs, BPC and BPOs are added separately below
                                InsertItem.BlueprintType = Public_Variables.BPType.InventedBPC;

                                // If they are not using for T2 or T3 then only add No Decyrptor and exit for
                                if ((CalcDecryptorCheckBoxes[j].Text ?? "") != Public_Variables.None & (InsertItem.TechLevel == "T2" & chkCalcDecryptorforT2.Enabled & chkCalcDecryptorforT2.Checked | InsertItem.TechLevel == "T3" & chkCalcDecryptorforT3.Enabled & chkCalcDecryptorforT3.Checked))

                                {

                                    // Select a decryptor
                                    DecryptorUsed = InventionDecryptors.GetDecryptor(Conversions.ToDouble(CalcDecryptorCheckBoxes[j].Text.Substring(0, 3)));

                                    // Add decryptor
                                    InsertItem.Decryptor = DecryptorUsed;
                                    InsertItem.Inputs = DecryptorUsed.Name;
                                    InsertItem.BPME = Public_Variables.BaseT2T3ME + InsertItem.Decryptor.MEMod;
                                    InsertItem.BPTE = Public_Variables.BaseT2T3TE + InsertItem.Decryptor.TEMod;
                                }

                                else
                                {
                                    // Add no decryptor, this is a copy or bpo
                                    InsertItem.Decryptor = DecryptorVariables.NoDecryptor;
                                    InsertItem.Inputs = DecryptorVariables.NoDecryptor.Name;
                                    InsertItem.BPME = Public_Variables.BaseT2T3ME;
                                    InsertItem.BPTE = Public_Variables.BaseT2T3TE;
                                }

                                // Facilities
                                if (InsertItem.TechLevel == "T2")
                                {
                                    InsertItem.InventionFacility = CalcInventionFacility.GetFacility(ProductionType.Invention);
                                    InsertItem.CopyFacility = CalcCopyFacility.GetFacility(ProductionType.Copying);
                                    InsertItem.InventionFacility.FWUpgradeLevel = CalcComponentsFacility.GetFacility(ProductionType.Invention).FWUpgradeLevel;
                                }
                                else if (InsertItem.TechLevel == "T3")
                                {
                                    InsertItem.InventionFacility = CalcT3InventionFacility.GetFacility(ProductionType.T3Invention);
                                    InsertItem.InventionFacility.FWUpgradeLevel = CalcComponentsFacility.GetFacility(ProductionType.T3Invention).FWUpgradeLevel;
                                    InsertItem.CopyFacility = Public_Variables.NoFacility;
                                }

                                InsertItem.CopyFacility.FWUpgradeLevel = CalcComponentsFacility.GetFacility(ProductionType.Copying).FWUpgradeLevel;

                                string BaseInputs = InsertItem.Inputs;

                                // Relics
                                if (InsertItem.TechLevel == "T3")
                                {
                                    // Loop through each relic check box and process for each decryptor
                                    for (int k = 1, loopTo1 = CalcRelicCheckboxes.Count() - 1; k <= loopTo1; k++)
                                    {
                                        if (CalcRelicCheckboxes[k].Checked)
                                        {
                                            InsertItem.Relic = CalcRelicCheckboxes[k].Text;
                                            // Add to the inputs
                                            InsertItem.Inputs = BaseInputs + " - " + InsertItem.Relic;
                                            // Set the owned flag before inserting
                                            CheckOwnedBP = SetItemOwnedFlag(ref InsertItem, OriginalDecryptorUsed, OriginalRelicUsed, OrigME, OrigTE, OriginalBPOwnedFlag);
                                            if (rbtnCalcAllBPs.Checked | chkCalcIncludeT3Owned.Checked | rbtnCalcBPOwned.Checked & CheckOwnedBP)
                                            {
                                                // Insert the item 
                                                InsertItemCalcType(ref BaseItems, InsertItem, ref ListRowFormats);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    // No relic for T2
                                    InsertItem.Relic = "";
                                    // Set the owned flag before inserting
                                    CheckOwnedBP = SetItemOwnedFlag(ref InsertItem, OriginalDecryptorUsed, OriginalRelicUsed, OrigME, OrigTE, OriginalBPOwnedFlag);
                                    if (rbtnCalcAllBPs.Checked | chkCalcIncludeT2Owned.Checked & UserInventedBPs.Contains(InsertItem.BPID) | rbtnCalcBPOwned.Checked & CheckOwnedBP | rbtnCalcBPFavorites.Checked)
                                    {
                                        // Insert the item 
                                        InsertItemCalcType(ref BaseItems, InsertItem, ref ListRowFormats);
                                    }
                                }

                                // If they don't want to include decryptors, then exit loop after adding none
                                if (InsertItem.TechLevel == "T2" & (chkCalcDecryptorforT2.Enabled == false | chkCalcDecryptorforT2.Checked == false) | InsertItem.TechLevel == "T3" & (chkCalcDecryptorforT3.Enabled == false | chkCalcDecryptorforT3.Checked == false))
                                {
                                    break;
                                }
                            }
                        }

                        // Finally, see if the original blueprint was not invented and then add it separately - BPCs and BPOs (should only be T2)
                        if (OriginalBPType == Public_Variables.BPType.Copy | OriginalBPType == Public_Variables.BPType.Original)
                        {
                            // Get the original me/te
                            InsertItem.BPME = OrigME;
                            InsertItem.BPTE = OrigTE;
                            InsertItem.Owned = Public_Variables.Yes;
                            InsertItem.Inputs = Public_Variables.Unknown;
                            InsertItem.BlueprintType = OriginalBPType;

                            // Insert the item 
                            InsertItemCalcType(ref BaseItems, InsertItem, ref ListRowFormats);
                        }
                    }

                    else // All T1 and others
                    {
                        InsertItem.Inputs = Public_Variables.None;
                        InsertItem.Relic = "";
                        InsertItem.Decryptor = DecryptorVariables.NoDecryptor;

                        InsertItem.InventionFacility = Public_Variables.NoFacility;
                        InsertItem.CopyFacility = Public_Variables.NoFacility;

                        // Insert the items based on compare types
                        InsertItemCalcType(ref BaseItems, InsertItem, ref ListRowFormats);
                    }

                    // For each record, update the progress bar
                    var argPG = pnlProgressBar;
                    Public_Variables.IncrementToolStripProgressBar(ref argPG);
                    pnlProgressBar = argPG;

                }

                // Set the formats
                lstManufacturing.SetRowFormats(ListRowFormats);
                Application.DoEvents();

                readerBPs.Close();

                TotalItemCount = BaseItems.Count;

                // *** Calculate ***
                // Got all the data, now see if they want to calculate prices
                if (Calculate)
                {
                    // If TotalItemCount > 1000 Then
                    // ' Make sure they know this will take a bit to run - unless this is fairly quick
                    // Response = MsgBox("This may take some time to complete. Do you want to continue?", vbYesNo, Me.Text)

                    // If Response = vbNo Then
                    // ' Just display the results of the query
                    // GoTo DisplayResults
                    // End If
                    // End If

                    ListIDIterator = 0; // Reset the iterator for new list
                                        // Reset the format list and recalc
                    ListRowFormats = new List<RowFormat>();

                    // Disable all the controls individulally so we can use cancel button
                    btnCalcPreview.Enabled = false;
                    btnCalcReset.Enabled = false;
                    btnCalcSelectColumns.Enabled = false;
                    btnCalcSaveSettings.Enabled = false;
                    btnCalcExportList.Enabled = false;
                    gbCalcBPSelect.Enabled = false;
                    gbCalcIncludeItems.Enabled = false;
                    gbCalcBPRace.Enabled = false;
                    gbCalcBPType.Enabled = false;
                    chkCalcNPCBPOs.Enabled = false;
                    gbCalcSizeLimit.Enabled = false;
                    gbCalcBPTech.Enabled = false;
                    gbCalcCompareType.Enabled = false;
                    gbCalcMarketFilters.Enabled = false;
                    gbCalcFilter.Enabled = false;
                    gbCalcIgnoreinCalcs.Enabled = false;
                    gbCalcIncludeOwned.Enabled = false;
                    gbCalcInvention.Enabled = false;
                    gbCalcProdLines.Enabled = false;
                    gbCalcRelics.Enabled = false;
                    gbCalcTextColors.Enabled = false;
                    gbCalcTextFilter.Enabled = false;
                    lstManufacturing.Enabled = false;
                    tabCalcFacilities.Enabled = false;

                    if (!SettingsVariables.UserApplicationSettings.DisableSVR)
                    {

                        var argSentPG = pnlProgressBar;
                        var MH = new MarketPriceInterface(ref argSentPG);
                        pnlProgressBar = argSentPG;

                        // First thing we want to do is update the manufactured item prices
                        pnlStatus.Text = "Updating Market History...";
                        pnlProgressBar.Visible = false;
                        Application.DoEvents();

                        // First find out which of the typeIDs in BaseItems have MarketID's
                        var loopTo2 = BaseItems.Count - 1;
                        for (i = 0; i <= loopTo2; i++)
                            TypeIDCheck = TypeIDCheck + BaseItems[i].ItemTypeID + ",";

                        // Format string
                        TypeIDCheck = "(" + TypeIDCheck.Substring(0, Strings.Len(TypeIDCheck) - 1) + ")";
                        SQL = "SELECT typeID FROM INVENTORY_TYPES WHERE typeID IN " + TypeIDCheck + " AND marketGroupID IS NOT NULL";
                        Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                        readerIDs = Public_Variables.DBCommand.ExecuteReader();

                        // Now add these to the list
                        while (readerIDs.Read())
                        {
                            if (!UpdateTypeIDs.Contains(readerIDs.GetInt64(0)))
                            {
                                UpdateTypeIDs.Add(readerIDs.GetInt64(0));
                            }
                        }
                        readerIDs.Close();

                        AveragePriceDays = Conversions.ToInteger(cmbCalcAvgPriceDuration.Text);
                        // Get the region ID
                        MarketRegionID = Public_Variables.GetRegionID(cmbCalcHistoryRegion.Text);

                        if (MarketRegionID == 0L)
                        {
                            MarketRegionID = Public_Variables.TheForgeTypeID; // The Forge as default
                            cmbCalcHistoryRegion.Text = "The Forge";
                        }

                        // Update the prices
                        if (!MH.UpdateESIPriceHistory(UpdateTypeIDs, MarketRegionID))
                        {
                            // Update Failed, don't reload everything
                            Interaction.MsgBox("Price update timed out for some items. Please try again.", Constants.vbInformation, Application.ProductName);
                        }
                        if (Public_Variables.CancelThreading)
                        {
                            // They had a ton of errors
                            Interaction.MsgBox("You had an excessive amount of errors while attempting to update price history and the process was canceled. Please try again later.", Constants.vbCritical, Application.ProductName);
                            Public_Variables.CancelThreading = false;
                        }
                    }

                    pnlStatus.Text = "Calculating...";
                    pnlProgressBar.Minimum = 0;
                    pnlProgressBar.Maximum = TotalItemCount;
                    pnlProgressBar.Value = 0;
                    pnlProgressBar.Visible = true;

                    Application.DoEvents();

                    // Loop through the item list and calculate data
                    var loopTo3 = BaseItems.Count - 1;
                    for (i = 0; i <= loopTo3; i++)
                    {

                        Application.DoEvents();

                        InsertItem = BaseItems[i];

                        // If they cancel the calc
                        if (Public_Variables.CancelManufacturingTabCalc)
                        {
                            goto ExitCalc;
                        }

                        // Set the number of BPs
                        if ((InsertItem.TechLevel == "T2" | InsertItem.TechLevel == "T3") & chkCalcAutoCalcT2NumBPs.Checked == true & (InsertItem.BlueprintType == Public_Variables.BPType.InventedBPC | InsertItem.BlueprintType == Public_Variables.BPType.NotOwned) & !PolarizedWeapon)
                        {
                            // For T3 or if they have calc checked, we will never have a BPO so determine the number of BPs
                            NumberofBlueprints = GetUsedNumBPs(InsertItem.BPID, Conversions.ToInteger(InsertItem.TechLevel.Substring(1, 1)), InsertItem.Runs, InsertItem.ProductionLines, InsertItem.NumBPs, InsertItem.Decryptor.RunMod);
                        }
                        else
                        {
                            NumberofBlueprints = Conversions.ToInteger(txtCalcNumBPs.Text);
                        }

                        // Construct the BP
                        List<Public_Variables.BuildBuyItem> argBuildBuyList = null;
                        IndustryFacility argBPReprocessingFacility = null;
                        ManufacturingBlueprint = new Blueprint(InsertItem.BPID, Conversions.ToInteger(txtCalcRuns.Text), InsertItem.BPME, InsertItem.BPTE, NumberofBlueprints, Conversions.ToInteger(txtCalcProdLines.Text), Public_Variables.SelectedCharacter, SettingsVariables.UserApplicationSettings, rbtnCalcCompareBuildBuy.Checked, InsertItem.AddlCosts, InsertItem.BuildFacility, InsertItem.ComponentManufacturingFacility, InsertItem.CapComponentManufacturingFacility, InsertItem.ReactionFacility, chkCalcSellExessItems.Checked, SettingsVariables.UserManufacturingTabSettings.BuildT2T3Materials, true, BuildBuyList: ref argBuildBuyList, BPReprocessingFacility: ref argBPReprocessingFacility);

                        // Set the T2 and T3 inputs if necessary
                        if ((InsertItem.TechLevel == "T2" | InsertItem.TechLevel == "T3") & InsertItem.BlueprintType == Public_Variables.BPType.InventedBPC & chkCalcIgnoreInvention.Checked == false & !PolarizedWeapon)
                        {

                            // Strip off the relic if in here for the decryptor
                            if (InsertItem.Inputs.Contains("-"))
                            {
                                InputText = InsertItem.Inputs.Substring(0, Strings.InStr(InsertItem.Inputs, "-") - 2);
                            }
                            else
                            {
                                InputText = InsertItem.Inputs;
                            }

                            if ((InputText ?? "") == Public_Variables.None)
                            {
                                SelectedDecryptor = DecryptorVariables.NoDecryptor;
                            }
                            else // A decryptor is set
                            {
                                SelectedDecryptor = InventionDecryptors.GetDecryptor(InputText);
                            }

                            // Construct the T2/T3 BP
                            ManufacturingBlueprint.InventBlueprint(Conversions.ToInteger(txtCalcLabLines.Text), SelectedDecryptor, InsertItem.InventionFacility, InsertItem.CopyFacility, Public_Variables.GetInventItemTypeID(InsertItem.BPID, InsertItem.Relic));

                        }

                        // Build the blueprint(s)
                        ManufacturingBlueprint.BuildItems(chkCalcTaxes.Checked, Public_Variables.GetBrokerFeeData(chkCalcFees, txtCalcBrokerFeeRate), false, chkCalcIgnoreMinerals.Checked, chkCalcIgnoreT1Item.Checked);

                        // If checked, Add the values to the array only if we can Build, Invent, or RE it
                        AddItem = true;

                        // User can Build
                        if (chkCalcCanBuild.Checked & !ManufacturingBlueprint.UserCanBuildBlueprint())
                        {
                            AddItem = false;
                        }

                        // User can Invent
                        if (chkCalcCanInvent.Checked & chkCalcCanInvent.Enabled & !ManufacturingBlueprint.UserCanInventRE() & (ManufacturingBlueprint.GetTechLevel() == 2 | ManufacturingBlueprint.GetTechLevel() == 3))
                        {
                            AddItem = false;
                        }

                        // Adjust the item with calculations
                        if (AddItem)
                        {
                            Application.DoEvents();
                            // Add data that will the same for all options (need to move more from the bottom but have to test)
                            InsertItem.CanBuildBP = ManufacturingBlueprint.UserCanBuildBlueprint();
                            InsertItem.CanInvent = ManufacturingBlueprint.UserCanInventRE();
                            InsertItem.CanRE = ManufacturingBlueprint.UserCanInventRE();
                            // Trend data
                            InsertItem.PriceTrend = CalculatePriceTrend(InsertItem.ItemTypeID, MarketRegionID, Conversions.ToInteger(cmbCalcAvgPriceDuration.Text));
                            InsertItem.ItemMarketPrice = ManufacturingBlueprint.GetItemMarketPrice();

                            // Add all the volume, items on hand, etc here since they won't change
                            InsertItem.TotalItemsSold = CalculateTotalItemsSold(InsertItem.ItemTypeID, MarketRegionID, Conversions.ToInteger(cmbCalcAvgPriceDuration.Text));
                            InsertItem.TotalOrdersFilled = CalculateTotalOrdersFilled(InsertItem.ItemTypeID, MarketRegionID, Conversions.ToInteger(cmbCalcAvgPriceDuration.Text));
                            InsertItem.AvgItemsperOrder = Conversions.ToDouble(Interaction.IIf(InsertItem.TotalOrdersFilled == 0L, 0, InsertItem.TotalItemsSold / (double)InsertItem.TotalOrdersFilled));
                            GetCurrentOrders(InsertItem.ItemTypeID, MarketRegionID, ref InsertItem.CurrentBuyOrders, ref InsertItem.CurrentSellOrders);

                            InsertItem.ItemsinStock = GetTotalItemsinStock(InsertItem.ItemTypeID);
                            InsertItem.ItemsinProduction = GetTotalItemsinProduction(InsertItem.ItemTypeID);

                            // Get the output data
                            if (rbtnCalcCompareAll.Checked)
                            {
                                // Need to add a record for each of the three types

                                // *** For components, only add if it has buildable components
                                if (ManufacturingBlueprint.HasComponents())
                                {
                                    // Components first
                                    InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalComponentProfitPercent();
                                    InsertItem.Profit = ManufacturingBlueprint.GetTotalComponentProfit();
                                    InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourComponents();
                                    InsertItem.CalcType = "Components";
                                    InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, MarketRegionID, AveragePriceDays, ManufacturingBlueprint.GetProductionTime(), ManufacturingBlueprint.GetTotalUnits());
                                    if (InsertItem.SVR == "-")
                                    {
                                        InsertItem.SVRxIPH = "0.00";
                                    }
                                    else
                                    {
                                        InsertItem.SVRxIPH = Strings.FormatNumber(Conversions.ToDouble(InsertItem.SVR) * InsertItem.IPH, 2);
                                    }
                                    InsertItem.TotalCost = ManufacturingBlueprint.GetTotalComponentCost();
                                    InsertItem.Taxes = ManufacturingBlueprint.GetSalesTaxes();
                                    InsertItem.BrokerFees = ManufacturingBlueprint.GetSalesBrokerFees();
                                    InsertItem.SingleInventedBPCRunsperBPC = ManufacturingBlueprint.GetSingleInventedBPCRuns();
                                    InsertItem.BaseJobCost = ManufacturingBlueprint.GetEstimatedItemValue();
                                    InsertItem.JobFee = ManufacturingBlueprint.GetJobFee();
                                    InsertItem.NumBPs = ManufacturingBlueprint.GetUsedNumBPs();
                                    InsertItem.InventionChance = ManufacturingBlueprint.GetInventionChance();
                                    InsertItem.Race = Public_Variables.GetRace(ManufacturingBlueprint.GetRaceID());
                                    InsertItem.VolumeperItem = ManufacturingBlueprint.GetItemVolume();
                                    InsertItem.TotalVolume = ManufacturingBlueprint.GetTotalItemVolume();
                                    InsertItem.MaterialCost = ManufacturingBlueprint.GetRawMaterials().GetTotalMaterialsCost();
                                    InsertItem.SellExcess = ManufacturingBlueprint.GetExcessMaterials().GetTotalMaterialsCost();
                                    InsertItem.ROI = ManufacturingBlueprint.GetTotalComponentProfit() / ManufacturingBlueprint.GetTotalComponentCost();

                                    if (chkCalcPPU.Checked)
                                    {
                                        InsertItem.DivideUnits = (int)ManufacturingBlueprint.GetTotalUnits();
                                        InsertItem.PortionSize = 1;
                                    }
                                    else
                                    {
                                        InsertItem.DivideUnits = 1;
                                        InsertItem.PortionSize = (int)ManufacturingBlueprint.GetTotalUnits();
                                    }

                                    InsertItem.BPProductionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetProductionTime() / InsertItem.DivideUnits);
                                    InsertItem.TotalProductionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetProductionTime() / InsertItem.DivideUnits); // Total production time for components only is always the bp production time
                                    InsertItem.CopyTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetCopyTime() / InsertItem.DivideUnits);
                                    InsertItem.InventionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetInventionTime() / InsertItem.DivideUnits);

                                    if ((ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 | ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3) & InsertItem.BlueprintType != Public_Variables.BPType.Original & InsertItem.BlueprintType != Public_Variables.BPType.Copy)
                                    {
                                        InsertItem.InventionCost = ManufacturingBlueprint.GetInventionCost();
                                    }
                                    else
                                    {
                                        InsertItem.InventionCost = 0d;
                                    }

                                    if (ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2)
                                    {
                                        InsertItem.CopyCost = ManufacturingBlueprint.GetCopyCost();
                                    }
                                    else
                                    {
                                        InsertItem.CopyCost = 0d;
                                    }

                                    // Usage
                                    InsertItem.BuildFacilityUsage = ManufacturingBlueprint.GetManufacturingFacilityUsage();
                                    // Don't build components in this calculation
                                    InsertItem.ComponentManufacturingFacilityUsage = 0d;
                                    InsertItem.CapComponentManufacturingFacilityUsage = 0d;
                                    InsertItem.CopyFacilityUsage = ManufacturingBlueprint.GetCopyUsage();
                                    InsertItem.InventionFacilityUsage = ManufacturingBlueprint.GetInventionUsage();
                                    InsertItem.ReprocessingFacilityUsage = ManufacturingBlueprint.GetReprocessingUsage();

                                    // Save the bp
                                    InsertItem.Blueprint = ManufacturingBlueprint;

                                    // Insert Components Item
                                    InsertManufacturingItem(InsertItem, SVRThresholdValue, chkCalcSVRIncludeNull.Checked, ref ManufacturingList, ref ListRowFormats);

                                    // Insert the item for decryptor compare
                                    InsertDecryptorforOptimalCompare(ref ManufacturingBlueprint, ref InsertItem.CalcType, ref InsertItem.ListID, ref OptimalDecryptorItems);

                                }

                                // *** Raw Mats - always add
                                InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalRawProfitPercent();
                                InsertItem.Profit = ManufacturingBlueprint.GetTotalRawProfit();
                                InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourRaw();
                                InsertItem.CalcType = "Raw Materials";
                                InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, MarketRegionID, AveragePriceDays, ManufacturingBlueprint.GetTotalProductionTime(), ManufacturingBlueprint.GetTotalUnits());
                                if (InsertItem.SVR == "-")
                                {
                                    InsertItem.SVRxIPH = "0.00";
                                }
                                else
                                {
                                    InsertItem.SVRxIPH = Strings.FormatNumber(Conversions.ToDouble(InsertItem.SVR) * InsertItem.IPH, 2);
                                }
                                InsertItem.TotalCost = ManufacturingBlueprint.GetTotalBuildCost();
                                InsertItem.Taxes = ManufacturingBlueprint.GetSalesTaxes();
                                InsertItem.BrokerFees = ManufacturingBlueprint.GetSalesBrokerFees();
                                InsertItem.SingleInventedBPCRunsperBPC = ManufacturingBlueprint.GetSingleInventedBPCRuns();
                                InsertItem.BaseJobCost = ManufacturingBlueprint.GetEstimatedItemValue();
                                InsertItem.JobFee = ManufacturingBlueprint.GetJobFee();
                                InsertItem.NumBPs = ManufacturingBlueprint.GetUsedNumBPs();
                                InsertItem.InventionChance = ManufacturingBlueprint.GetInventionChance();
                                InsertItem.Race = Public_Variables.GetRace(ManufacturingBlueprint.GetRaceID());
                                InsertItem.VolumeperItem = ManufacturingBlueprint.GetItemVolume();
                                InsertItem.TotalVolume = ManufacturingBlueprint.GetTotalItemVolume();
                                InsertItem.MaterialCost = ManufacturingBlueprint.GetRawMaterials().GetTotalMaterialsCost();
                                InsertItem.SellExcess = ManufacturingBlueprint.GetExcessMaterials().GetTotalMaterialsCost();
                                InsertItem.ROI = ManufacturingBlueprint.GetTotalRawProfit() / ManufacturingBlueprint.GetTotalRawCost();

                                if (chkCalcPPU.Checked)
                                {
                                    InsertItem.DivideUnits = (int)ManufacturingBlueprint.GetTotalUnits();
                                    InsertItem.PortionSize = 1;
                                }
                                else
                                {
                                    InsertItem.DivideUnits = 1;
                                    InsertItem.PortionSize = (int)ManufacturingBlueprint.GetTotalUnits();
                                }

                                InsertItem.BPProductionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetProductionTime() / InsertItem.DivideUnits);
                                InsertItem.TotalProductionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetTotalProductionTime() / InsertItem.DivideUnits);
                                InsertItem.CopyTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetCopyTime() / InsertItem.DivideUnits);
                                InsertItem.InventionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetInventionTime() / InsertItem.DivideUnits);

                                if ((ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 | ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3) & InsertItem.BlueprintType != Public_Variables.BPType.Original & InsertItem.BlueprintType != Public_Variables.BPType.Copy)
                                {
                                    InsertItem.InventionCost = ManufacturingBlueprint.GetInventionCost();
                                }
                                else
                                {
                                    InsertItem.InventionCost = 0d;
                                }

                                if (ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 & InsertItem.BlueprintType != Public_Variables.BPType.Original)
                                {
                                    InsertItem.CopyCost = ManufacturingBlueprint.GetCopyCost();
                                }
                                else
                                {
                                    InsertItem.CopyCost = 0d;
                                }

                                // Usage
                                InsertItem.BuildFacilityUsage = ManufacturingBlueprint.GetManufacturingFacilityUsage();
                                InsertItem.ComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetComponentFacilityUsage();
                                InsertItem.CapComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetCapComponentFacilityUsage();
                                InsertItem.ReactionFacilityUsage = ManufacturingBlueprint.GetTotalReactionFacilityUsage();
                                InsertItem.CopyFacilityUsage = ManufacturingBlueprint.GetCopyUsage();
                                InsertItem.InventionFacilityUsage = ManufacturingBlueprint.GetInventionUsage();
                                InsertItem.ReprocessingFacilityUsage = ManufacturingBlueprint.GetReprocessingUsage();

                                // Save the bp
                                InsertItem.Blueprint = ManufacturingBlueprint;

                                // Insert Raw Mats item
                                InsertManufacturingItem(InsertItem, SVRThresholdValue, chkCalcSVRIncludeNull.Checked, ref ManufacturingList, ref ListRowFormats);

                                // Insert the item for decryptor compare
                                InsertDecryptorforOptimalCompare(ref ManufacturingBlueprint, ref InsertItem.CalcType, ref InsertItem.ListID, ref OptimalDecryptorItems);

                                // *** For Build/Buy we need to construct a new BP and add that
                                // Construct the BP
                                List<Public_Variables.BuildBuyItem> argBuildBuyList1 = null;
                                IndustryFacility argBPReprocessingFacility1 = null;
                                ManufacturingBlueprint = new Blueprint(InsertItem.BPID, Conversions.ToInteger(txtCalcRuns.Text), InsertItem.BPME, InsertItem.BPTE, NumberofBlueprints, Conversions.ToInteger(txtCalcProdLines.Text), Public_Variables.SelectedCharacter, SettingsVariables.UserApplicationSettings, true, InsertItem.AddlCosts, InsertItem.BuildFacility, InsertItem.ComponentManufacturingFacility, InsertItem.CapComponentManufacturingFacility, InsertItem.ReactionFacility, chkCalcSellExessItems.Checked, SettingsVariables.UserManufacturingTabSettings.BuildT2T3Materials, true, BuildBuyList: ref argBuildBuyList1, BPReprocessingFacility: ref argBPReprocessingFacility1);

                                if ((InsertItem.TechLevel == "T2" | InsertItem.TechLevel == "T3") & InsertItem.BlueprintType == Public_Variables.BPType.InventedBPC & chkCalcIgnoreInvention.Checked == false & !PolarizedWeapon)
                                {
                                    // Construct the T2/T3 BP
                                    ManufacturingBlueprint.InventBlueprint(Conversions.ToInteger(txtCalcLabLines.Text), SelectedDecryptor, InsertItem.InventionFacility, InsertItem.CopyFacility, Public_Variables.GetInventItemTypeID(InsertItem.BPID, InsertItem.Relic));

                                }

                                // Get the list of materials
                                ManufacturingBlueprint.BuildItems(chkCalcTaxes.Checked, Public_Variables.GetBrokerFeeData(chkCalcFees, txtCalcBrokerFeeRate), false, chkCalcIgnoreMinerals.Checked, chkCalcIgnoreT1Item.Checked);

                                // Build/Buy (add only if it has components we build)
                                if (ManufacturingBlueprint.HasComponents())
                                {
                                    InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalRawProfitPercent();
                                    InsertItem.Profit = ManufacturingBlueprint.GetTotalRawProfit();
                                    InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourRaw();
                                    InsertItem.CalcType = "Build/Buy";
                                    InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, MarketRegionID, AveragePriceDays, ManufacturingBlueprint.GetTotalProductionTime(), ManufacturingBlueprint.GetTotalUnits());
                                    if (InsertItem.SVR == "-")
                                    {
                                        InsertItem.SVRxIPH = "0.00";
                                    }
                                    else
                                    {
                                        InsertItem.SVRxIPH = Strings.FormatNumber(Conversions.ToDouble(InsertItem.SVR) * InsertItem.IPH, 2);
                                    }
                                    InsertItem.TotalCost = ManufacturingBlueprint.GetTotalBuildCost();
                                    InsertItem.Taxes = ManufacturingBlueprint.GetSalesTaxes();
                                    InsertItem.BrokerFees = ManufacturingBlueprint.GetSalesBrokerFees();
                                    InsertItem.SingleInventedBPCRunsperBPC = ManufacturingBlueprint.GetSingleInventedBPCRuns();
                                    InsertItem.BaseJobCost = ManufacturingBlueprint.GetEstimatedItemValue();
                                    InsertItem.JobFee = ManufacturingBlueprint.GetJobFee();
                                    InsertItem.NumBPs = ManufacturingBlueprint.GetUsedNumBPs();
                                    InsertItem.InventionChance = ManufacturingBlueprint.GetInventionChance();
                                    InsertItem.Race = Public_Variables.GetRace(ManufacturingBlueprint.GetRaceID());
                                    InsertItem.VolumeperItem = ManufacturingBlueprint.GetItemVolume();
                                    InsertItem.TotalVolume = ManufacturingBlueprint.GetTotalItemVolume();
                                    InsertItem.MaterialCost = ManufacturingBlueprint.GetRawMaterials().GetTotalMaterialsCost();
                                    InsertItem.SellExcess = ManufacturingBlueprint.GetExcessMaterials().GetTotalMaterialsCost();
                                    InsertItem.ROI = ManufacturingBlueprint.GetTotalRawProfit() / ManufacturingBlueprint.GetTotalRawCost();

                                    if (chkCalcPPU.Checked)
                                    {
                                        InsertItem.DivideUnits = (int)ManufacturingBlueprint.GetTotalUnits();
                                        InsertItem.PortionSize = 1;
                                    }
                                    else
                                    {
                                        InsertItem.DivideUnits = 1;
                                        InsertItem.PortionSize = (int)ManufacturingBlueprint.GetTotalUnits();
                                    }

                                    InsertItem.BPProductionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetProductionTime() / InsertItem.DivideUnits);
                                    InsertItem.TotalProductionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetTotalProductionTime() / InsertItem.DivideUnits);
                                    InsertItem.CopyTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetCopyTime() / InsertItem.DivideUnits);
                                    InsertItem.InventionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetInventionTime() / InsertItem.DivideUnits);

                                    if ((ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 | ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3) & InsertItem.BlueprintType != Public_Variables.BPType.Original & InsertItem.BlueprintType != Public_Variables.BPType.Copy)
                                    {
                                        InsertItem.InventionCost = ManufacturingBlueprint.GetInventionCost();
                                    }
                                    else
                                    {
                                        InsertItem.InventionCost = 0d;
                                    }

                                    if (ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 & InsertItem.BlueprintType != Public_Variables.BPType.Original)
                                    {
                                        InsertItem.CopyCost = ManufacturingBlueprint.GetCopyCost();
                                    }
                                    else
                                    {
                                        InsertItem.CopyCost = 0d;
                                    }

                                    // Usage
                                    InsertItem.BuildFacilityUsage = ManufacturingBlueprint.GetManufacturingFacilityUsage();
                                    InsertItem.ComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetComponentFacilityUsage();
                                    InsertItem.CapComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetCapComponentFacilityUsage();
                                    InsertItem.ReactionFacilityUsage = ManufacturingBlueprint.GetReactionFacilityUsage();
                                    InsertItem.CopyFacilityUsage = ManufacturingBlueprint.GetCopyUsage();
                                    InsertItem.InventionFacilityUsage = ManufacturingBlueprint.GetInventionUsage();
                                    InsertItem.ReprocessingFacilityUsage = ManufacturingBlueprint.GetReprocessingUsage();

                                    // Save the bp
                                    InsertItem.Blueprint = ManufacturingBlueprint;

                                    // Insert Build/Buy item
                                    InsertManufacturingItem(InsertItem, SVRThresholdValue, chkCalcSVRIncludeNull.Checked, ref ManufacturingList, ref ListRowFormats);

                                    // Insert the item for decryptor compare
                                    InsertDecryptorforOptimalCompare(ref ManufacturingBlueprint, ref InsertItem.CalcType, ref InsertItem.ListID, ref OptimalDecryptorItems);

                                }
                            }
                            else
                            {
                                // Just look at each one individually
                                if (rbtnCalcCompareComponents.Checked)
                                {
                                    // Use the Component values
                                    InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalComponentProfitPercent();
                                    InsertItem.Profit = ManufacturingBlueprint.GetTotalComponentProfit();
                                    InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourComponents();
                                    InsertItem.CalcType = "Components";
                                    InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, MarketRegionID, AveragePriceDays, ManufacturingBlueprint.GetProductionTime(), ManufacturingBlueprint.GetTotalUnits());
                                    if (InsertItem.SVR == "-")
                                    {
                                        InsertItem.SVRxIPH = "0.00";
                                    }
                                    else
                                    {
                                        InsertItem.SVRxIPH = Strings.FormatNumber(Conversions.ToDouble(InsertItem.SVR) * InsertItem.IPH, 2);
                                    }
                                    InsertItem.TotalCost = ManufacturingBlueprint.GetTotalComponentCost();
                                    InsertItem.ROI = ManufacturingBlueprint.GetTotalComponentProfit() / ManufacturingBlueprint.GetTotalComponentCost();
                                }
                                else if (rbtnCalcCompareRawMats.Checked)
                                {
                                    // Use the Raw values 
                                    InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalRawProfitPercent();
                                    InsertItem.Profit = ManufacturingBlueprint.GetTotalRawProfit();
                                    InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourRaw();
                                    InsertItem.CalcType = "Raw Materials";
                                    InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, MarketRegionID, AveragePriceDays, ManufacturingBlueprint.GetTotalProductionTime(), ManufacturingBlueprint.GetTotalUnits());
                                    if (InsertItem.SVR == "-")
                                    {
                                        InsertItem.SVRxIPH = "0.00";
                                    }
                                    else
                                    {
                                        InsertItem.SVRxIPH = Strings.FormatNumber(Conversions.ToDouble(InsertItem.SVR) * InsertItem.IPH, 2);
                                    }
                                    InsertItem.TotalCost = ManufacturingBlueprint.GetTotalBuildCost();
                                    InsertItem.ROI = ManufacturingBlueprint.GetTotalRawProfit() / ManufacturingBlueprint.GetTotalRawCost();
                                }
                                else if (rbtnCalcCompareBuildBuy.Checked)
                                {
                                    // Use the Build/Buy best rate values (the blueprint was set to get these values above)
                                    InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalRawProfitPercent();
                                    InsertItem.Profit = ManufacturingBlueprint.GetTotalRawProfit();
                                    InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourRaw();
                                    InsertItem.CalcType = "Build/Buy";
                                    InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, MarketRegionID, AveragePriceDays, ManufacturingBlueprint.GetTotalProductionTime(), ManufacturingBlueprint.GetTotalUnits());
                                    if (InsertItem.SVR == "-")
                                    {
                                        InsertItem.SVRxIPH = "0.00";
                                    }
                                    else
                                    {
                                        InsertItem.SVRxIPH = Strings.FormatNumber(Conversions.ToDouble(InsertItem.SVR) * InsertItem.IPH, 2);
                                    }
                                    InsertItem.TotalCost = ManufacturingBlueprint.GetTotalBuildCost();
                                    InsertItem.ROI = ManufacturingBlueprint.GetTotalRawProfit() / ManufacturingBlueprint.GetTotalRawCost();
                                }

                                InsertItem.Taxes = ManufacturingBlueprint.GetSalesTaxes();
                                InsertItem.BrokerFees = ManufacturingBlueprint.GetSalesBrokerFees();
                                InsertItem.SingleInventedBPCRunsperBPC = ManufacturingBlueprint.GetSingleInventedBPCRuns();
                                InsertItem.BaseJobCost = ManufacturingBlueprint.GetEstimatedItemValue();
                                InsertItem.JobFee = ManufacturingBlueprint.GetJobFee();
                                InsertItem.NumBPs = ManufacturingBlueprint.GetUsedNumBPs();
                                InsertItem.InventionChance = ManufacturingBlueprint.GetInventionChance();
                                InsertItem.Race = Public_Variables.GetRace(ManufacturingBlueprint.GetRaceID());
                                InsertItem.VolumeperItem = ManufacturingBlueprint.GetItemVolume();
                                InsertItem.TotalVolume = ManufacturingBlueprint.GetTotalItemVolume();
                                InsertItem.MaterialCost = ManufacturingBlueprint.GetRawMaterials().GetTotalMaterialsCost();
                                InsertItem.SellExcess = ManufacturingBlueprint.GetExcessMaterials().GetTotalMaterialsCost();

                                if (chkCalcPPU.Checked)
                                {
                                    InsertItem.DivideUnits = (int)ManufacturingBlueprint.GetTotalUnits();
                                    InsertItem.PortionSize = 1;
                                }
                                else
                                {
                                    InsertItem.DivideUnits = 1;
                                    InsertItem.PortionSize = (int)ManufacturingBlueprint.GetTotalUnits();
                                }

                                InsertItem.BPProductionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetProductionTime() / InsertItem.DivideUnits);
                                if (rbtnCalcCompareComponents.Checked)
                                {
                                    // Total production time for components only is always the bp production time
                                    InsertItem.TotalProductionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetProductionTime() / InsertItem.DivideUnits);
                                }
                                else
                                {
                                    InsertItem.TotalProductionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetTotalProductionTime() / InsertItem.DivideUnits);
                                }

                                InsertItem.CopyTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetCopyTime() / InsertItem.DivideUnits);
                                InsertItem.InventionTime = Public_Variables.FormatIPHTime(ManufacturingBlueprint.GetInventionTime() / InsertItem.DivideUnits);

                                if ((ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 | ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3) & InsertItem.BlueprintType != Public_Variables.BPType.Original & InsertItem.BlueprintType != Public_Variables.BPType.Copy)
                                {
                                    InsertItem.InventionCost = ManufacturingBlueprint.GetInventionCost();
                                }
                                else
                                {
                                    InsertItem.InventionCost = 0d;
                                }

                                if (ManufacturingBlueprint.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 & InsertItem.BlueprintType != Public_Variables.BPType.Original)
                                {
                                    InsertItem.CopyCost = ManufacturingBlueprint.GetCopyCost();
                                }
                                else
                                {
                                    InsertItem.CopyCost = 0d;
                                }

                                // Usage
                                // If it's a reaction, we don't want to add the manufacturing usage for any fuel blocks if it's a component
                                switch (InsertItem.ItemGroupID)
                                {
                                    case var case2 when case2 == Public_Variables.ReactionGroupID(InsertItem.ItemGroupID):
                                        {
                                            InsertItem.BuildFacilityUsage = 0d;
                                            break;
                                        }

                                    default:
                                        {
                                            InsertItem.BuildFacilityUsage = ManufacturingBlueprint.GetManufacturingFacilityUsage();
                                            break;
                                        }
                                }
                                InsertItem.ComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetComponentFacilityUsage();
                                InsertItem.CapComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetCapComponentFacilityUsage();
                                InsertItem.ReactionFacilityUsage = ManufacturingBlueprint.GetReactionFacilityUsage();
                                InsertItem.CopyFacilityUsage = ManufacturingBlueprint.GetCopyUsage();
                                InsertItem.InventionFacilityUsage = ManufacturingBlueprint.GetInventionUsage();
                                InsertItem.ReprocessingFacilityUsage = ManufacturingBlueprint.GetReprocessingUsage();

                                // Save the bp
                                InsertItem.Blueprint = ManufacturingBlueprint;

                                // Insert the chosen item
                                InsertManufacturingItem(InsertItem, SVRThresholdValue, chkCalcSVRIncludeNull.Checked, ref ManufacturingList, ref ListRowFormats);

                                // Insert the item for decryptor compare
                                InsertDecryptorforOptimalCompare(ref ManufacturingBlueprint, ref InsertItem.CalcType, ref InsertItem.ListID, ref OptimalDecryptorItems);

                            }

                        }

                        // For each record, update the progress bar
                        var argPG1 = pnlProgressBar;
                        Public_Variables.IncrementToolStripProgressBar(ref argPG1);
                        pnlProgressBar = argPG1;

                    }

                    // Done processing the blueprints
                    pnlProgressBar.Value = 0;
                    pnlProgressBar.Visible = false;
                    // Me.Cursor = Cursors.Default
                    pnlStatus.Text = "";

                    // BPs were calcualted so enable it
                    AddToShoppingListToolStripMenuItem.Enabled = true;

                }

            }

        // **********************************************************************
        // *** Display results in grid - use for both calcuations and preview ***
        // **********************************************************************
            // Reset the columns before processing data
            RefreshManufacturingTabColumns();

            int NumManufacturingItems;

            // If no records first, then don't let them try and refresh nothing
            if (FinalManufacturingItemList == null & SavedRefreshValue)
            {
                return;
            }

            if (!SavedRefreshValue)
            {
                // Calc or new display data
                NumManufacturingItems = ManufacturingList.Count;

                if (NumManufacturingItems == 0)
                {
                    if (!Calculate)
                    {
                        FinalManufacturingItemList = BaseItems; // Save for later use, this was just display
                    }
                    else
                    {
                        FinalManufacturingItemList = null; // It didn't calculate anything, so just clear the grid and exit
                        lstManufacturing.Items.Clear();
                        goto ExitCalc;
                    }
                }
                else
                {
                    // Use Current data lists and save
                    FinalManufacturingItemList = ManufacturingList;
                }
            }
            else
            {
                // Use pre-calc'd or loaded list
                NumManufacturingItems = FinalManufacturingItemList.Count;
            }

            // Remove only but the optimal decryptor items before final display, and set the final list
            FinalItemList = SetOptimalDecryptorList(FinalManufacturingItemList, OptimalDecryptorItems);

            pnlProgressBar.Minimum = 0;
            pnlProgressBar.Maximum = FinalItemList.Count;
            pnlProgressBar.Value = 0;
            pnlProgressBar.Visible = true;

            lstManufacturing.Items.Clear();
            lstManufacturing.BeginUpdate();
            // Disable sorting because it will crawl after we update if there are too many records
            lstManufacturing.ListViewItemSorter = null;
            lstManufacturing.SmallImageList = CalcImageList;
            // Set the formats before drawing
            lstManufacturing.SetRowFormats(ListRowFormats);

            pnlStatus.Text = "Refreshing List...";

            string BonusString = "";

            // Load the final grid
            var loopTo4 = FinalItemList.Count - 1;
            for (i = 0; i <= loopTo4; i++)
            {
                Application.DoEvents();

                BPList = new ListViewItem(FinalItemList[i].ListID.ToString()); // Always the first item

                if (FinalItemList[i].DivideUnits == 0)
                {
                    // So the display will show zeros instead of NaN (divide by zero)
                    FinalItemList[i].DivideUnits = 1;
                }

                // If the bp is a blueprint, change the reaction facility equal to the manufacturing facility (used in bp)
                // and the manufacturing facility equal to the component facility
                switch (FinalItemList[i].ItemGroup ?? "")
                {
                    case "Composite":
                    case "Biochemical Material":
                    case "Hybrid Polymers":
                    case "Intermediate Materials":
                        {
                            FinalItemList[i].ReactionFacility = (IndustryFacility)FinalItemList[i].BuildFacility.Clone();
                            FinalItemList[i].BuildFacility = (IndustryFacility)FinalItemList[i].ComponentManufacturingFacility.Clone(); // fuel blocks
                            break;
                        }
                }

                var loopTo5 = ColumnPositions.Count() - 1;
                for (j = 1; j <= loopTo5; j++)
                {
                    switch (ColumnPositions[j] ?? "")
                    {
                        case ProgramSettings.ItemCategoryColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ItemCategory);
                                break;
                            }
                        case ProgramSettings.ItemGroupColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ItemGroup);
                                break;
                            }
                        case ProgramSettings.ItemNameColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ItemName);
                                break;
                            }
                        case ProgramSettings.OwnedColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].Owned);
                                break;
                            }
                        case ProgramSettings.TechColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].TechLevel);
                                break;
                            }
                        case ProgramSettings.BPMEColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].BPME.ToString());
                                break;
                            }
                        case ProgramSettings.BPTEColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].BPTE.ToString());
                                break;
                            }
                        case ProgramSettings.InputsColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].Inputs);
                                break;
                            }
                        case ProgramSettings.ComparedColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CalcType);
                                break;
                            }
                        case ProgramSettings.TotalRunsColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].Runs.ToString());
                                break;
                            }
                        case ProgramSettings.SingleInventedBPCRunsColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].SingleInventedBPCRunsperBPC.ToString());
                                break;
                            }
                        case ProgramSettings.ProductionLinesColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ProductionLines.ToString());
                                break;
                            }
                        case ProgramSettings.LaboratoryLinesColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].LaboratoryLines.ToString());
                                break;
                            }
                        case ProgramSettings.TotalInventionCostColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].InventionCost / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.TotalCopyCostColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].CopyCost / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.TaxesColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].Taxes / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.BrokerFeesColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].BrokerFees / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.BPProductionTimeColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].BPProductionTime);
                                break;
                            }
                        case ProgramSettings.TotalProductionTimeColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].TotalProductionTime);
                                break;
                            }
                        case ProgramSettings.CopyTimeColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CopyTime);
                                break;
                            }
                        case ProgramSettings.InventionTimeColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].InventionTime);
                                break;
                            }
                        case ProgramSettings.ItemMarketPriceColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].ItemMarketPrice / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.ProfitColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].Profit / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.ProfitPercentageColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].ProfitPercent, 2));
                                break;
                            }
                        case ProgramSettings.IskperHourColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].IPH, 2));
                                break;
                            }
                        case ProgramSettings.SVRColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].SVR);
                                break;
                            }
                        case ProgramSettings.SVRxIPHColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].SVRxIPH);
                                break;
                            }
                        case ProgramSettings.PriceTrendColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].PriceTrend, 2));
                                break;
                            }
                        case ProgramSettings.TotalItemsSoldColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].TotalItemsSold, 0));
                                break;
                            }
                        case ProgramSettings.TotalOrdersFilledColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].TotalOrdersFilled, 0));
                                break;
                            }
                        case ProgramSettings.AvgItemsperOrderColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].AvgItemsperOrder, 2));
                                break;
                            }
                        case ProgramSettings.CurrentSellOrdersColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].CurrentSellOrders, 0));
                                break;
                            }
                        case ProgramSettings.CurrentBuyOrdersColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].CurrentBuyOrders, 0));
                                break;
                            }
                        case ProgramSettings.ItemsinStockColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].ItemsinStock, 0));
                                break;
                            }
                        case ProgramSettings.ItemsinProductionColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].ItemsinProduction, 0));
                                break;
                            }
                        case ProgramSettings.TotalCostColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].TotalCost / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.BaseJobCostColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].BaseJobCost / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.NumBPsColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].NumBPs.ToString());
                                break;
                            }
                        case ProgramSettings.InventionChanceColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].InventionChance, 2));
                                break;
                            }
                        case ProgramSettings.BPTypeColumnName:
                            {
                                BPList.SubItems.Add(Public_Variables.GetBPTypeString(FinalItemList[i].BlueprintType));
                                break;
                            }
                        case ProgramSettings.RaceColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].Race);
                                break;
                            }
                        case ProgramSettings.VolumeperItemColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].VolumeperItem, 2));
                                break;
                            }
                        case ProgramSettings.TotalVolumeColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].TotalVolume / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.PortionSizeColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].PortionSize, 0));
                                break;
                            }
                        case ProgramSettings.MaterialCostColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].MaterialCost, 2));
                                break;
                            }
                        case ProgramSettings.SellExcessColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].SellExcess, 2));
                                break;
                            }
                        case ProgramSettings.ROIColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].ROI, 2));
                                break;
                            }

                        case ProgramSettings.ManufacturingJobFeeColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].JobFee / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityNameColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].BuildFacility.FacilityName);
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilitySystemColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].BuildFacility.SolarSystemName);
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilitySystemIndexColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].BuildFacility.CostIndex, 5));
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityTaxColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].BuildFacility.TaxRate, 1));
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityRegionColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].BuildFacility.RegionName);
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityMEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].BuildFacility.MaterialMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityTEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].BuildFacility.TimeMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityUsageColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].BuildFacilityUsage / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.ManufacturingFacilityFWSystemLevelColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].BuildFacility.FWUpgradeLevel.ToString());
                                break;
                            }

                        case ProgramSettings.ComponentFacilityNameColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ComponentManufacturingFacility.FacilityName);
                                break;
                            }
                        case ProgramSettings.ComponentFacilitySystemColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ComponentManufacturingFacility.SolarSystemName);
                                break;
                            }
                        case ProgramSettings.ComponentFacilitySystemIndexColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].ComponentManufacturingFacility.CostIndex, 5));
                                break;
                            }
                        case ProgramSettings.ComponentFacilityTaxColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].ComponentManufacturingFacility.TaxRate, 1));
                                break;
                            }
                        case ProgramSettings.ComponentFacilityRegionColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ComponentManufacturingFacility.RegionName);
                                break;
                            }
                        case ProgramSettings.ComponentFacilityMEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ComponentManufacturingFacility.MaterialMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.ComponentFacilityTEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ComponentManufacturingFacility.TimeMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.ComponentFacilityUsageColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].ComponentManufacturingFacilityUsage / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.ComponentFacilityFWSystemLevelColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ComponentManufacturingFacility.FWUpgradeLevel.ToString());
                                break;
                            }

                        case ProgramSettings.CapComponentFacilityNameColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CapComponentManufacturingFacility.FacilityName);
                                break;
                            }
                        case ProgramSettings.CapComponentFacilitySystemColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CapComponentManufacturingFacility.SolarSystemName);
                                break;
                            }
                        case ProgramSettings.CapComponentFacilitySystemIndexColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].CapComponentManufacturingFacility.CostIndex, 5));
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityTaxColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].CapComponentManufacturingFacility.TaxRate, 1));
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityRegionColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CapComponentManufacturingFacility.RegionName);
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityMEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CapComponentManufacturingFacility.MaterialMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityTEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CapComponentManufacturingFacility.TimeMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityUsageColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].CapComponentManufacturingFacilityUsage / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.CapComponentFacilityFWSystemLevelColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CapComponentManufacturingFacility.FWUpgradeLevel.ToString());
                                break;
                            }

                        case ProgramSettings.CopyingFacilityNameColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CopyFacility.FacilityName);
                                break;
                            }
                        case ProgramSettings.CopyingFacilitySystemColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CopyFacility.SolarSystemName);
                                break;
                            }
                        case ProgramSettings.CopyingFacilitySystemIndexColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].CopyFacility.CostIndex, 5));
                                break;
                            }
                        case ProgramSettings.CopyingFacilityTaxColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].CopyFacility.TaxRate, 1));
                                break;
                            }
                        case ProgramSettings.CopyingFacilityRegionColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CopyFacility.RegionName);
                                break;
                            }
                        case ProgramSettings.CopyingFacilityMEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CopyFacility.MaterialMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.CopyingFacilityTEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CopyFacility.TimeMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.CopyingFacilityUsageColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].CopyFacilityUsage / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.CopyingFacilityFWSystemLevelColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].CopyFacility.FWUpgradeLevel.ToString());
                                break;
                            }

                        case ProgramSettings.InventionFacilityNameColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].InventionFacility.FacilityName);
                                break;
                            }
                        case ProgramSettings.InventionFacilitySystemColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].InventionFacility.SolarSystemName);
                                break;
                            }
                        case ProgramSettings.InventionFacilitySystemIndexColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].InventionFacility.CostIndex, 5));
                                break;
                            }
                        case ProgramSettings.InventionFacilityTaxColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].InventionFacility.TaxRate, 1));
                                break;
                            }
                        case ProgramSettings.InventionFacilityRegionColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].InventionFacility.RegionName);
                                break;
                            }
                        case ProgramSettings.InventionFacilityMEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].InventionFacility.MaterialMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.InventionFacilityTEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].InventionFacility.TimeMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.InventionFacilityUsageColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].InventionFacilityUsage / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.InventionFacilityFWSystemLevelColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].InventionFacility.FWUpgradeLevel.ToString());
                                break;
                            }

                        case ProgramSettings.ReactionFacilityNameColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ReactionFacility.FacilityName);
                                break;
                            }
                        case ProgramSettings.ReactionFacilitySystemColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ReactionFacility.SolarSystemName);
                                break;
                            }
                        case ProgramSettings.ReactionFacilitySystemIndexColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].ReactionFacility.CostIndex, 5));
                                break;
                            }
                        case ProgramSettings.ReactionFacilityTaxColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatPercent(FinalItemList[i].ReactionFacility.TaxRate, 1));
                                break;
                            }
                        case ProgramSettings.ReactionFacilityRegionColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ReactionFacility.RegionName);
                                break;
                            }
                        case ProgramSettings.ReactionFacilityMEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ReactionFacility.MaterialMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.ReactionFacilityTEBonusColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ReactionFacility.TimeMultiplier.ToString());
                                break;
                            }
                        case ProgramSettings.ReactionFacilityUsageColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].ReactionFacilityUsage / FinalItemList[i].DivideUnits, 2));
                                break;
                            }
                        case ProgramSettings.ReactionFacilityFWSystemLevelColumnName:
                            {
                                BPList.SubItems.Add(FinalItemList[i].ReactionFacility.FWUpgradeLevel.ToString());
                                break;
                            }

                        case ProgramSettings.ReprocessingFacilityNameColumnName:
                            {
                                BPList.SubItems.Add(!(FinalItemList[i].ReprocessingFacility == null) ? FinalItemList[i].ReprocessingFacility.FacilityName : "");
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilitySystemColumnName:
                            {
                                BPList.SubItems.Add(!(FinalItemList[i].ReprocessingFacility == null) ? FinalItemList[i].ReprocessingFacility.SolarSystemName : "");
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityTaxColumnName:
                            {
                                BPList.SubItems.Add(!(FinalItemList[i].ReprocessingFacility == null) ? Strings.FormatPercent(FinalItemList[i].ReprocessingFacility.TaxRate, 1) : "");
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityRegionColumnName:
                            {
                                BPList.SubItems.Add(!(FinalItemList[i].ReprocessingFacility == null) ? FinalItemList[i].ReprocessingFacility.RegionName : "");
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityOreRefineRateColumnName:
                            {
                                BPList.SubItems.Add(!(FinalItemList[i].ReprocessingFacility == null) ? FinalItemList[i].ReprocessingFacility.OreFacilityRefineRate.ToString() : "");
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityIceRefineRateColumnName:
                            {
                                BPList.SubItems.Add(!(FinalItemList[i].ReprocessingFacility == null) ? FinalItemList[i].ReprocessingFacility.IceFacilityRefineRate.ToString() : "");
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityMoonRefineRateColumnName:
                            {
                                BPList.SubItems.Add(!(FinalItemList[i].ReprocessingFacility == null) ? FinalItemList[i].ReprocessingFacility.MoonOreFacilityRefineRate.ToString() : "");
                                break;
                            }
                        case ProgramSettings.ReprocessingFacilityUsageColumnName:
                            {
                                BPList.SubItems.Add(Strings.FormatNumber(FinalItemList[i].ReprocessingFacilityUsage / FinalItemList[i].DivideUnits, 2));
                                break;
                            }

                    }
                }

                // Add the record
                lstManufacturing.Items.Add(BPList);

                // For each record, update the progress bar
                var argPG2 = pnlProgressBar;
                Public_Variables.IncrementToolStripProgressBar(ref argPG2);
                pnlProgressBar = argPG2;

            }

            SortOrder TempType;

            // Now sort this
            if (ManufacturingColumnSortType == SortOrder.Ascending)
            {
                TempType = SortOrder.Descending;
            }
            else
            {
                TempType = SortOrder.Ascending;
            }

            // Sort the list based on the saved column, if they change the number of columns below value, then find IPH, if not there, use column 0
            if (ManufacturingColumnClicked > lstManufacturing.Columns.Count)
            {
                // Find the IPH column
                if (SettingsVariables.UserManufacturingTabColumnSettings.IskperHour != 0)
                {
                    ManufacturingColumnClicked = SettingsVariables.UserManufacturingTabColumnSettings.IskperHour;
                }
                else
                {
                    ManufacturingColumnClicked = 0;
                } // Default, will always be there

            }

            // Sort away
            ListView argRefListView = lstManufacturing;
            Public_Variables.ListViewColumnSorter(ManufacturingColumnClicked, ref argRefListView, ref ManufacturingColumnClicked, ref TempType);

            lstManufacturing.EndUpdate();

        ExitCalc:
            ;

            pnlProgressBar.Value = 0;
            pnlProgressBar.Visible = false;
            pnlStatus.Text = "";
            lstManufacturing.EndUpdate();

            // Enable all the controls
            btnCalcPreview.Enabled = true;
            btnCalcReset.Enabled = true;
            btnCalcSelectColumns.Enabled = true;
            btnCalcSaveSettings.Enabled = true;
            btnCalcExportList.Enabled = true;
            gbCalcMarketFilters.Enabled = true;
            gbCalcBPSelect.Enabled = true;
            gbCalcIncludeItems.Enabled = true;
            gbCalcBPRace.Enabled = true;
            gbCalcBPType.Enabled = true;
            chkCalcNPCBPOs.Enabled = true;
            gbCalcSizeLimit.Enabled = true;
            gbCalcBPTech.Enabled = true;
            gbCalcCompareType.Enabled = true;
            gbCalcFilter.Enabled = true;
            gbCalcIgnoreinCalcs.Enabled = true;
            gbCalcIncludeOwned.Enabled = true;
            gbCalcInvention.Enabled = true;
            gbCalcProdLines.Enabled = true;
            gbCalcRelics.Enabled = true;
            gbCalcTextColors.Enabled = true;
            gbCalcTextFilter.Enabled = true;
            lstManufacturing.Enabled = true;
            tabCalcFacilities.Enabled = true;

            Application.UseWaitCursor = false;
            Cursor = Cursors.Default;
            Application.DoEvents();

            if (lstManufacturing.Items.Count == 0 & !Public_Variables.CancelManufacturingTabCalc)
            {
                Interaction.MsgBox("No Blueprints calculated for options selected.", Constants.vbExclamation, Application.ProductName);
            }

            if (!Calculate | Public_Variables.CancelManufacturingTabCalc)
            {
                ResetRefresh();
                Public_Variables.CancelManufacturingTabCalc = false;
            }
            else
            {
                btnCalcCalculate.Text = "Refresh";
                RefreshCalcData = true;
            } // Allow data to be refreshed since we just calcuated

        }

        // Finds the total items sold over the time period for the region sent
        private long CalculateTotalItemsSold(long TypeID, long RegionID, int DaysfromToday)
        {
            string SQL;
            SQLiteDataReader rsItems;
            long Volume = 0L;

            SQL = "SELECT SUM(TOTAL_VOLUME_FILLED) FROM MARKET_HISTORY WHERE TYPE_ID = " + TypeID.ToString() + " AND REGION_ID = " + RegionID.ToString() + " ";
            SQL += "AND DATETIME(PRICE_HISTORY_DATE) >= " + " DateTime('" + Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -(DaysfromToday + 1), DateTime.UtcNow.Date), Public_Variables.SQLiteDateFormat) + "') ";
            SQL += "AND DATETIME(PRICE_HISTORY_DATE) < " + " DateTime('" + Strings.Format(DateTime.UtcNow.Date, Public_Variables.SQLiteDateFormat) + "') ";
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsItems = Public_Variables.DBCommand.ExecuteReader();

            if (rsItems.Read() & !(rsItems.GetValue(0) is DBNull))
            {
                Volume = rsItems.GetInt64(0);
            }

            rsItems.Close();

            return Volume;

        }

        // Finds the total orders filled over the time period for the region sent
        private long CalculateTotalOrdersFilled(long TypeID, long RegionID, int DaysfromToday)
        {
            string SQL;
            SQLiteDataReader rsItems;
            long Volume = 0L;

            SQL = "SELECT SUM(TOTAL_ORDERS_FILLED) FROM MARKET_HISTORY WHERE TYPE_ID = " + TypeID.ToString() + " AND REGION_ID = " + RegionID.ToString() + " ";
            SQL += "AND DATETIME(PRICE_HISTORY_DATE) >= " + " DateTime('" + Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -(DaysfromToday + 1), DateTime.UtcNow.Date), Public_Variables.SQLiteDateFormat) + "') ";
            SQL += "AND DATETIME(PRICE_HISTORY_DATE) < " + " DateTime('" + Strings.Format(DateTime.UtcNow.Date, Public_Variables.SQLiteDateFormat) + "') ";
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsItems = Public_Variables.DBCommand.ExecuteReader();

            if (rsItems.Read() & !(rsItems.GetValue(0) is DBNull))
            {
                Volume = rsItems.GetInt64(0);
            }

            rsItems.Close();

            return Volume;

        }

        // Finds the average items sold per order over the time period for the region sent, and sets the two by reference
        private void GetCurrentOrders(long TypeID, long RegionID, ref long BuyOrders, ref long SellOrders)
        {
            string SQL;
            SQLiteDataReader rsItems;

            SQL = "SELECT IS_BUY_ORDER, SUM(VOLUME_REMAINING) FROM (SELECT * FROM MARKET_ORDERS UNION ALL SELECT * FROM STRUCTURE_MARKET_ORDERS) ";
            SQL += "WHERE TYPE_ID = " + TypeID.ToString() + " And REGION_ID = " + RegionID.ToString() + " ";
            SQL += "GROUP BY IS_BUY_ORDER";
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsItems = Public_Variables.DBCommand.ExecuteReader();

            while (rsItems.Read())
            {
                if (rsItems.GetInt32(0) == 0)
                {
                    SellOrders = rsItems.GetInt64(1);
                }
                else
                {
                    BuyOrders = rsItems.GetInt64(1);
                }
            }

            rsItems.Close();

        }

        // Finds the number of items in stock for the asset settings set here
        private int GetTotalItemsinStock(long TypeID)
        {
            string SQL;
            SQLiteDataReader readerAssets;
            string CurrentItemName = "";
            int ItemQuantity = 0;

            Application.UseWaitCursor = true;
            Cursor = Cursors.WaitCursor;
            Application.DoEvents();

            string IDString = "";

            // Set the ID string we will use to update
            if (SettingsVariables.UserAssetWindowShoppingListSettings.AssetType == "Both")
            {
                IDString = Public_Variables.SelectedCharacter.ID.ToString() + "," + Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID.ToString();
            }
            else if (SettingsVariables.UserAssetWindowShoppingListSettings.AssetType == "Personal")
            {
                IDString = Public_Variables.SelectedCharacter.ID.ToString();
            }
            else if (SettingsVariables.UserAssetWindowShoppingListSettings.AssetType == "Corporation")
            {
                IDString = Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID.ToString();
            }

            // Build the where clause to look up data
            var AssetLocationFlagList = new List<string>();
            // First look up the location and flagID pairs - unique ID of asset locations
            SQL = "SELECT LocationID, FlagID FROM ASSET_LOCATIONS WHERE EnumAssetType = " + ((int)AssetWindow.ManufacturingTab).ToString() + " And ID IN (" + IDString + ")";
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerAssets = Public_Variables.DBCommand.ExecuteReader();

            while (readerAssets.Read())
            {
                if (readerAssets.GetInt32(1) == -4)
                {
                    // If the flag is the base location, then we want all items at the location id
                    AssetLocationFlagList.Add("(LocationID = " + readerAssets.GetInt64(0).ToString() + ")");
                }
                else
                {
                    AssetLocationFlagList.Add("(LocationID = " + readerAssets.GetInt64(0).ToString() + " And Flag = " + readerAssets.GetInt32(1).ToString() + ")");
                }
            }

            readerAssets.Close();

            // Look up each item in their assets in their locations stored, and sum up the quantity'
            // Split into groups to run (1000 identifiers max so limit to 900)
            int Splits = (int)Math.Round(Math.Ceiling(AssetLocationFlagList.Count / 900d));
            for (int k = 0, loopTo = Splits - 1; k <= loopTo; k++)
            {
                Application.DoEvents();
                string TempAssetWhereList = "";
                // Build the partial asset location id/flag list
                for (int z = k * 900, loopTo1 = (k + 1) * 900 - 1; z <= loopTo1; z++)
                {
                    if (z == AssetLocationFlagList.Count)
                    {
                        // exit if we get to the end of the list
                        break;
                    }
                    TempAssetWhereList = TempAssetWhereList + AssetLocationFlagList[z] + " Or ";
                }

                // Strip final OR
                TempAssetWhereList = TempAssetWhereList.Substring(0, Strings.Len(TempAssetWhereList) - 4);

                SQL = "SELECT SUM(Quantity) FROM ASSETS WHERE (" + TempAssetWhereList + ") ";
                SQL += " And ASSETS.TypeID = " + TypeID.ToString() + " And ID IN (" + IDString + ")";

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerAssets = Public_Variables.DBCommand.ExecuteReader();
                readerAssets.Read();

                if (readerAssets.HasRows & !(readerAssets.GetValue(0) is DBNull))
                {
                    ItemQuantity += readerAssets.GetInt32(0); // sum up
                }
                readerAssets.Close();
            }

            return ItemQuantity;

        }

        // Finds the number of items in production from all loaded characters
        private int GetTotalItemsinProduction(long TypeID)
        {
            string SQL;
            SQLiteDataReader rsItems;
            int Volume = 0;

            SQL = "SELECT SUM(runs * PORTION_SIZE) FROM INDUSTRY_JOBS, ALL_BLUEPRINTS WHERE INDUSTRY_JOBS.productTypeID = ALL_BLUEPRINTS.ITEM_ID ";
            SQL += "And productTypeID = " + TypeID.ToString() + " And status = 'active' And activityID IN (1,11) ";
            // SQL &= "And installerID = " & CStr(SelectedCharacter.ID) & " "

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsItems = Public_Variables.DBCommand.ExecuteReader();

            if (rsItems.Read() & !(rsItems.GetValue(0) is DBNull))
            {
                Volume = rsItems.GetInt32(0);
            }

            rsItems.Close();

            return Volume;

        }

        // Sets the owned flag for an insert item
        private bool SetItemOwnedFlag(ref ManufacturingItem SentItem, Decryptor SentOrigDecryptor, string SentOrigRelic, int SentOrigME, int SentOrigTE, bool SentOriginalBPOwnedFlag)
        {
            // We know the original decryptor and relic used for this bp so see if they match what we just 
            // used and set the owned flag and it's invented, which all these are - also make sure the me/te are same
            // as base if no decryptor used
            if ((SentItem.Decryptor.Name ?? "") == (SentOrigDecryptor.Name ?? "") & SentOrigRelic.Contains(SentItem.Relic) & SentOriginalBPOwnedFlag == true & SentItem.BlueprintType == Public_Variables.BPType.InventedBPC & !((SentOrigDecryptor.Name ?? "") == (DecryptorVariables.NoDecryptor.Name ?? "") & SentOrigME != Public_Variables.BaseT2T3ME & SentOrigTE != Public_Variables.BaseT2T3TE))

            {
                SentItem.Owned = Public_Variables.Yes;
                return true;
            }
            else
            {
                SentItem.Owned = Public_Variables.No;
                return false;
            }
        }

        // Loads the cmbBPTypeFilter object with types based on the radio button selected - Ie, Drones will load Drone types (Small, Medium, Heavy...etc)
        private void LoadCalcBPTypes()
        {
            string SQL;
            string WhereClause = "";
            SQLiteDataReader readerTypes;
            var InventedBPs = new List<long>();

            cmbCalcBPTypeFilter.Text = SettingsVariables.UserManufacturingTabSettings.ItemTypeFilter;
            SQL = "SELECT ITEM_GROUP FROM " + Public_Variables.USER_BLUEPRINTS;

            WhereClause = BuildManufactureWhereClause(true, ref InventedBPs);

            if (string.IsNullOrEmpty(WhereClause))
            {
                // They didn't select anything, just clear and exit
                cmbCalcBPTypeFilter.Items.Clear();
                cmbCalcBPTypeFilter.Text = "All Types";
                return;
            }

            // See if we are looking at User Owned blueprints or All
            if (rbtnCalcBPOwned.Checked)
            {
                WhereClause += "And USER_ID = " + Public_Variables.SelectedCharacter.ID + " And OWNED <> 0  ";
            }

            SQL += WhereClause + "GROUP BY ITEM_GROUP";

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            Public_Variables.DBCommand.Parameters.AddWithValue("@USERBP_USERID", Public_Variables.GetBPUserID(Public_Variables.SelectedCharacter.ID)); // need to search for corp ID too
            Public_Variables.DBCommand.Parameters.AddWithValue("@USERBP_CORPID", Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID.ToString());
            readerTypes = Public_Variables.DBCommand.ExecuteReader();

            cmbCalcBPTypeFilter.Items.Clear();

            cmbCalcBPTypeFilter.Items.Add("All Types");

            while (readerTypes.Read())
                cmbCalcBPTypeFilter.Items.Add(readerTypes.GetString(0));

            readerTypes.Close();

        }

        // Just adds an item into the list and duplicates if raw or components checked
        private void InsertItemCalcType(ref List<ManufacturingItem> ManufacturingItemList, ManufacturingItem BaseItem, ref List<RowFormat> FormatList)
        {

            string CalcType = "";
            var TempItem = new ManufacturingItem();
            var CurrentRowFormat = new RowFormat();

            if (BaseItem.ReactionFacility == null)
            {
                Application.DoEvents();
            }

            if (rbtnCalcCompareRawMats.Checked)
            {
                CalcType = "Raw Mats";
            }
            else if (rbtnCalcCompareComponents.Checked)
            {
                CalcType = "Components";
            }
            else if (rbtnCalcCompareBuildBuy.Checked)
            {
                CalcType = "Build/Buy";
            }
            else // All
            {
                CalcType = "All Calcs";
            }

            TempItem = (ManufacturingItem)BaseItem.Clone();
            ListIDIterator += 1;
            TempItem.ListID = ListIDIterator;
            TempItem.CalcType = CalcType;

            ManufacturingItemList.Add(TempItem);

            // Set the list row format for just display, after calcs it will reset
            // Now determine the format of the item and save it for drawing the list
            CurrentRowFormat.ListID = TempItem.ListID;

            // Set the row format for background and foreground colors
            // All columns need to be colored properly
            // Color owned BP's
            if ((TempItem.Owned ?? "") == Public_Variables.Yes)
            {
                if (TempItem.Scanned == 1 | TempItem.Scanned == 0)
                {
                    CurrentRowFormat.BackColor = Brushes.BlanchedAlmond;
                }
                else if (TempItem.Scanned == 2)
                {
                    // Corp owned
                    CurrentRowFormat.BackColor = Brushes.LightGreen;
                }
            }
            else if (UserInventedBPs.Contains(TempItem.BPID))
            {
                // It's an invented BP that we own the T1 BP for
                CurrentRowFormat.BackColor = Brushes.LightSteelBlue;
            }
            else
            {
                CurrentRowFormat.BackColor = Brushes.White;
            }

            // Set default and change if needed
            CurrentRowFormat.ForeColor = Brushes.Black;

            // Insert the format
            FormatList.Add(CurrentRowFormat);

        }

        // Exports the list to clipboard
        private void btnCalcExportList_Click(object sender, EventArgs e)
        {
            StreamWriter MyStream;
            string FileName;
            string OutputText;
            string Separator = "";
            ListView.ListViewItemCollection Items;
            var ExportColumns = new List<string>();
            int NumItems = 0;

            if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.SSVDataExport)
            {
                // Save file name with date
                FileName = "Manufacturing Calculations Export - " + Strings.Format(DateTime.Now, "MMddyyyy") + ".ssv";

                // Show the dialog
                SaveFileDialog.Filter = "ssv files (*.ssv)|*.ssv|All files (*.*)|*.*";
                Separator = ";";
            }
            else // All others in CSV for now
            {
                // Save file name with date
                FileName = "Manufacturing Calculations Export - " + Strings.Format(DateTime.Now, "MMddyyyy") + ".csv";

                // Show the dialog
                SaveFileDialog.Filter = "csv files (*.csv)|*.csv|All files (*.*)|*.*";
                Separator = ",";
            }

            SaveFileDialog.FilterIndex = 1;
            SaveFileDialog.RestoreDirectory = true;
            SaveFileDialog.FileName = FileName;

            if (SaveFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    MyStream = File.CreateText(SaveFileDialog.FileName);

                    if (MyStream is not null)
                    {

                        Items = lstManufacturing.Items;

                        if (Items.Count > 0)
                        {
                            Cursor = Cursors.WaitCursor;
                            pnlProgressBar.Minimum = 0;
                            pnlProgressBar.Maximum = Items.Count - 1;
                            pnlProgressBar.Value = 0;
                            pnlProgressBar.Visible = true;
                            pnlStatus.Text = "Exporting Table...";
                            Application.DoEvents();

                            OutputText = "";
                            for (int i = 1, loopTo = ColumnPositions.Count() - 1; i <= loopTo; i++)
                            {
                                if (!string.IsNullOrEmpty(ColumnPositions[i]))
                                {
                                    OutputText = OutputText + ColumnPositions[i] + Separator;
                                    ExportColumns.Add(ColumnPositions[i]);
                                }
                            }
                            OutputText = OutputText.Substring(0, Strings.Len(OutputText) - 1); // Strip last separator

                            MyStream.Write(OutputText + Environment.NewLine);

                            foreach (ListViewItem Price in Items)
                            {
                                OutputText = "";
                                for (int j = 0, loopTo1 = ExportColumns.Count - 1; j <= loopTo1; j++)
                                    // Format each column value and save
                                    OutputText = OutputText + GetOutputText(ExportColumns[j], Price.SubItems[j + 1].Text, Separator, SettingsVariables.UserApplicationSettings.DataExportFormat);

                                // For each record, update the progress bar
                                var argPG = pnlProgressBar;
                                Public_Variables.IncrementToolStripProgressBar(ref argPG);
                                pnlProgressBar = argPG;
                                Application.DoEvents();

                                MyStream.Write(OutputText + Environment.NewLine);
                            }

                            MyStream.Flush();
                            MyStream.Close();

                            Interaction.MsgBox("Manufacturing Data Exported", Constants.vbInformation, Application.ProductName);

                        }
                    }
                }
                catch
                {
                    Interaction.MsgBox(Information.Err().Description, Constants.vbExclamation, Application.ProductName);
                }
            }

            // Done processing the blueprints
            pnlProgressBar.Value = 0;
            pnlProgressBar.Visible = false;

            gbCalcBPSelectOptions.Enabled = true;
            Cursor = Cursors.Default;
            Refresh();
            Application.DoEvents();
            pnlStatus.Text = "";

        }

        // Outputs text in the correct format
        private string GetOutputText(string ColumnName, string DataText, string Separator, string ExportDataType)
        {
            string ExportData;

            switch (ColumnName ?? "")
            {
                case ProgramSettings.InventionChanceColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.VolumeperItemColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.TotalVolumeColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.TotalInventionCostColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.TotalCopyCostColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.TaxesColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.BrokerFeesColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.ItemMarketPriceColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.ProfitColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.IskperHourColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.SVRColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.SVRxIPHColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.TotalItemsSoldColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.TotalOrdersFilledColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.AvgItemsperOrderColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.CurrentSellOrdersColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.CurrentBuyOrdersColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.ItemsinProductionColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.ItemsinStockColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.TotalCostColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.MaterialCostColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.BaseJobCostColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.ManufacturingJobFeeColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.ManufacturingFacilitySystemIndexColumnName:
                    {
                        ExportData = Strings.FormatNumber(DataText, 5) + Separator;
                        break;
                    }
                case ProgramSettings.ManufacturingFacilityUsageColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.ComponentFacilitySystemIndexColumnName:
                    {
                        ExportData = Strings.FormatNumber(DataText, 5) + Separator;
                        break;
                    }
                case ProgramSettings.ComponentFacilityUsageColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.CapComponentFacilitySystemIndexColumnName:
                    {
                        ExportData = Strings.FormatNumber(DataText, 5) + Separator;
                        break;
                    }
                case ProgramSettings.CapComponentFacilityUsageColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.CopyingFacilitySystemIndexColumnName:
                    {
                        ExportData = Strings.FormatNumber(DataText, 5) + Separator;
                        break;
                    }
                case ProgramSettings.CopyingFacilityUsageColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.InventionFacilitySystemIndexColumnName:
                    {
                        ExportData = Strings.FormatNumber(DataText, 5) + Separator;
                        break;
                    }
                case ProgramSettings.InventionFacilityUsageColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }
                case ProgramSettings.PortionSizeColumnName:
                    {
                        ExportData = Strings.Format(DataText, "Fixed") + Separator;
                        break;
                    }

                default:
                    {
                        ExportData = DataText + Separator;
                        break;
                    }
            }

            if ((ExportDataType ?? "") == Public_Variables.SSVDataExport)
            {
                // Format to EU
                ExportData = Public_Variables.ConvertUStoEUDecimal(ExportData);
            }

            return ExportData;

        }

        // Refresh the list with blueprints before we calculate the data so the user knows what they are calculating
        private void btnManufactureRefresh_Click(object sender, EventArgs e)
        {
            DisplayManufacturingResults(false);
        }

        // Reads through the manufacturing blueprint list and calculates the isk per hour for all that are selected, then sorts them and displays
        private void btnCalculate_Click(object sender, EventArgs e)
        {
            if (btnCalcCalculate.Text == "Cancel")
            {
                Public_Variables.CancelManufacturingTabCalc = true;
            }
            else
            {
                DisplayManufacturingResults(true);
            }
        }

        // Builds the query for the main grid update
        private string BuildManufacturingSelectQuery(ref int RecordCount, ref List<long> InventedBPs)
        {
            string SQL = "";
            string SQLTemp = "";
            string WhereClause = "";
            string ComboType = "";

            // Core Query
            SQL = "SELECT * FROM " + Public_Variables.USER_BLUEPRINTS;

            WhereClause = BuildManufactureWhereClause(false, ref InventedBPs);

            // Don't load if no where clause
            if (string.IsNullOrEmpty(WhereClause))
            {
                return "";
            }

            // Get the record count first
            SQLTemp = "SELECT COUNT(*) FROM " + Public_Variables.USER_BLUEPRINTS + WhereClause;

            var CMDCount = new SQLiteCommand(SQLTemp, Public_Variables.EVEDB.DBREf());
            CMDCount.Parameters.AddWithValue("@USERBP_USERID", Public_Variables.GetBPUserID(Public_Variables.SelectedCharacter.ID)); // need to search for corp ID too
            CMDCount.Parameters.AddWithValue("@USERBP_CORPID", Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID.ToString());
            RecordCount = Conversions.ToInteger(CMDCount.ExecuteScalar());

            return SQL + WhereClause + " ORDER BY ITEM_GROUP, ITEM_NAME";

        }

        // Builds the where clause for the calc screen based on Tech and Group selections, by reference will return the list of Invented BPs
        private string BuildManufactureWhereClause(bool LoadingList, ref List<long> InventedBPs)
        {
            string WhereClause = "";
            string ItemTypes = "";
            string ComboType = "";
            string ItemTypeNumbers = "";
            bool T2Selected = false; // Whether the user wants to look at T2 blueprints or not - this is used in loading only T2 bps that we can invent
            SQLiteDataReader readerT1s;
            string TempRace = "";
            string RaceClause = "";
            string SizesClause = "";
            string NPCBPOsClause = "";

            string SQL = "";
            string T2Query = "";
            string T3Query = "";
            string RelicRuns = "";

            // Items
            if (chkCalcAmmo.Checked)
            {
                ItemTypes = ItemTypes + "X.ITEM_CATEGORY = 'Charge' OR ";
            }
            if (chkCalcDrones.Checked)
            {
                ItemTypes = ItemTypes + "X.ITEM_CATEGORY IN ('Drone', 'Fighter') OR ";
            }
            if (chkCalcModules.Checked)
            {
                ItemTypes = ItemTypes + "(X.ITEM_CATEGORY = 'Module' AND X.ITEM_GROUP NOT LIKE 'Rig%') OR ";
            }
            if (chkCalcShips.Checked)
            {
                ItemTypes = ItemTypes + "X.ITEM_CATEGORY = 'Ship' OR ";
            }
            if (chkCalcSubsystems.Checked)
            {
                ItemTypes = ItemTypes + "X.ITEM_CATEGORY = 'Subsystem' OR ";
            }
            if (chkCalcBoosters.Checked)
            {
                ItemTypes = ItemTypes + "X.ITEM_CATEGORY = 'Implant' OR ";
            }
            if (chkCalcComponents.Checked)
            {
                ItemTypes = ItemTypes + "(X.ITEM_GROUP LIKE '%Components%' AND X.ITEM_GROUP <> 'Station Components') OR ";
            }
            if (chkCalcRigs.Checked)
            {
                ItemTypes = ItemTypes + "(X.BLUEPRINT_GROUP = 'Rig Blueprint' OR (X.ITEM_CATEGORY = 'Structure Module' AND X.ITEM_GROUP LIKE '%Rig%')) OR ";
            }
            if (chkCalcStructureRigs.Checked)
            {
                ItemTypes = ItemTypes + "X.ITEM_CATEGORY = 'Structure Rigs' OR ";
            }
            if (chkCalcCelestials.Checked)
            {
                ItemTypes = ItemTypes + "X.ITEM_CATEGORY IN ('Celestial', 'Orbitals', 'Sovereignty Structures', 'Station', 'Accessories') OR ";
            }
            if (chkCalcStructureModules.Checked)
            {
                ItemTypes = ItemTypes + "(X.ITEM_CATEGORY = 'Structure Module' AND X.ITEM_GROUP NOT LIKE '%Rig%') OR ";
            }
            if (chkCalcReactions.Checked)
            {
                ItemTypes = ItemTypes + "(X.BLUEPRINT_GROUP LIKE '%Reaction Formulas') OR ";
            }
            if (chkCalcMisc.Checked)
            {
                ItemTypes = ItemTypes + "X.ITEM_GROUP IN ('Tool','Data Interfaces','Cyberimplant','Fuel Block') OR ";
            }
            if (chkCalcDeployables.Checked)
            {
                ItemTypes = ItemTypes + "X.ITEM_CATEGORY = 'Deployable' OR ";
            }
            if (chkCalcStructures.Checked)
            {
                ItemTypes = ItemTypes + "(X.ITEM_CATEGORY IN ('Starbase','Structure') OR X.ITEM_GROUP = 'Station Components')  OR ";
            }

            // Take off last OR
            if (!string.IsNullOrEmpty(ItemTypes))
            {
                ItemTypes = ItemTypes.Substring(0, ItemTypes.Count() - 4);
            }
            else
            {
                // Can't run this
                return "";
            }

            // Item Type Definitions - These are set by me based on existing data
            // 1, 2, 14 are T1, T2, T3
            // 3 is Storyline
            // 15 is Pirate Faction
            // 16 is Navy Faction

            // Check Tech version
            if (chkCalcT1.Enabled)
            {
                // Only a Subsystem so T3
                if (chkCalcT1.Checked)
                {
                    ItemTypeNumbers = ItemTypeNumbers + "1,";
                }
            }

            if (chkCalcT2.Enabled)
            {
                if (chkCalcT2.Checked)
                {
                    // If we have T2 blueprints and they selected to only have T2 they have T1 blueprints for to invent
                    // then build this list and add a special SQL item type entry for T2's
                    if (rbtnCalcAllBPs.Checked | chkCalcIncludeT2Owned.Checked)
                    {
                        InventedBPs = new List<long>();
                        // Select all the T2 bps that we can invent from our owned bps and save them
                        SQL = "SELECT productTypeID FROM INDUSTRY_ACTIVITY_PRODUCTS ";
                        SQL += "WHERE activityID = 8 AND blueprintTypeID IN ";
                        SQL += "(SELECT BP_ID FROM " + Public_Variables.USER_BLUEPRINTS + " WHERE ";
                        if (rbtnCalcBPFavorites.Checked)
                        {
                            SQL += " X.FAVORITE = 1 AND ";
                        }
                        else
                        {
                            SQL += " X.OWNED <> 0 AND ";
                        }
                        SQL += "X.ITEM_TYPE = 1) GROUP BY productTypeID";

                        Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                        Public_Variables.DBCommand.Parameters.AddWithValue("@USERBP_USERID", Public_Variables.GetBPUserID(Public_Variables.SelectedCharacter.ID)); // need to search for corp ID too
                        Public_Variables.DBCommand.Parameters.AddWithValue("@USERBP_CORPID", Public_Variables.SelectedCharacter.CharacterCorporation.CorporationID.ToString());
                        readerT1s = Public_Variables.DBCommand.ExecuteReader();

                        while (readerT1s.Read())
                        {
                            // Build list for where clause
                            T2Query = T2Query + Conversions.ToString(readerT1s.GetValue(0)) + ",";
                            // Save the T2 BPID for later lookup to display
                            InventedBPs.Add(Conversions.ToLong(readerT1s.GetValue(0)));
                        }

                        readerT1s.Close();

                        // Set the list of T2 BPC's we want and allow for User ID 0 (not owned but invented) or the User ID (OWNED)
                        if (InventedBPs.Count != 0 & !string.IsNullOrEmpty(T2Query))
                        {
                            T2Query = " OR (X.ITEM_TYPE = 2 AND X.BP_ID IN (" + T2Query.Substring(0, T2Query.Length - 1) + ")) ";
                        }
                    }
                    else
                    {
                        T2Query = "";
                    }

                    ItemTypeNumbers = ItemTypeNumbers + "2,";

                }
            }

            if (chkCalcT3.Enabled)
            {
                if (chkCalcT3.Checked)
                {
                    if (rbtnCalcAllBPs.Checked | chkCalcIncludeT3Owned.Checked)
                    {
                        T3Query = " OR (X.ITEM_TYPE = 14) ";
                    }
                    else
                    {
                        T3Query = "";
                    }

                    ItemTypeNumbers = ItemTypeNumbers + "14,";

                }
            }

            if (chkCalcStoryline.Enabled)
            {
                if (chkCalcStoryline.Checked)
                {
                    ItemTypeNumbers = ItemTypeNumbers + "3,";
                }
            }

            if (chkCalcPirateFaction.Enabled)
            {
                if (chkCalcPirateFaction.Checked)
                {
                    ItemTypeNumbers = ItemTypeNumbers + "15,";
                }
            }

            if (chkCalcNavyFaction.Enabled)
            {
                if (chkCalcNavyFaction.Checked)
                {
                    ItemTypeNumbers = ItemTypeNumbers + "16,";
                }
            }

            // Add Item Type
            if (!string.IsNullOrEmpty(ItemTypeNumbers))
            {
                ItemTypeNumbers = "X.ITEM_TYPE IN (" + ItemTypeNumbers.Substring(0, ItemTypeNumbers.Length - 1) + ") ";
            }
            else
            {
                // They need to have at least one tech. If not, just return nothing
                return "";
            }

            // See if we are looking at User Owned blueprints or item types and add this - only want owned item types
            if (rbtnCalcBPOwned.Checked)
            {
                ItemTypeNumbers = ItemTypeNumbers + " AND OWNED <> 0 ";
            }

            // Determine what race we are looking at
            if (chkCalcRaceAmarr.Checked)
            {
                TempRace = TempRace + "4,";
            }
            if (chkCalcRaceCaldari.Checked)
            {
                TempRace = TempRace + "1,";
            }
            if (chkCalcRaceMinmatar.Checked)
            {
                TempRace = TempRace + "2,";
            }
            if (chkCalcRaceGallente.Checked)
            {
                TempRace = TempRace + "8,";
            }
            if (chkCalcRacePirate.Checked)
            {
                TempRace = TempRace + "15,";
            }
            if (chkCalcRaceOther.Checked)
            {
                TempRace = TempRace + "0,";
            }

            if (!string.IsNullOrEmpty(TempRace))
            {
                TempRace = "(" + TempRace.Substring(0, Strings.Len(TempRace) - 1) + ")";
                RaceClause = "X.RACE_ID IN " + TempRace;
            }
            else
            {
                // They need to have at least one. If not, just return nothing
                return "";
            }

            // If they select a type of item, set that
            if (LoadingList)
            {
                ComboType = "";
            }
            else if (Strings.Trim(cmbCalcBPTypeFilter.Text) != "All Types" & Strings.Trim(cmbCalcBPTypeFilter.Text) != "Select Type" & !string.IsNullOrEmpty(Strings.Trim(cmbCalcBPTypeFilter.Text))) // We are doing a main query so limit
            {
                ComboType = "AND X.ITEM_GROUP ='" + Strings.Trim(cmbCalcBPTypeFilter.Text) + "' ";
            }
            else
            {
                ComboType = "";
            }

            SizesClause = "";

            // Finally add the sizes
            if (chkCalcSmall.Checked) // Light
            {
                SizesClause = SizesClause + "'S',";
            }

            if (chkCalcMedium.Checked) // Medium
            {
                SizesClause = SizesClause + "'M',";
            }

            if (chkCalcLarge.Checked) // Heavy
            {
                SizesClause = SizesClause + "'L',";
            }

            if (chkCalcXL.Checked) // Fighters
            {
                SizesClause = SizesClause + "'XL',";
            }

            if (!string.IsNullOrEmpty(SizesClause))
            {
                SizesClause = " AND SIZE_GROUP IN (" + SizesClause.Substring(0, Strings.Len(SizesClause) - 1) + ") ";
            }

            if (chkCalcNPCBPOs.Checked & chkCalcNPCBPOs.Enabled)
            {
                NPCBPOsClause = " AND NPC_BPO = 1 AND ITEM_TYPE = 1 "; // only include T1 BPOs
            }

            // Flag for favorites 
            if (rbtnCalcBPFavorites.Checked)
            {
                WhereClause = "WHERE FAVORITE = 1 AND ";
            }
            else
            {
                WhereClause = "WHERE ";
            }

            // Add all the items to the where clause
            WhereClause += RaceClause + " AND (" + ItemTypes + ") AND (((" + ItemTypeNumbers + ") " + T2Query + T3Query + "))" + SizesClause + ComboType + NPCBPOsClause + " ";

            // Finally add on text if they added it
            if (!string.IsNullOrEmpty(Strings.Trim(txtCalcItemFilter.Text)))
            {
                WhereClause += "AND " + Public_Variables.GetSearchText(txtCalcItemFilter.Text, "X.ITEM_NAME", "X.ITEM_GROUP");
            }

            // Only bps not ignored - no option for this yet
            WhereClause += " AND IGNORE = 0 ";

            return WhereClause;

        }

        // Checks data on different filters to see if we enter the item, and formats colors, etc. after
        private void InsertManufacturingItem(ManufacturingItem SentItem, double SVRThreshold, bool InsertBlankSVR, ref List<ManufacturingItem> SentList, ref List<RowFormat> FormatList)
        {
            var CurrentRowFormat = new RowFormat();
            bool InsertItem = true; // Assume we include until the record doesn't pass one condition
            ListIDIterator += 1;

            SentItem.ListID = ListIDIterator;

            // If not blank, does it meet the threshold? If nothing, then we want to include it, so skip
            if (SentItem.SVR != "-")
            {
                // It's below the threshold, so don't insert
                if (Conversions.ToDouble(SentItem.SVR) < SVRThreshold)
                {
                    InsertItem = false;
                }
            }

            // If it's empty and you don't want blank svr's, don't insert
            if (SentItem.SVR == "-" & !InsertBlankSVR)
            {
                InsertItem = false;
            }

            // Filter based on price trend first
            if (cmbCalcPriceTrend.Text == "Up")
            {
                // They want up trends and this is less than zero, so false
                if (SentItem.PriceTrend < 0d)
                {
                    InsertItem = false;
                }
            }
            else if (cmbCalcPriceTrend.Text == "Down")
            {
                // They want down trends and this is greater than zero, so false
                if (SentItem.PriceTrend > 0d)
                {
                    InsertItem = false;
                }
            }

            // Min Build time
            if (chkCalcMinBuildTimeFilter.Checked)
            {
                // If greater than max threshold, don't include
                if (Public_Variables.ConvertDHMSTimetoSeconds(SentItem.TotalProductionTime) < Public_Variables.ConvertDHMSTimetoSeconds(tpMinBuildTimeFilter.Text))
                {
                    InsertItem = false;
                }
            }

            // Max Build time
            if (chkCalcMaxBuildTimeFilter.Checked)
            {
                // If greater than max threshold, don't include
                if (Public_Variables.ConvertDHMSTimetoSeconds(SentItem.TotalProductionTime) > Public_Variables.ConvertDHMSTimetoSeconds(tpMaxBuildTimeFilter.Text))
                {
                    InsertItem = false;
                }
            }

            // IPH Threshold
            if (chkCalcIPHThreshold.Checked)
            {
                // If less than threshold, don't include
                if (SentItem.IPH < Conversions.ToDouble(txtCalcIPHThreshold.Text))
                {
                    InsertItem = false;
                }
            }

            // Profit Threshold
            if (chkCalcProfitThreshold.CheckState == CheckState.Checked)
            {
                // If less than threshold, don't include
                if (SentItem.Profit < Conversions.ToDouble(txtCalcProfitThreshold.Text))
                {
                    InsertItem = false;
                }
            }
            else if (chkCalcProfitThreshold.CheckState == CheckState.Indeterminate)
            {
                // Profit %
                if (SentItem.ProfitPercent < Public_Variables.CpctD(txtCalcProfitThreshold.Text))
                {
                    InsertItem = false;
                }
            }

            // Profit Threshold
            if (chkCalcVolumeThreshold.Checked)
            {
                // If less than threshold, don't include
                if (SentItem.TotalItemsSold < Conversions.ToDouble(txtCalcVolumeThreshold.Text))
                {
                    InsertItem = false;
                }
            }

            // Now determine the format of the item and save it for drawing the list - only if we add it
            if (InsertItem)
            {
                // Add the record
                SentList.Add((ManufacturingItem)SentItem.Clone());

                CurrentRowFormat.ListID = ListIDIterator;

                // Set the row format for background and foreground colors
                // All columns need to be colored properly
                // Color owned BP's
                if ((SentItem.Owned ?? "") == Public_Variables.Yes)
                {
                    if (SentItem.Scanned == 1 | SentItem.Scanned == 0)
                    {
                        CurrentRowFormat.BackColor = Brushes.BlanchedAlmond;
                    }
                    else if (SentItem.Scanned == 2)
                    {
                        // Corp owned
                        CurrentRowFormat.BackColor = Brushes.LightGreen;
                    }
                }
                else if (UserInventedBPs.Contains(SentItem.BPID))
                {
                    // It's an invented BP that we own the T1 BP for
                    CurrentRowFormat.BackColor = Brushes.LightSkyBlue;
                }
                else
                {
                    CurrentRowFormat.BackColor = Brushes.White;
                }

                // Set default and change if needed
                CurrentRowFormat.ForeColor = Brushes.Black;

                // Highlight those we can't build, RE or Invent
                if (!SentItem.CanBuildBP)
                {
                    CurrentRowFormat.ForeColor = Brushes.DarkRed;
                }

                if (!SentItem.CanInvent & SentItem.TechLevel == "T2" & SentItem.BlueprintType == Public_Variables.BPType.InventedBPC & !chkCalcIgnoreInvention.Checked)
                {
                    CurrentRowFormat.ForeColor = Brushes.DarkOrange;
                }

                if (!SentItem.CanRE & SentItem.TechLevel == "T3" & SentItem.BlueprintType == Public_Variables.BPType.InventedBPC & !chkCalcIgnoreInvention.Checked)
                {
                    CurrentRowFormat.ForeColor = Brushes.DarkGreen;
                }

                // Insert the format
                FormatList.Add(CurrentRowFormat);

            }

        }

        // Checks if the BP is T2 or T3 and we want to save it for determining the optimal calc for decryptors
        private void InsertDecryptorforOptimalCompare(ref Blueprint BP, ref string CalcType, ref int LocationID, ref List<OptimalDecryptorItem> OptimalList)
        {
            if (chkCalcDecryptor0.Checked)
            {
                var TempItem = new OptimalDecryptorItem();
                bool CompareIPH;

                if (chkCalcDecryptor0.Text.Contains("Profit"))
                {
                    CompareIPH = false;
                }
                else
                {
                    CompareIPH = true;
                }

                // Insert the record if it has a decryptor and T2/T3
                if (BP.GetTechLevel() == (int)Public_Variables.BPTechLevel.T2 & chkCalcDecryptorforT2.Checked | BP.GetTechLevel() == (int)Public_Variables.BPTechLevel.T3 & chkCalcDecryptorforT3.Checked)
                {
                    TempItem.CalcType = CalcType;
                    TempItem.ItemTypeID = BP.GetItemID();
                    TempItem.ListLocationID = LocationID;

                    if (CompareIPH)
                    {
                        if (CalcType != "Components")
                        {
                            TempItem.CompareValue = BP.GetTotalIskperHourRaw();
                        }
                        else
                        {
                            TempItem.CompareValue = BP.GetTotalIskperHourComponents();
                        }
                    }
                    else if (CalcType != "Components") // Profit
                    {
                        TempItem.CompareValue = BP.GetTotalRawProfit();
                    }
                    else
                    {
                        TempItem.CompareValue = BP.GetTotalComponentProfit();
                    }
                }

                OptimalList.Add(TempItem);

            }
        }

        // Reads optimal decryptor list and removes only but the most optimal decryptor from the item list
        private List<ManufacturingItem> SetOptimalDecryptorList(List<ManufacturingItem> ItemList, List<OptimalDecryptorItem> OptimalItemList)
        {
            var TempDecryptorItem = new OptimalDecryptorItem();
            var TempList = new List<OptimalDecryptorItem>();
            double CompareValue = 0d;
            int OptimalLocationID = 0;
            var RemoveLocations = new List<int>();

            if (OptimalItemList.Count != 0)
            {
                for (int i = 0, loopTo = ItemList.Count - 1; i <= loopTo; i++)
                {
                    // Get all the items in the decryptor list (if they exist)
                    DecryptorItemToFind.CalcType = ItemList[i].CalcType;
                    DecryptorItemToFind.ItemTypeID = ItemList[i].ItemTypeID;
                    // Find all the items
                    TempList = OptimalItemList.FindAll(FindDecryptorItem);
                    if (TempList is not null)
                    {
                        // Loop through each one and get the Location ID for the most optimal item
                        for (int j = 0, loopTo1 = TempList.Count - 1; j <= loopTo1; j++)
                        {
                            if (CompareValue == 0d | CompareValue <= TempList[j].CompareValue)
                            {
                                CompareValue = TempList[j].CompareValue;
                                // Save/reset the location for the optimal
                                OptimalLocationID = TempList[j].ListLocationID;
                            }
                        }

                        // Reset
                        CompareValue = 0d;

                        // Insert the location ID into the list to remove later
                        for (int j = 0, loopTo2 = TempList.Count - 1; j <= loopTo2; j++)
                        {
                            if (TempList[j].ListLocationID != OptimalLocationID)
                            {
                                // Remove this one
                                RemoveLocations.Add(TempList[j].ListLocationID);
                            }
                        }

                    }
                }

                // Finally, remove all the ID's in the remove list
                for (int i = 0, loopTo3 = RemoveLocations.Count - 1; i <= loopTo3; i++)
                {
                    ManufacturingRecordIDToFind = RemoveLocations[i];
                    ItemList.Remove(ItemList.Find(FindManufacturingItem));
                }
            }

            return ItemList;

        }

        private OptimalDecryptorItem DecryptorItemToFind;

        // Predicate for finding an in the list of decryptors
        private bool FindDecryptorItem(OptimalDecryptorItem Item)
        {
            if ((Item.CalcType ?? "") == (DecryptorItemToFind.CalcType ?? "") & Item.ItemTypeID == DecryptorItemToFind.ItemTypeID)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private void lstManufacturing_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            if (e.ColumnIndex == 0)
            {
                e.Cancel = true;
                e.NewWidth = lstPricesView.Columns[e.ColumnIndex].Width;
            }
        }

        // On double click of the item, it will open up the bp window with the item 
        private void lstManufacturing_DoubleClick(object sender, EventArgs e)
        {
            var FoundItem = new ManufacturingItem();
            string CompareType;

            // Find the item clicked in the list of items then just send those values over
            ManufacturingRecordIDToFind = Conversions.ToLong(lstManufacturing.SelectedItems[0].SubItems[0].Text);
            FoundItem = FinalManufacturingItemList.Find(FindManufacturingItem);

            // Set the build facility we are sending to the proper facility type for this item. 
            if (FoundItem is not null)
            {
                // We found it, so load the current bp
                if (rbtnCalcCompareAll.Checked | rbtnCalcCompareComponents.Checked | rbtnCalcCompareBuildBuy.Checked)
                {
                    CompareType = "Components";
                }
                else
                {
                    CompareType = "Raw";
                }

                BuildMatType T2T3Type;
                if (rbtnCalcAdvT2MatType.Checked)
                {
                    T2T3Type = BuildMatType.AdvMaterials;
                }
                else if (rbtnCalcProcT2MatType.Checked)
                {
                    T2T3Type = BuildMatType.ProcessedMaterials;
                }
                else if (rbtnCalcRawT2MatType.Checked)
                {
                    T2T3Type = BuildMatType.RawMaterials;
                }
                else
                {
                    T2T3Type = default;
                }

                LoadBPfromEvent(FoundItem.BPID, FoundItem.CalcType, FoundItem.Inputs, Public_Variables.SentFromLocation.ManufacturingTab, FoundItem.BuildFacility, FoundItem.ComponentManufacturingFacility, FoundItem.CapComponentManufacturingFacility, FoundItem.InventionFacility, FoundItem.CopyFacility, chkCalcTaxes.Checked, Public_Variables.GetBrokerFeeData(chkCalcFees, txtCalcBrokerFeeRate), FoundItem.BPME.ToString(), FoundItem.BPTE.ToString(), txtCalcRuns.Text, txtCalcProdLines.Text, txtCalcLabLines.Text, txtCalcNumBPs.Text, Strings.FormatNumber(FoundItem.AddlCosts, 2), chkCalcPPU.Checked, CompareType, T2T3Type);
            }

        }

        // The manufacturing item to load the grid
        public class ManufacturingItem : ICloneable
        {

            public int ListID; // Unique record id

            public Blueprint Blueprint; // The blueprint we used to make this item - for shopping list references

            public long BPID;
            public string ItemGroup;
            public int ItemGroupID;
            public string ItemCategory;
            public int ItemCategoryID;
            public long ItemTypeID;
            public string ItemName;
            public string TechLevel;
            public string Owned;
            public int Scanned;
            public int BPME;
            public int BPTE;
            public string Inputs;
            public double AddlCosts;
            public double Profit;
            public double ProfitPercent;
            public double IPH;
            public double MaterialCost;
            public double TotalCost;
            public string CalcType; // Type of calculation to get the profit - either Components, Raw Mats or Build/Buy
            public Public_Variables.BPType BlueprintType;

            public int Runs;
            public int SingleInventedBPCRunsperBPC;
            public int ProductionLines;
            public int LaboratoryLines;

            // Inputs
            public Decryptor Decryptor = new Decryptor();
            public string Relic;
            public int SavedBPRuns; // The number of runs on the bp that they have, helpful for determing decryptor and relics

            // Can do variables
            public bool CanBuildBP;
            public bool CanInvent;
            public bool CanRE;

            public string SVR; // Sales volume ratio
            public string SVRxIPH;
            public double PriceTrend;
            public long TotalItemsSold;
            public long TotalOrdersFilled;
            public double AvgItemsperOrder;
            public long CurrentSellOrders;
            public long CurrentBuyOrders;
            public int ItemsinStock;
            public int ItemsinProduction;

            public IndustryFacility BuildFacility;
            public double BuildFacilityUsage;
            public IndustryFacility ComponentManufacturingFacility;
            public double ComponentManufacturingFacilityUsage;
            public IndustryFacility CapComponentManufacturingFacility;
            public double CapComponentManufacturingFacilityUsage;
            public IndustryFacility ReactionFacility;
            public double ReactionFacilityUsage;

            public double CopyCost;
            public double CopyFacilityUsage;
            public IndustryFacility CopyFacility;

            public double InventionCost;
            public double InventionFacilityUsage;
            public IndustryFacility InventionFacility;

            public double ReprocessingFacilityUsage;
            public IndustryFacility ReprocessingFacility;

            public string BPProductionTime;
            public string TotalProductionTime;
            public string CopyTime;
            public string InventionTime;

            public double ItemMarketPrice;

            public double BrokerFees;
            public double Taxes;

            public double BaseJobCost;
            public int NumBPs;
            public double InventionChance;
            public string Race;
            public double VolumeperItem;
            public double TotalVolume;
            public int PortionSize;
            public int DivideUnits;

            public double SellExcess;
            public double ROI;

            public double JobFee;

            public object Clone()
            {
                var CopyofMe = new ManufacturingItem();

                CopyofMe.ListID = ListID;
                CopyofMe.Blueprint = Blueprint;
                CopyofMe.BPID = BPID;
                CopyofMe.ItemGroup = ItemGroup;
                CopyofMe.ItemGroupID = ItemGroupID;
                CopyofMe.ItemCategory = ItemCategory;
                CopyofMe.ItemCategoryID = ItemCategoryID;
                CopyofMe.ItemTypeID = ItemTypeID;
                CopyofMe.ItemName = ItemName;
                CopyofMe.TechLevel = TechLevel;
                CopyofMe.Owned = Owned;
                CopyofMe.Scanned = Scanned;
                CopyofMe.BPME = BPME;
                CopyofMe.BPTE = BPTE;
                CopyofMe.Inputs = Inputs;
                CopyofMe.AddlCosts = AddlCosts;
                CopyofMe.Profit = Profit;
                CopyofMe.ProfitPercent = ProfitPercent;
                CopyofMe.IPH = IPH;
                CopyofMe.TotalCost = TotalCost;
                CopyofMe.MaterialCost = MaterialCost;
                CopyofMe.CalcType = CalcType;
                CopyofMe.BlueprintType = BlueprintType;

                CopyofMe.Runs = Runs;
                CopyofMe.SingleInventedBPCRunsperBPC = SingleInventedBPCRunsperBPC;
                CopyofMe.ProductionLines = ProductionLines;
                CopyofMe.LaboratoryLines = LaboratoryLines;

                CopyofMe.CopyTime = CopyTime;
                CopyofMe.InventionTime = InventionTime;

                CopyofMe.Inputs = Inputs;
                CopyofMe.Decryptor = Decryptor;
                CopyofMe.Relic = Relic;
                CopyofMe.SavedBPRuns = SavedBPRuns;

                CopyofMe.CanBuildBP = CanBuildBP;
                CopyofMe.CanInvent = CanInvent;
                CopyofMe.CanRE = CanRE;

                CopyofMe.SVR = SVR;
                CopyofMe.SVRxIPH = SVRxIPH;
                CopyofMe.PriceTrend = PriceTrend;
                CopyofMe.TotalItemsSold = TotalItemsSold;
                CopyofMe.TotalOrdersFilled = TotalOrdersFilled;
                CopyofMe.AvgItemsperOrder = AvgItemsperOrder;
                CopyofMe.CurrentSellOrders = CurrentSellOrders;
                CopyofMe.CurrentBuyOrders = CurrentBuyOrders;
                CopyofMe.ItemsinStock = ItemsinStock;
                CopyofMe.ItemsinProduction = ItemsinProduction;

                CopyofMe.CopyCost = CopyCost;
                CopyofMe.InventionCost = InventionCost;

                CopyofMe.BuildFacility = BuildFacility;
                CopyofMe.ComponentManufacturingFacility = ComponentManufacturingFacility;
                CopyofMe.CapComponentManufacturingFacility = CapComponentManufacturingFacility;
                CopyofMe.ReactionFacility = ReactionFacility;
                CopyofMe.InventionFacility = InventionFacility;
                CopyofMe.CopyFacility = CopyFacility;
                CopyofMe.ReprocessingFacility = ReprocessingFacility;

                CopyofMe.BPProductionTime = BPProductionTime;
                CopyofMe.TotalProductionTime = TotalProductionTime;
                CopyofMe.ItemMarketPrice = ItemMarketPrice;
                CopyofMe.BrokerFees = BrokerFees;
                CopyofMe.Taxes = Taxes;
                CopyofMe.BaseJobCost = BaseJobCost;

                CopyofMe.NumBPs = NumBPs;
                CopyofMe.InventionChance = InventionChance;
                CopyofMe.BlueprintType = BlueprintType;
                CopyofMe.Race = Race;
                CopyofMe.VolumeperItem = VolumeperItem;
                CopyofMe.TotalVolume = TotalVolume;
                CopyofMe.PortionSize = PortionSize;
                CopyofMe.DivideUnits = DivideUnits;
                CopyofMe.SellExcess = SellExcess;
                CopyofMe.ROI = ROI;

                CopyofMe.JobFee = JobFee;

                CopyofMe.BuildFacilityUsage = BuildFacilityUsage;
                CopyofMe.ComponentManufacturingFacilityUsage = ComponentManufacturingFacilityUsage;
                CopyofMe.CapComponentManufacturingFacilityUsage = CapComponentManufacturingFacilityUsage;
                CopyofMe.ReactionFacilityUsage = ReactionFacilityUsage;
                CopyofMe.CopyFacilityUsage = CopyFacilityUsage;
                CopyofMe.InventionFacilityUsage = InventionFacilityUsage;
                CopyofMe.ReprocessingFacilityUsage = ReprocessingFacilityUsage;

                return CopyofMe;

            }

        }

        // Predicate for finding an item in a list EVE Market Data of items
        private bool FindManufacturingItem(ManufacturingItem Item)
        {
            if (Item.ListID == ManufacturingRecordIDToFind)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        // Predicate for finding an item in a list EVE Market Data of items
        private bool FindManufacturingItembyName(ManufacturingItem Item)
        {
            if ((Item.ItemName ?? "") == (ManufacturingNameToFind ?? ""))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        // Calculates the slope of the trend line for the market history for the sent type id for the last x days sent
        // Formula and logic from here: http://classroom.synonym.com/calculate-trendline-2709.html
        private double CalculatePriceTrend(long TypeID, long RegionID, int DaysfromToday)
        {
            string SQL;
            SQLiteDataReader rsMarketHistory;
            var GraphData = new List<EVEIPHPricePoint>();
            int counter = 0;

            double n_value = 0d; // Let n = the number of data points, in this case 3
            double a_value = 0d;
            double b_value = 0d;
            double c_value = 0d;
            double d_value = 0d;
            double e_value = 0d;
            double f_value = 0d;

            double x_sum = 0d;
            double x_squared = 0d;
            double y_sum = 0d;

            double slope = 0d;
            double y_intercept = 0d;

            double AdjustPrice = 0d;

            // Average price is the Y values, dates (or just days) is the x value

            // Now get all the prices for the time period
            SQL = "SELECT PRICE_HISTORY_DATE, AVG_PRICE FROM MARKET_HISTORY WHERE TYPE_ID = " + TypeID.ToString() + " AND REGION_ID = " + RegionID.ToString() + " ";
            SQL += "AND DATETIME(PRICE_HISTORY_DATE) >= " + " DateTime('" + Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -(DaysfromToday + 1), DateTime.UtcNow.Date), Public_Variables.SQLiteDateFormat) + "') ";
            SQL += "AND DATETIME(PRICE_HISTORY_DATE) < " + " DateTime('" + Strings.Format(DateTime.UtcNow.Date, Public_Variables.SQLiteDateFormat) + "') ";
            SQL += "ORDER BY PRICE_HISTORY_DATE ASC";
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsMarketHistory = Public_Variables.DBCommand.ExecuteReader();

            while (rsMarketHistory.Read())
            {
                EVEIPHPricePoint TempPoint;
                counter += 1;
                TempPoint.PointDate = rsMarketHistory.GetDateTime(0);
                TempPoint.X_Date_Marker = counter;
                if (counter == 1)
                {
                    // Save the base value and then reduce from all other prices
                    AdjustPrice = rsMarketHistory.GetDouble(1);
                    TempPoint.Y_Price = rsMarketHistory.GetDouble(1);
                }
                else
                {
                    TempPoint.Y_Price = rsMarketHistory.GetDouble(1);
                }

                // Since we are looping through the data, just do the summation calcs now
                a_value += counter * TempPoint.Y_Price;
                // Grab the sum here too
                y_sum += TempPoint.Y_Price;
                x_sum += TempPoint.X_Date_Marker;
                x_squared += Math.Pow(TempPoint.X_Date_Marker, 2d);

                GraphData.Add(TempPoint);
            }

            rsMarketHistory.Close();

            // Set the n_value from the loop
            if (counter <= 1)
            {
                // If it's 0 or 1, then we can't do a slope calculation 
                return 0d;
            }
            else
            {
                n_value = counter;
            }

            // Now we have all the data to do the calculations

            // Calculate a
            // Let a equal n times the summation of all x-values multiplied by their corresponding y-values, like so: a = 3 x {(1 x 3) +( 2 x 5) + (3 x 6.5)} = 97.5
            // Use previous calc value and multiply by n
            a_value = a_value * n_value;

            // Calculate b
            // Let b equal the sum of all x-values times the sum of all y-values, like so: b = (1 + 2 + 3) x (3 + 5 + 6.5) = 87
            // Use x_sum and y_sum from earlier and calculate b
            b_value = x_sum * y_sum;

            // Calculate c
            // Let c equal n times the sum of all squared x-values, like so: c = 3 x (1^2 + 2^2 + 3^2) = 42
            c_value = n_value * x_squared;

            // Calculate d
            // Let d equal the squared sum of all x-values, like so: d = (1 + 2 + 3)^2 = 36
            d_value = Math.Pow(x_sum, 2d);

            // Calculate the slope
            // Plug the values that you calculated for a, b, c, and d into the following equation to calculate the slope, m, of the regression line: 
            // slope = m = (a - b) / (c - d) = (97.5 - 87) / (42 - 36) = 10.5 / 6 = 1.75
            slope = (a_value - b_value) / (c_value - d_value);

            // Now find the intercepts so we can normalize the slope value
            // Consider the same data set. Let e equal the sum of all y-values, like so: e = (3 + 5 + 6.5) = 14.5
            e_value = y_sum;

            // Let f equal the slope times the sum of all x-values, like so: f = 1.75 x (1 + 2 + 3) = 10.5
            f_value = slope * x_sum;

            // Calculate the y-intercept
            // Plug the values you have calculated for e and f into the following equation for the y-intercept, b, of the trendline: 
            // y-intercept = b = (e - f) / n = (14.5 - 10.5) / 3 = 1.3)
            y_intercept = (e_value - f_value) / n_value;

            // Now that we have all the parts of y = mx + b, normalize the trendline to a percentage change value
            // First figure out the value today (the start value is the y-intercept)
            double TodaysTrendLinePrice = slope * n_value + y_intercept;
            // y = 50,098.90x - 1,518,343.83
            double trend = (TodaysTrendLinePrice - y_intercept) / TodaysTrendLinePrice;
            return trend;

        }

        public struct EVEIPHPricePoint
        {
            public DateTime PointDate;
            public int X_Date_Marker; // simplifies code for dates
            public double Y_Price; // price value
        }

        #region List Options Menu

        private void ListOptionsMenu_Opening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            // If we have one line selected, then allow both options, if more than one line don't allow the market history to be selected
            if (lstManufacturing.SelectedItems.Count > 1)
            {
                ViewMarketHistoryToolStripMenuItem.Enabled = false;
            }
            else
            {
                ViewMarketHistoryToolStripMenuItem.Enabled = true;
            }
        }

        // Allows users to ignore one or more blueprints from the manufacturing tab
        private void IgnoreBlueprintToolStripMenuItem_Click(object sender, EventArgs e)
        {

            if (lstManufacturing.Items.Count > 0)
            {
                var FoundItem = new ManufacturingItem();
                string SQL;
                var RemovedIDs = new List<int>();

                // Find the each item selected in the list of items then remove each one from the list
                for (int i = 0, loopTo = lstManufacturing.SelectedItems.Count - 1; i <= loopTo; i++)
                {
                    ManufacturingRecordIDToFind = Conversions.ToLong(lstManufacturing.SelectedItems[i].SubItems[0].Text);
                    FoundItem = FinalManufacturingItemList.Find(FindManufacturingItem);

                    if (FoundItem is not null)
                    {
                        var ListIDstoRemove = new List<int>();

                        // We found it, so set the bp to ignore
                        {
                            ref var withBlock = ref FoundItem;
                            SQL = "UPDATE ALL_BLUEPRINTS_FACT SET IGNORE = 1 WHERE BLUEPRINT_ID = " + FoundItem.BPID.ToString();
                            Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                            // Remove the item from the list in all it's forms plus from the manufacturing list
                            // Get all the items with the name to remove
                            ManufacturingNameToFind = FoundItem.ItemName;
                            FoundItem = null;

                            do
                            {
                                FoundItem = FinalManufacturingItemList.Find(FindManufacturingItembyName);
                                if (FoundItem is not null)
                                {
                                    // Remove it
                                    FinalManufacturingItemList.Remove(FoundItem);
                                    RemovedIDs.Add(FoundItem.ListID);
                                }
                            }
                            while (!(FoundItem is null));

                        }
                    }
                }

                // Now remove all BPs we got rid of from the list
                lstManufacturing.BeginUpdate();
                int ListCount = lstManufacturing.Items.Count;
                int j = 0;
                while (j < ListCount)
                {
                    if (RemovedIDs.Contains(Conversions.ToInteger(lstManufacturing.Items[j].SubItems[0].Text)))
                    {
                        // Add the indicies to remove
                        lstManufacturing.Items[j].Remove();
                        ListCount -= 1;
                        j -= 1; // make sure we reset since we just removed a line
                    }
                    j += 1;
                }

                lstManufacturing.EndUpdate();

                Public_Variables.PlayNotifySound();
            }
        }

        private void FavoriteBlueprintToolStripMenuItem_Click(object sender, EventArgs e)
        {

            if (lstManufacturing.Items.Count > 0)
            {
                var FoundItem = new ManufacturingItem();
                string SQL;

                // Find the each item selected in the list of items then remove each one from the list
                for (int i = 0, loopTo = lstManufacturing.SelectedItems.Count - 1; i <= loopTo; i++)
                {
                    ManufacturingRecordIDToFind = Conversions.ToLong(lstManufacturing.SelectedItems[i].SubItems[0].Text);
                    FoundItem = FinalManufacturingItemList.Find(FindManufacturingItem);

                    if (FoundItem is not null)
                    {
                        // We found it, so set the bp to a favorite in all_blueprints
                        SQL = "UPDATE ALL_BLUEPRINTS_FACT SET FAVORITE = 1 WHERE BLUEPRINT_ID = " + FoundItem.BPID.ToString();
                        Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                        // Assume they want to update owned blueprints too if they own it
                        SQL = "UPDATE OWNED_BLUEPRINTS SET FAVORITE = 1 WHERE BLUEPRINT_ID = " + FoundItem.BPID.ToString() + " AND USER_ID = " + Public_Variables.SelectedCharacter.ID.ToString();
                        Public_Variables.EVEDB.ExecuteNonQuerySQL(SQL);

                    }
                }

                Public_Variables.PlayNotifySound();

            }

        }

        // Gets the typeID and other data to open up the market history viewer
        private void ViewMarketHistoryToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var FoundItem = new ManufacturingItem();
            long RegionID;

            // Find the item clicked in the list of items by looking up the row number stored in the hidden column
            if (lstManufacturing.Items.Count > 0 & lstManufacturing.SelectedItems.Count > 0)
            {
                ManufacturingRecordIDToFind = Conversions.ToLong(lstManufacturing.SelectedItems[0].SubItems[0].Text);
                FoundItem = FinalManufacturingItemList.Find(FindManufacturingItem);

                if (FoundItem is not null)
                {
                    // Get the region ID
                    RegionID = Public_Variables.GetRegionID(cmbCalcHistoryRegion.Text);
                    if (RegionID == 0L)
                    {
                        RegionID = Public_Variables.TheForgeTypeID;
                    }
                    Interaction.MsgBox("Removed Market history Viewer", Constants.vbInformation, Application.ProductName);
                }

                else
                {
                    Interaction.MsgBox("Unable to find item data for history", Constants.vbInformation, Application.ProductName);
                }
            }
        }

        // Adds one or multiple items to the shopping list from the manufacturing tab
        private void AddToShoppingListToolStripMenuItem_Click(object sender, EventArgs e)
        {

            if (lstManufacturing.Items.Count > 0)
            {
                var FoundItem = new ManufacturingItem();

                // Find the each item selected in the list of items then remove each one from the list
                var BuildBuy = default(bool);
                for (int i = 0, loopTo = lstManufacturing.SelectedItems.Count - 1; i <= loopTo; i++)
                {

                    // Find the item clicked in the list of items then just send those values over
                    ManufacturingRecordIDToFind = Conversions.ToLong(lstManufacturing.SelectedItems[i].SubItems[0].Text);
                    FoundItem = FinalManufacturingItemList.Find(FindManufacturingItem);

                    // Add it to shopping list
                    if (FoundItem is not null)
                    {
                        bool CopyRaw;

                        if (FoundItem.CalcType == "Build/Buy")
                        {
                            BuildBuy = true;
                        }

                        if (FoundItem.CalcType == "Raw Materials" | BuildBuy == true)
                        {
                            CopyRaw = true;
                        }
                        else
                        {
                            CopyRaw = false;
                        }

                        // Get the BP variable and send the other settings to shopping list
                        if (!(FoundItem.Blueprint == null))
                        {
                            Public_Variables.AddToShoppingList(FoundItem.Blueprint, BuildBuy, CopyRaw, BPTabFacility.GetFacility(BPTabFacility.GetCurrentFacilityProductionType()), chkBPIgnoreInvention.Checked, chkBPIgnoreMinerals.Checked, chkBPIgnoreT1Item.Checked, rbtnBPCopyInvREMats.Checked);
                        }
                        else
                        {
                            Interaction.MsgBox("You must calculate an item before adding it to the shopping list.", MsgBoxStyle.Information, Application.ProductName);
                            return;
                        }
                    }
                }
            }

            if (Public_Variables.TotalShoppingList.GetNumShoppingItems() > 0L)
            {
                // Add the final item and mark as items in list
                pnlShoppingList.Text = "Items in Shopping List";
                pnlShoppingList.ForeColor = Color.Red;
            }
            else
            {
                pnlShoppingList.Text = "No Items in Shopping List";
                pnlShoppingList.ForeColor = Color.Black;
            }

            // Refresh the data if it's open
            if (Public_Variables.frmShop.Visible)
            {
                Public_Variables.frmShop.RefreshLists();
            }

        }

        #endregion

        #endregion

        #region Datacores

        #region Datacores Tab User Object (Check boxes, Text, Buttons) Functions/Procedures 

        private void CorpCheckBoxOnClickLabel(int index)
        {
            if (DCCorpCheckBoxes[index].Checked)
            {
                DCCorpCheckBoxes[index].Checked = false;
            }
            else
            {
                DCCorpCheckBoxes[index].Checked = true;
            }
        }

        private void CoreCheckBoxOnClickLabel(int index)
        {
            if (DCSkillCheckBoxes[index].Checked)
            {
                DCSkillCheckBoxes[index].Checked = false;
            }
            else
            {
                DCSkillCheckBoxes[index].Checked = true;
            }
        }

        private void lblDCCorp1_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(1);
        }

        private void lblDCCorp2_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(2);
        }

        private void lblDCCorp3_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(3);
        }

        private void lblDCCorp4_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(4);
        }

        private void lblDCCorp5_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(5);
        }

        private void lblDCCorp6_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(6);
        }

        private void lblDCCorp7_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(7);
        }

        private void lblDCCorp8_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(8);
        }

        private void lblDCCorp9_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(9);
        }

        private void lblDCCorp10_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(10);
        }

        private void lblDCCorp11_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(11);
        }

        private void lblDCCorp12_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(12);
        }

        private void lblDCCorp13_Click(object sender, EventArgs e)
        {
            CorpCheckBoxOnClickLabel(13);
        }

        private void lblDatacore1_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(1);
        }

        private void lblDatacore2_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(2);
        }

        private void lblDatacore3_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(3);
        }

        private void lblDatacore4_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(4);
        }

        private void lblDatacore5_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(5);
        }

        private void lblDatacore6_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(6);
        }

        private void lblDatacore7_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(7);
        }

        private void lblDatacore8_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(8);
        }

        private void lblDatacore9_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(9);
        }

        private void lblDatacore10_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(10);
        }

        private void lblDatacore11_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(11);
        }

        private void lblDatacore12_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(12);
        }

        private void lblDatacore13_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(13);
        }

        private void lblDatacore14_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(14);
        }

        private void lblDatacore15_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(15);
        }

        private void lblDatacore16_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(16);
        }

        private void lblDatacore17_Click(object sender, EventArgs e)
        {
            CoreCheckBoxOnClickLabel(17);
        }

        private void lstDC_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            int TotalAgents = Conversions.ToInteger(cmbDCResearchMgmt.Text) + 1;

            if (TotalAgents == lstDC.CheckedItems.Count & e.NewValue == CheckState.Checked)
            {
                // Change to unchecked
                e.NewValue = CheckState.Unchecked;
            }

        }

        private void lstDC_ItemChecked(object sender, ItemCheckedEventArgs e)
        {

            // Item was checked so add up the total iph
            if (e.Item.Checked)
            {
                // Add the value 
                TotalSelectedIPH = TotalSelectedIPH + Conversions.ToDouble(e.Item.SubItems[DCIPH_COLUMN].Text);
            }
            else if (!e.Item.Checked)
            {
                if (lstDC.CheckedItems.Count == 0)
                {
                    // Reset if last one checked
                    TotalSelectedIPH = 0d;
                }
                else
                {
                    // Subtract the amount
                    TotalSelectedIPH = TotalSelectedIPH - Conversions.ToDouble(e.Item.SubItems[DCIPH_COLUMN].Text);
                }
            }

            txtDCTotalSelectedIPH.Text = Strings.FormatNumber(TotalSelectedIPH, 2);

        }

        private void cmbDCConnections_SelectedIndexChanged(object sender, EventArgs e)
        {
            LoadDCCorpStandings(false);
        }

        private void chkDC1_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC2_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC3_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC4_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC5_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC6_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC7_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC8_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC9_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC10_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC11_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC12_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC13_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC14_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC15_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC16_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDC17_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCSkillChecks(sender);
        }

        private void chkDCCorp1_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp2_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp3_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp4_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp5_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp6_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp7_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp8_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp9_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp10_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp11_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp12_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void chkDCCorp13_CheckedChanged(object sender, EventArgs e)
        {
            EnableDCCorpTexts(sender);
        }

        private void EnableDCSkillChecks(object sender)
        {
            int i;
            CheckBox cbox;

            cbox = (CheckBox)sender;

            if (!FirstShowDatacores)
            {
                var loopTo = DCSkillCheckBoxes.Count() - 1;
                for (i = 1; i <= loopTo; i++)
                {
                    if ((cbox.Name ?? "") == (DCSkillCheckBoxes[i].Name ?? ""))
                    {
                        if (cbox.Checked)
                        {
                            DCSkillCombos[i].Enabled = true;
                        }
                        else
                        {
                            DCSkillCombos[i].Enabled = false;
                        }

                    }
                }
            }
        }

        private void EnableDCCorpTexts(object sender)
        {
            int i;
            CheckBox cbox;

            cbox = (CheckBox)sender;

            if (!FirstShowDatacores)
            {
                var loopTo = DCCorpCheckBoxes.Count() - 1;
                for (i = 1; i <= loopTo; i++)
                {
                    if ((cbox.Name ?? "") == (DCCorpCheckBoxes[i].Name ?? ""))
                    {
                        if (cbox.Checked)
                        {
                            DCCorpTextboxes[i].Enabled = true;
                        }
                        else
                        {
                            DCCorpTextboxes[i].Enabled = false;
                        }

                    }
                }
            }
        }

        private void btnDCReset_Click(object sender, EventArgs e)
        {
            LoadDatacoreTab();
        }

        private void lstDC_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            var argRefListView = lstDC;
            Public_Variables.ListViewColumnSorter(e.Column, ref argRefListView, ref DCColumnClicked, ref DCColumnSortType);
            lstDC = argRefListView;
        }

        #endregion

        public struct DCAgent
        {
            public string Faction;
            public double FactionStanding;
            public string Corporation;
            public double CorporationStanding;
            public string Agent;
            public double AgentStanding;
            public int AgentLevel;
            // Dim AgentQuality As Integer *** Removed on 19 May 2011 ***
            public string AgentLocation; // System name + security
            public long DataCoreID;
            public string DataCoreSkill;
            public int DataCoreSkillLevel;
            public double DataCorePrice;
            public string PriceFrom;
            public double RPperDay;
            public double CoresPerDay;
            public double IskPerHour;
            // Location ID's
            public long SystemID;
            public double SystemSecurity;
            public long RegionID;

            public bool AgentAvailable;

        }

        private void InitDatacoreTab()
        {
            // Reload screen when called
            LoadDatacoreTab();
        }

        // Loads the datacore skills into the Datacore screen
        private void LoadDatacoreTab()
        {
            int i;
            int TempSkillLevel;
            var Settings = new ProgramSettings();

            // Load the datacore skills first
            var loopTo = DCSkillLabels.Count() - 1;
            for (i = 1; i <= loopTo; i++)
            {
                TempSkillLevel = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(Public_Variables.SelectedCharacter.Skills.GetSkillTypeID(DCSkillLabels[i].Text));

                // Check based on default
                if (SettingsVariables.UserDCTabSettings.SkillsChecked[i - 1] == Settings.DefaultSkillLevelChecked)
                {
                    if (TempSkillLevel != 0)
                    {
                        // Check
                        DCSkillCheckBoxes[i].Checked = true;
                        DCSkillCombos[i].Enabled = true;
                    }
                    else
                    {
                        DCSkillCombos[i].Text = "1";
                        DCSkillCheckBoxes[i].Checked = false;
                        DCSkillCombos[i].Enabled = false;
                    }
                }
                else // use what they saved
                {
                    DCSkillCombos[i].Text = "1";
                    DCSkillCheckBoxes[i].Checked = Conversions.ToBoolean(SettingsVariables.UserDCTabSettings.SkillsChecked[i - 1]);
                    DCSkillCombos[i].Enabled = Conversions.ToBoolean(SettingsVariables.UserDCTabSettings.SkillsChecked[i - 1]);
                }

                // Use the default or use what they saved
                if (SettingsVariables.UserDCTabSettings.SkillsLevel[i - 1] == Settings.DefaultSkillLevel)
                {
                    DCSkillCombos[i].Text = TempSkillLevel.ToString();
                }
                else // use what they saved
                {
                    DCSkillCombos[i].Text = SettingsVariables.UserDCTabSettings.SkillsLevel[i - 1].ToString();
                }

            }

            // Load the connections and negotiation skill. If default, then load skills else use what they set
            if (SettingsVariables.UserDCTabSettings.Connections == Settings.DefaultConnections)
            {
                cmbDCConnections.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(3359L).ToString();
            }
            else
            {
                cmbDCConnections.Text = SettingsVariables.UserDCTabSettings.Connections.ToString();
            }

            if (SettingsVariables.UserDCTabSettings.Negotiation == Settings.DefaultNegotiation)
            {
                cmbDCNegotiation.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(3356L).ToString();
            }
            else
            {
                cmbDCNegotiation.Text = SettingsVariables.UserDCTabSettings.Negotiation.ToString();
            }

            if (SettingsVariables.UserDCTabSettings.ResearchProjectMgt == Settings.DefaultResearchProjMgt)
            {
                cmbDCResearchMgmt.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(12179L).ToString();
            }
            else
            {
                cmbDCResearchMgmt.Text = SettingsVariables.UserDCTabSettings.ResearchProjectMgt.ToString();
            }

            // Load the corp standing text boxes
            LoadDCCorpStandings();

            // Check the Corporation Standings boxes if not 0
            var loopTo1 = DCCorpLabels.Count() - 1;
            for (i = 1; i <= loopTo1; i++)
            {
                if (DCCorpTextboxes[i].Text != "0.00")
                {
                    DCCorpCheckBoxes[i].Checked = true;
                    DCCorpTextboxes[i].Enabled = true;
                }
                else
                {
                    DCCorpCheckBoxes[i].Checked = false;
                    DCCorpTextboxes[i].Enabled = false;
                }
            }

            switch (SettingsVariables.UserDCTabSettings.PricesFrom ?? "")
            {
                case var @case when @case == (rbtnDCUpdatedPrices.Text ?? ""):
                    {
                        rbtnDCUpdatedPrices.Checked = true;
                        break;
                    }
                case var case1 when case1 == (rbtnDCRegionPrices.Text ?? ""):
                    {
                        rbtnDCRegionPrices.Checked = true;
                        break;
                    }
                case var case2 when case2 == (rbtnDCSystemPrices.Text ?? ""):
                    {
                        rbtnDCSystemPrices.Checked = true;
                        break;
                    }
            }

            chkDCHighSecAgents.Checked = SettingsVariables.UserDCTabSettings.CheckHighSecAgents;
            chkDCLowSecAgents.Checked = SettingsVariables.UserDCTabSettings.CheckLowNullSecAgents;
            chkDCIncludeAllAgents.Checked = SettingsVariables.UserDCTabSettings.CheckIncludeAgentsCannotAccess;

            // Sov checks
            chkDCAmarrSov.Checked = SettingsVariables.UserDCTabSettings.CheckSovAmarr;
            chkDCAmmatarSov.Checked = SettingsVariables.UserDCTabSettings.CheckSovAmmatar;
            chkDCCaldariSov.Checked = SettingsVariables.UserDCTabSettings.CheckSovCaldari;
            chkDCGallenteSov.Checked = SettingsVariables.UserDCTabSettings.CheckSovGallente;
            chkDCKhanidSov.Checked = SettingsVariables.UserDCTabSettings.CheckSovKhanid;
            chkDCMinmatarSov.Checked = SettingsVariables.UserDCTabSettings.CheckSovMinmatar;
            chkDCSyndicateSov.Checked = SettingsVariables.UserDCTabSettings.CheckSovSyndicate;
            chkDCThukkerSov.Checked = SettingsVariables.UserDCTabSettings.CheckSovThukker;

            DCColumnClicked = SettingsVariables.UserDCTabSettings.ColumnSort;
            if (SettingsVariables.UserDCTabSettings.ColumnSortType == "Ascending")
            {
                DCColumnSortType = SortOrder.Ascending;
            }
            else
            {
                DCColumnSortType = SortOrder.Descending;
            }

            cmbDCRegions.Text = SettingsVariables.UserDCTabSettings.AgentsInRegion;

        }

        private void btnDCSaveSettings_Click(object sender, EventArgs e)
        {
            DataCoreTabSettings TempSettings = default;
            var Settings = new ProgramSettings();
            int TempSkill;
            double TempStanding;

            TempSettings.SkillsLevel = new int[Settings.NumberofDCSettingsSkillRecords + 1];
            TempSettings.SkillsChecked = new int[Settings.NumberofDCSettingsSkillRecords + 1];
            TempSettings.CorpsStanding = new double[Settings.NumberofDCSettingsCorpRecords + 1];
            TempSettings.CorpsChecked = new int[Settings.NumberofDCSettingsCorpRecords + 1];

            if (rbtnDCUpdatedPrices.Checked == true)
            {
                TempSettings.PricesFrom = rbtnDCUpdatedPrices.Text;
            }
            else if (rbtnDCRegionPrices.Checked == true)
            {
                TempSettings.PricesFrom = rbtnDCRegionPrices.Text;
            }
            else if (rbtnDCSystemPrices.Checked == true)
            {
                TempSettings.PricesFrom = rbtnDCSystemPrices.Text;
            }

            TempSettings.CheckHighSecAgents = chkDCHighSecAgents.Checked;
            TempSettings.CheckLowNullSecAgents = chkDCLowSecAgents.Checked;
            TempSettings.CheckIncludeAgentsCannotAccess = chkDCIncludeAllAgents.Checked;

            TempSettings.CheckSovAmarr = chkDCAmarrSov.Checked;
            TempSettings.CheckSovAmmatar = chkDCAmmatarSov.Checked;
            TempSettings.CheckSovCaldari = chkDCCaldariSov.Checked;
            TempSettings.CheckSovGallente = chkDCGallenteSov.Checked;
            TempSettings.CheckSovKhanid = chkDCKhanidSov.Checked;
            TempSettings.CheckSovMinmatar = chkDCMinmatarSov.Checked;
            TempSettings.CheckSovSyndicate = chkDCSyndicateSov.Checked;
            TempSettings.CheckSovThukker = chkDCThukkerSov.Checked;

            TempSettings.AgentsInRegion = cmbDCRegions.Text;

            // Save skills
            for (int i = 1, loopTo = DCSkillCheckBoxes.Count() - 1; i <= loopTo; i++)
            {
                TempSkill = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(Public_Variables.SelectedCharacter.Skills.GetSkillTypeID(DCSkillLabels[i].Text));

                // Only save if they don't have the skill and have checked it or have it and unchecked it
                if (TempSkill == 0 & DCSkillCheckBoxes[i].Checked == false | TempSkill != 0 & DCSkillCheckBoxes[i].Checked == true)
                {
                    // Save as default
                    TempSettings.SkillsChecked[i - 1] = Settings.DefaultSkillLevelChecked;
                }
                else
                {
                    // Got a value
                    TempSettings.SkillsChecked[i - 1] = Conversions.ToInteger(DCSkillCheckBoxes[i].Checked);
                }

                // If the skill level they have is the same as the skill of the character, then just save as default
                if (Conversions.ToInteger(DCSkillCombos[i].Text) == TempSkill)
                {
                    TempSettings.SkillsLevel[i - 1] = Settings.DefaultSkillLevel;
                }
                else
                {
                    TempSettings.SkillsLevel[i - 1] = Conversions.ToInteger(DCSkillCombos[i].Text);
                }
            }

            // Save Corp Standings
            for (int i = 1, loopTo1 = DCCorpCheckBoxes.Count() - 1; i <= loopTo1; i++)
            {
                TempStanding = Conversions.ToDouble(Strings.FormatNumber(Public_Variables.SelectedCharacter.Standings.GetEffectiveStanding(DCCorpLabels[i].Text, Conversions.ToInteger(cmbDCConnections.Text), Public_Variables.SelectedCharacter.Skills.GetSkillLevel(3357L)), 2));

                // Only save if they don't have the standing and it's checked or they have it and unchecked
                if (TempStanding == 0d & DCCorpCheckBoxes[i].Checked == false | TempStanding != 0d & DCCorpCheckBoxes[i].Checked == true)
                {
                    TempSettings.CorpsChecked[i - 1] = Settings.DefaultCorpStandingChecked;
                }
                else
                {
                    TempSettings.CorpsChecked[i - 1] = Conversions.ToInteger(DCCorpCheckBoxes[i].Checked);
                }

                // If SetWindowTheme standing level they have is the same as the standing on the characters, just save as default
                if (Conversions.ToDouble(DCCorpTextboxes[i].Text) == TempStanding)
                {
                    TempSettings.CorpsStanding[i - 1] = Settings.DefaultCorpStanding;
                }
                else
                {
                    TempSettings.CorpsStanding[i - 1] = Conversions.ToDouble(DCCorpTextboxes[i].Text);
                }
            }

            // Three main skills, only save if they aren't the same as the character
            if ((cmbDCConnections.Text ?? "") == (Public_Variables.SelectedCharacter.Skills.GetSkillLevel(3359L).ToString() ?? ""))
            {
                TempSettings.Connections = Settings.DefaultConnections;
            }
            else
            {
                TempSettings.Connections = Conversions.ToInteger(cmbDCConnections.Text);
            }

            if ((cmbDCNegotiation.Text ?? "") == (Public_Variables.SelectedCharacter.Skills.GetSkillLevel(3356L).ToString() ?? ""))
            {
                TempSettings.Negotiation = Settings.DefaultNegotiation;
            }
            else
            {
                TempSettings.Negotiation = Conversions.ToInteger(cmbDCNegotiation.Text);
            }

            if ((cmbDCResearchMgmt.Text ?? "") == (Public_Variables.SelectedCharacter.Skills.GetSkillLevel(12179L).ToString() ?? ""))
            {
                TempSettings.ResearchProjectMgt = Settings.DefaultResearchProjMgt;
            }
            else
            {
                TempSettings.ResearchProjectMgt = Conversions.ToInteger(cmbDCResearchMgmt.Text);
            }

            TempSettings.ColumnSort = DCColumnClicked;

            if (DCColumnSortType == SortOrder.Ascending)
            {
                TempSettings.ColumnSortType = "Ascending";
            }
            else
            {
                TempSettings.ColumnSortType = "Decending";
            }

            // Save the data in the XML file
            Settings.SaveDatacoreSettings(TempSettings);

            // Save the data to the local variable
            SettingsVariables.UserDCTabSettings = TempSettings;

            Interaction.MsgBox("Settings Saved", Constants.vbInformation, Application.ProductName);

        }

        // Refresh's the tab with agents
        private void btnDCRefresh_Click(object sender, EventArgs e)
        {
            int i;
            var j = default(int); // for highlighting top number of agents the user can use
            string[] UniqueAgentList;
            double TotalIPH = 0d; // For storing the total IPH for the top agents used
            string SQL;
            int NegotationSkill = Conversions.ToInteger(cmbDCNegotiation.Text);
            int ConnectionsSkill = Conversions.ToInteger(cmbDCConnections.Text);
            int TotalRDAgents = Conversions.ToInteger(cmbDCResearchMgmt.Text) + 1;
            string ResearchTypeList = "('";
            string CorporationList = "('";
            string SystemSecurityCheck = "";

            SQLiteDataReader readerDC;
            SQLiteDataReader readerDC2;
            int readerRecordCount;

            var DCAgentList = new List<DCAgent>();
            var TempDCAgentList = new List<DCAgent>();
            DCAgent DCAgentRecord;

            // Price Updates
            var TypeIDs = new List<PriceItem>();
            PriceItem TempItem = null;
            var DCTypeIDList = new List<PriceItem>();
            var DCSystemList = new List<string>();
            var DCRegionList = new List<string>();

            ListViewItem lstDCViewRow;
            bool CanUseAgent;
            int CoreSkillLevel;
            string FactionString = "";

            // Standings
            double BaseAgentStanding;
            double BaseFactionStanding;
            double AgentStanding;
            double AgentEffectiveStanding;
            double CorpStanding;
            double FactionStanding;
            var ReqStanding = default(double);
            double ReqCorpStanding;

            int AgentLevel;
            int Diplomacy;
            double RPPerDay;
            // Dim Multiplier As Integer ' Removed with Inferno 5/22/2012
            string CoreSkillName;

            // Start
            Cursor = Cursors.WaitCursor;
            pnlStatus.Text = "Loading Agents...";
            Application.DoEvents();

            // Load the Research names
            var loopTo = DCSkillCheckBoxes.Count() - 1;
            for (i = 1; i <= loopTo; i++)
            {
                if (DCSkillCheckBoxes[i].Checked)
                {
                    // Safe this one
                    ResearchTypeList = ResearchTypeList + DCSkillLabels[i].Text + "','";
                }
            }

            // Format the last list
            ResearchTypeList = ResearchTypeList.Substring(0, ResearchTypeList.Length - 2) + ")";

            // Load the Corporations
            var loopTo1 = DCCorpCheckBoxes.Count() - 1;
            for (i = 1; i <= loopTo1; i++)
            {
                if (DCCorpCheckBoxes[i].Checked)
                {
                    CorporationList = CorporationList + DCCorpLabels[i].Text + "','";
                }
            }

            // Format the last list
            CorporationList = CorporationList.Substring(0, CorporationList.Length - 2) + ")";

            // If no corps, or skills, then exit
            if (ResearchTypeList == ")" | CorporationList == ")")
            {
                Interaction.MsgBox("No Datacore Agents for Selected Options", Constants.vbInformation, Application.ProductName);
                pnlStatus.Text = "";
                Cursor = Cursors.Default;
                return;
            }

            // See if they want high sec and low sec, or just high or just low sec agents - Low sec includes Null
            if (chkDCHighSecAgents.Checked & !chkDCLowSecAgents.Checked)
            {
                SystemSecurityCheck = " AND ROUND(SECURITY,1) >= 0.5 ";
            }
            else if (chkDCLowSecAgents.Checked & !chkDCHighSecAgents.Checked)
            {
                SystemSecurityCheck = " AND ROUND(SECURITY,1) < 0.5 ";
            }

            // Get count first
            SQL = "SELECT COUNT(*) FROM RESEARCH_AGENTS WHERE RESEARCH_TYPE IN " + ResearchTypeList + " AND CORPORATION_NAME IN " + CorporationList + SystemSecurityCheck;

            var CMDCount = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerRecordCount = Conversions.ToInteger(CMDCount.ExecuteScalar());

            // Read the settings and stats to make the query
            SQL = "SELECT FACTION, CORPORATION_ID, CORPORATION_NAME, AGENT_NAME, LEVEL, 'QUALITY', RESEARCH_TYPE_ID, ";
            SQL += "RESEARCH_TYPE, REGION_ID, REGION_NAME, SOLAR_SYSTEM_ID, SOLAR_SYSTEM_NAME, SECURITY, STATION ";
            SQL += "FROM RESEARCH_AGENTS, FACTIONS, REGIONS ";
            SQL += "WHERE RESEARCH_AGENTS.REGION_ID = REGIONS.regionID ";
            SQL += "AND REGIONS.factionID = FACTIONS.factionID ";
            SQL += "AND RESEARCH_TYPE IN " + ResearchTypeList + " AND CORPORATION_NAME IN " + CorporationList + SystemSecurityCheck;

            FactionString = "AND FACTIONS.factionName in (";

            // Set Sov check
            if (chkDCAmarrSov.Checked)
            {
                FactionString = FactionString + "'Amarr Empire',";
            }
            if (chkDCAmmatarSov.Checked)
            {
                FactionString = FactionString + "'Ammatar Mandate',";
            }
            if (chkDCCaldariSov.Checked)
            {
                FactionString = FactionString + "'Caldari State',";
            }
            if (chkDCGallenteSov.Checked)
            {
                FactionString = FactionString + "'Gallente Federation',";
            }
            if (chkDCKhanidSov.Checked)
            {
                FactionString = FactionString + "'Khanid Kingdom',";
            }
            if (chkDCMinmatarSov.Checked)
            {
                FactionString = FactionString + "'Minmatar Republic',";
            }
            if (chkDCSyndicateSov.Checked)
            {
                FactionString = FactionString + "'The Syndicate',";
            }
            if (chkDCThukkerSov.Checked)
            {
                FactionString = FactionString + "'Thukker Tribe',";
            }

            if (FactionString != "AND FACTIONS.factionName in (")
            {
                FactionString = FactionString.Substring(0, Strings.Len(FactionString) - 1) + ") ";
                // Add the faction string
                SQL += FactionString;
            }
            else
            {
                // Clear
                Interaction.MsgBox("No Datacore Agents for Selected Options", Constants.vbInformation, Application.ProductName);
                lstDC.Items.Clear();
                goto Leave;
            }

            if (cmbDCRegions.Text != "All Regions")
            {
                SQL += " AND regionName = '" + cmbDCRegions.Text + "'";
            }

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerDC = Public_Variables.DBCommand.ExecuteReader();

            if (!readerDC.HasRows)
            {
                // Clear and exit
                Interaction.MsgBox("No Datacore Agents for Selected Options", Constants.vbInformation, Application.ProductName);
                lstDC.Items.Clear();
                goto Leave;
            }

            pnlProgressBar.Value = 0;
            pnlProgressBar.Visible = true;
            pnlProgressBar.Maximum = readerRecordCount;

            // Loop through all the agents and build the list to put into the graph
            while (readerDC.Read())
            {
                // First find out what personal standing to use, faction, corp or personal
                // Get user's base agent standing with this agent
                if (!(Public_Variables.SelectedCharacter.Standings == null))
                {
                    BaseAgentStanding = Public_Variables.SelectedCharacter.Standings.GetStanding(readerDC.GetString(3));
                    BaseFactionStanding = Public_Variables.SelectedCharacter.Standings.GetStanding(readerDC.GetString(0));
                }
                else
                {
                    BaseAgentStanding = 0d;
                    BaseFactionStanding = 0d;
                }

                // The corp standing will either be the original corp standing or whatever they put in (skills are applied in text box display)
                CorpStanding = GetDCtxtCorpStanding(readerDC.GetString(2));

                Diplomacy = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(3357L);

                // Standing = (BaseStanding + (10 - BaseStanding) * (0.04 * ConnectionsSkill))
                if (BaseAgentStanding < 0d)
                {
                    // Use Diplomacy
                    AgentStanding = BaseAgentStanding + (10d - BaseAgentStanding) * (0.04d * Diplomacy);
                }
                else if (BaseAgentStanding > 0d)
                {
                    // Use connections
                    AgentStanding = BaseAgentStanding + (10d - BaseAgentStanding) * (0.04d * ConnectionsSkill);
                }
                else
                {
                    AgentStanding = 0d;
                }

                if (BaseFactionStanding < 0d)
                {
                    // Use Diplomacy
                    FactionStanding = BaseFactionStanding + (10d - BaseFactionStanding) * (0.04d * Diplomacy);
                }
                else if (BaseFactionStanding > 0d)
                {
                    // Use connections
                    FactionStanding = BaseFactionStanding + (10d - BaseFactionStanding) * (0.04d * ConnectionsSkill);
                }
                else
                {
                    FactionStanding = 0d;
                }

                // ******* Agent Quality Removed on 19 May 2011 *******
                // Base Quality is now 20 for all agents
                AgentLevel = readerDC.GetInt32(4);

                // Agent_Effective_Quality = Agent_Quality + (5 * Negotiation_Skill_Level) + Round_Down(AgentPersonalStanding)
                AgentEffectiveStanding = 20 + 5 * NegotationSkill + AgentStanding;

                // Required Standing = ((Level - 1) * 2) + (Quality / 20) 
                // ReqStanding = (AgentLevel - 1) * 2 -- May 19th change
                switch (AgentLevel)
                {
                    case 1:
                        {
                            ReqStanding = 0d;
                            break;
                        }
                    case 2:
                        {
                            ReqStanding = 1d;
                            break;
                        }
                    case 3:
                        {
                            ReqStanding = 3d;
                            break;
                        }
                    case 4:
                        {
                            ReqStanding = 5d;
                            break;
                        }
                }

                ReqCorpStanding = ReqStanding - 2d;

                // Now determine if we can use this agent or not based on all the data
                // New from game: Your effective personal standings must be 3.00 or higher toward this agent's corporation in order to use this agent, 
                // as well as an effective personal standing of 5.00 or higher toward this agent, its faction, or its corporation in order to use this agent's services.

                // From game: Your effective personal standings must be 2.00 or higher toward this agent's 
                // corporation in order to use this agent (level 3, qual 0, effqual 20), 
                // as well as an effective personal standing of 4.00 or higher toward this agent, its faction, 
                // or its corporation in order to use this agent's services.

                if (CorpStanding >= ReqCorpStanding & (AgentStanding >= ReqStanding | CorpStanding >= ReqStanding | FactionStanding >= ReqStanding))
                {
                    // Can use agent
                    CanUseAgent = true;
                }
                else
                {
                    // Can't so grey out line
                    CanUseAgent = false;
                }

                CoreSkillName = readerDC.GetString(7);
                CoreSkillLevel = GetCoreSkillLevel(CoreSkillName);

                // Research_Points_Per_Day = Multiplier * ((1 + (Agent_Effective_Quality / 100)) *  ((Your_Skill + Agent_Skill) ^ 2))
                RPPerDay = Math.Round(Math.Pow(CoreSkillLevel + AgentLevel, 2d) * (1d + AgentEffectiveStanding / 100d), 2);

                // Now load information into list
                DCAgentRecord.SystemID = readerDC.GetInt64(10);
                DCAgentRecord.SystemSecurity = Math.Round(readerDC.GetDouble(12), 1);
                DCAgentRecord.RegionID = readerDC.GetInt64(8);
                DCAgentRecord.Faction = readerDC.GetString(0);
                DCAgentRecord.FactionStanding = FactionStanding;
                DCAgentRecord.Corporation = readerDC.GetString(2);
                DCAgentRecord.CorporationStanding = CorpStanding;
                DCAgentRecord.Agent = readerDC.GetString(3);
                DCAgentRecord.AgentStanding = Math.Truncate(AgentStanding * 100d) / 100d;
                DCAgentRecord.AgentLevel = readerDC.GetInt32(4);
                DCAgentRecord.AgentLocation = readerDC.GetString(13) + " (" + DCAgentRecord.SystemSecurity.ToString() + ") - " + readerDC.GetString(9);  // Station name + security + region

                // Need the Core typeID
                string TempCoreName = "";

                if (readerDC.GetString(7).Contains("Amarr Starship"))
                {
                    TempCoreName = "Amarrian Starship Engineering";
                }
                else if (readerDC.GetString(7).Contains("Gallente Starship"))
                {
                    TempCoreName = "Gallentean Starship Engineering";
                }
                else
                {
                    TempCoreName = readerDC.GetString(7);
                }

                SQL = "SELECT typeID FROM INVENTORY_TYPES WHERE typeName = 'Datacore - " + TempCoreName + "'";

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerDC2 = Public_Variables.DBCommand.ExecuteReader();
                if (readerDC2.Read())
                {
                    DCAgentRecord.DataCoreID = readerDC2.GetInt64(0);
                }
                else
                {
                    DCAgentRecord.DataCoreID = 0L;
                }
                readerDC2.Close();

                DCAgentRecord.DataCoreSkill = readerDC.GetString(7);
                DCAgentRecord.DataCoreSkillLevel = CoreSkillLevel;
                DCAgentRecord.AgentAvailable = CanUseAgent;
                DCAgentRecord.RPperDay = RPPerDay;
                DCAgentRecord.CoresPerDay = RPPerDay / 100d; // Inferno Change - all cores cost 100 RP per core
                DCAgentRecord.DataCorePrice = 0d;
                DCAgentRecord.PriceFrom = "";
                DCAgentRecord.IskPerHour = 0d;

                // Add the record
                DCAgentList.Add(DCAgentRecord);

                // For each record, update the progress bar
                var argPG = pnlProgressBar;
                Public_Variables.IncrementToolStripProgressBar(ref argPG);
                pnlProgressBar = argPG;

            }

            readerDC.Close();

            pnlProgressBar.Visible = false;
            Application.DoEvents();

            pnlStatus.Text = "Calculating...";
            pnlProgressBar.Value = 0;
            pnlProgressBar.Maximum = DCAgentList.Count;
            pnlProgressBar.Visible = true;
            Application.DoEvents();

            // Now figure out what prices to use and load accordingly
            if (rbtnDCUpdatedPrices.Checked) // Use whatever the user has loaded in Item Prices
            {
                var loopTo2 = DCAgentList.Count - 1;
                for (i = 0; i <= loopTo2; i++)
                {

                    // First save the record and then remove the record we are on
                    DCAgentRecord = DCAgentList[i];
                    DCAgentRecord.DataCorePrice = Public_Variables.GetItemPrice(DCAgentList[i].DataCoreID);
                    DCAgentRecord.DataCorePrice -= Public_Variables.DataCoreRedeemCost; // Add an amount of Isk to redeem each datacore, so subtract this from the market price
                    DCAgentRecord.PriceFrom = "Current";
                    DCAgentRecord.IskPerHour = Math.Round(DCAgentRecord.DataCorePrice * DCAgentRecord.CoresPerDay / 24d, 2);

                    // Insert the record
                    TempDCAgentList.Add(DCAgentRecord);

                }
            }

            else if (rbtnDCRegionPrices.Checked) // Look up the max buy price for the region the Agent is located
            {
                // Update the price cache with our list of Regions for these datacores
                // Build the list of datacore ID's and Regions
                var loopTo3 = DCAgentList.Count - 1;
                for (i = 0; i <= loopTo3; i++)
                {
                    TempItem.Manufacture = false;
                    TempItem.TypeID = DCAgentList[i].DataCoreID;
                    TempItem.GroupName = GetPriceGroupName(TempItem.TypeID);
                    TempItem.PriceModifier = 0d;
                    TempItem.SystemID = "";

                    var TempRegionList = new List<string>();
                    TempItem.RegionID = DCRegionList[j];

                    if (!DCTypeIDList.Contains(TempItem))
                    {
                        DCTypeIDList.Add(TempItem);
                    }

                    if (!DCRegionList.Contains(DCAgentList[i].RegionID.ToString()))
                    {
                        DCRegionList.Add(DCAgentList[i].RegionID.ToString());
                    }

                }

                // Update
                UpdatePricesCache(DCTypeIDList);

                // Now search for each item's price in the cache with its region and pull up the max buy order
                var loopTo4 = DCAgentList.Count - 1;
                for (i = 0; i <= loopTo4; i++)
                {
                    SQL = "SELECT buyMax FROM ITEM_PRICES_CACHE WHERE typeID =" + DCAgentList[i].DataCoreID + " AND RegionOrSystem =" + DCAgentList[i].RegionID + " AND PRICE_SOURCE = " + UpdatePricesDataSource;

                    Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                    readerDC2 = Public_Variables.DBCommand.ExecuteReader();

                    DCAgentRecord = DCAgentList[i];

                    if (readerDC2.Read())
                    {
                        DCAgentRecord.DataCorePrice = readerDC2.GetDouble(0);
                    }
                    else
                    {
                        DCAgentRecord.DataCorePrice = 0d;
                    }

                    DCAgentRecord.DataCorePrice -= Public_Variables.DataCoreRedeemCost; // Add an amount of Isk to redeem each datacore, so subtract this from the market price

                    DCAgentRecord.PriceFrom = "Region";
                    DCAgentRecord.IskPerHour = Math.Round(DCAgentRecord.DataCorePrice * DCAgentRecord.CoresPerDay / 24d, 2);

                    // Insert the record
                    TempDCAgentList.Add(DCAgentRecord);

                    readerDC2.Close();
                }
            }

            else if (rbtnDCSystemPrices.Checked) // Use the max buy price for the system the Agent is located
            {
                // Update the price cache with a list of systems for these datacores
                // Build the list of datacore ID's and systems
                var loopTo5 = DCAgentList.Count - 1;
                for (i = 0; i <= loopTo5; i++)
                {
                    TempItem.Manufacture = false;
                    TempItem.TypeID = DCAgentList[i].DataCoreID;
                    TempItem.GroupName = GetPriceGroupName(TempItem.TypeID);
                    TempItem.PriceModifier = 0d;
                    TempItem.SystemID = DCAgentList[i].SystemID.ToString();
                    TempItem.RegionID = "";

                    if (!DCTypeIDList.Contains(TempItem))
                    {
                        DCTypeIDList.Add(TempItem);
                    }

                    if (!DCSystemList.Contains(DCAgentList[i].SystemID.ToString()))
                    {
                        DCSystemList.Add(DCAgentList[i].SystemID.ToString());
                    }

                }

                // Need to update the cache for each region, for all typeids so send one system at a time
                var loopTo6 = DCSystemList.Count - 1;
                for (i = 0; i <= loopTo6; i++)
                    UpdatePricesCache(DCTypeIDList);

                // Now search for each item's price in the cache with its solar system and pull up the max buy order
                var loopTo7 = DCAgentList.Count - 1;
                for (i = 0; i <= loopTo7; i++)
                {
                    SQL = "SELECT buyMax FROM ITEM_PRICES_CACHE WHERE typeID =" + DCAgentList[i].DataCoreID + " AND RegionOrSystem =" + DCAgentList[i].SystemID + " AND PRICE_SOURCE = " + UpdatePricesDataSource;

                    Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                    readerDC2 = Public_Variables.DBCommand.ExecuteReader();

                    DCAgentRecord = DCAgentList[i];

                    if (readerDC2.Read())
                    {
                        DCAgentRecord.DataCorePrice = readerDC2.GetDouble(0);
                    }
                    else
                    {
                        DCAgentRecord.DataCorePrice = 0d;
                    }

                    DCAgentRecord.DataCorePrice -= Public_Variables.DataCoreRedeemCost; // Add an amount of Isk to redeem each datacore, so subtract this from the market price

                    DCAgentRecord.PriceFrom = "System";
                    DCAgentRecord.IskPerHour = Math.Round(DCAgentRecord.DataCorePrice * DCAgentRecord.CoresPerDay / 24d, 2);

                    // Insert the record
                    TempDCAgentList.Add(DCAgentRecord);

                    readerDC2.Close();
                }

            }

            // Set the updated list
            DCAgentList = TempDCAgentList;
            // Sort by IPH for calculating the top 5
            DCAgentList.Sort(new DataCoreIPHComparer());

            // Get number of R&D Agents they can use
            UniqueAgentList = new string[TotalRDAgents];
            j = 0;

            pnlStatus.Text = "Refreshing List...";
            pnlProgressBar.Value = 0;
            pnlProgressBar.Maximum = DCAgentList.Count;
            pnlProgressBar.Visible = true;
            Application.DoEvents();

            // Build a list of unique agent names equal to number the user can use in order of Isk per hour
            var loopTo8 = DCAgentList.Count - 1;
            for (i = 0; i <= loopTo8; i++)
            {
                if (DCAgentList[i].AgentAvailable | !DCAgentList[i].AgentAvailable & chkDCIncludeAllAgents.Checked) // make sure we want to look at this one
                {
                    if (!UniqueAgentList.Contains(DCAgentList[i].Agent))
                    {
                        // Add the agent
                        UniqueAgentList[j] = DCAgentList[i].Agent;
                        j = j + 1;

                        if (j > TotalRDAgents - 1)
                        {
                            break;
                        }
                    }
                }
            }

            j = 0;
            lstDC.Items.Clear();

            // Load the data into the table
            lstDC.BeginUpdate();
            var loopTo9 = DCAgentList.Count - 1;
            for (i = 0; i <= loopTo9; i++)
            {
                if (DCAgentList[i].AgentAvailable | !DCAgentList[i].AgentAvailable & chkDCIncludeAllAgents.Checked)
                {
                    lstDCViewRow = new ListViewItem(""); // Check
                                                         // The remaining columns are subitems  
                    lstDCViewRow.SubItems.Add(DCAgentList[i].Corporation);
                    lstDCViewRow.SubItems.Add(DCAgentList[i].Agent);
                    lstDCViewRow.SubItems.Add(DCAgentList[i].AgentLevel.ToString());
                    lstDCViewRow.SubItems.Add(Strings.FormatNumber(DCAgentList[i].AgentStanding, 2));
                    lstDCViewRow.SubItems.Add(DCAgentList[i].AgentLocation);
                    lstDCViewRow.SubItems.Add(DCAgentList[i].DataCoreSkill);
                    lstDCViewRow.SubItems.Add(Strings.FormatNumber(DCAgentList[i].DataCorePrice, 2));
                    lstDCViewRow.SubItems.Add(DCAgentList[i].PriceFrom);
                    lstDCViewRow.SubItems.Add(Strings.FormatNumber(DCAgentList[i].CoresPerDay, 2));
                    lstDCViewRow.SubItems.Add(Strings.FormatNumber(DCAgentList[i].IskPerHour, 2));

                    // Color in the top 5 unique agents
                    if (j <= TotalRDAgents - 1)
                    {
                        if ((DCAgentList[i].Agent ?? "") == (UniqueAgentList[j] ?? ""))
                        {
                            // Color this row
                            lstDCViewRow.BackColor = Color.LightGreen;
                            // Save the total iph for this agent and add it to the total
                            TotalIPH = TotalIPH + DCAgentList[i].IskPerHour;
                            // Move to next agent name
                            j = j + 1;
                        }
                    }

                    // If the agent can't be used, grey out the row
                    if (!DCAgentList[i].AgentAvailable)
                    {
                        lstDCViewRow.ForeColor = Color.Gray;
                    }
                    else
                    {
                        switch (DCAgentList[i].SystemSecurity)
                        {
                            case var @case when @case < 0.1d:
                                {
                                    lstDCViewRow.ForeColor = Color.Red;
                                    break;
                                }
                            case var case1 when case1 < 0.5d:
                                {
                                    lstDCViewRow.ForeColor = Color.Orange;
                                    break;
                                }

                            default:
                                {
                                    lstDCViewRow.ForeColor = Color.Black;
                                    break;
                                }
                        }
                    }

                    // Finally, highlight with blue text the agents we have selected
                    foreach (var DBAgent in Public_Variables.SelectedCharacter.GetResearchAgents().GetResearchAgents())
                    {
                        if ((DCAgentList[i].Agent ?? "") == (DBAgent.Agent ?? "") & DCAgentList[i].AgentLevel == DBAgent.AgentLevel & (DCAgentList[i].DataCoreSkill ?? "") == (DBAgent.Field ?? "") & DCAgentList[i].AgentAvailable)
                        {
                            lstDCViewRow.ForeColor = Color.Blue;
                            break;
                        }
                    }

                    lstDC.Items.Add(lstDCViewRow);

                }

                // For each record, update the progress bar
                var argPG1 = pnlProgressBar;
                Public_Variables.IncrementToolStripProgressBar(ref argPG1);
                pnlProgressBar = argPG1;

            }

            // Now sort this
            SortOrder TempType;
            if (DCColumnSortType == SortOrder.Ascending)
            {
                TempType = SortOrder.Descending;
            }
            else
            {
                TempType = SortOrder.Ascending;
            }
            var argRefListView = lstDC;
            Public_Variables.ListViewColumnSorter(DCColumnClicked, ref argRefListView, ref DCColumnClicked, ref TempType);
            Cursor = Cursors.Default;
            lstDC.EndUpdate();

            // Update the Total IPH
            txtDCTotalOptIPH.Text = Strings.FormatNumber(TotalIPH, 2);

        Leave:
            ;

            // End
            Cursor = Cursors.Default;
            pnlStatus.Text = "";
            pnlProgressBar.Visible = false;
            Application.DoEvents();

        }

        // Returns the text standing in the DC box for the corp name sent
        private double GetDCtxtCorpStanding(string CorpName)
        {
            // Load the Research names
            for (int i = 1, loopTo = DCCorpLabels.Count() - 1; i <= loopTo; i++)
            {
                // Compare to the label (all indexes are synched)
                if ((DCCorpLabels[i].Text ?? "") == (CorpName ?? ""))
                {
                    // Return the value of the text box
                    if (string.IsNullOrEmpty(Strings.Trim(DCCorpTextboxes[i].Text)) | !Information.IsNumeric(DCCorpTextboxes[i].Text))
                    {
                        DCCorpTextboxes[i].Text = "0.00";
                        return 0d;
                    }
                    else
                    {
                        return Conversions.ToDouble(DCCorpTextboxes[i].Text);
                    }
                }
            }

            return 0d;
        }

        // Returns the skill set in the combo boxes that is sent
        private int GetCoreSkillLevel(string SkillName)
        {
            int i;

            var loopTo = DCSkillLabels.Count() - 1;
            for (i = 1; i <= loopTo; i++)
            {
                if ((DCSkillLabels[i].Text ?? "") == (SkillName ?? ""))
                {
                    return Conversions.ToInteger(DCSkillCombos[i].Text);
                }
            }

            return 0;

        }

        // Loads the corporation standings on the Datacore screen
        private void LoadDCCorpStandings(bool UpdateCheckBoxes = true)
        {
            var Settings = new ProgramSettings();

            // Load the Corporation Standings with skills
            if ((Public_Variables.SelectedCharacter.Name ?? "") != Public_Variables.None)
            {
                for (int i = 1, loopTo = DCCorpLabels.Count() - 1; i <= loopTo; i++)
                {

                    // Check based on default
                    if (SettingsVariables.UserDCTabSettings.CorpsStanding[i - 1] == Settings.DefaultCorpStanding)
                    {
                        DCCorpTextboxes[i].Text = Strings.FormatNumber(Public_Variables.SelectedCharacter.Standings.GetEffectiveStanding(DCCorpLabels[i].Text, Conversions.ToInteger(cmbDCConnections.Text), Public_Variables.SelectedCharacter.Skills.GetSkillLevel(3357L)), 2);
                    }
                    else // use what they entered
                    {
                        DCCorpTextboxes[i].Text = Strings.FormatNumber(SettingsVariables.UserDCTabSettings.CorpsStanding[i - 1], 2);
                    }

                    if (UpdateCheckBoxes)
                    {
                        // check it based on defaults
                        if (SettingsVariables.UserDCTabSettings.CorpsChecked[i - 1] == Settings.DefaultCorpStandingChecked)
                        {
                            if (DCCorpTextboxes[i].Text != "0.00")
                            {
                                DCCorpCheckBoxes[i].Checked = true;
                                DCCorpTextboxes[i].Enabled = true;
                            }
                            else
                            {
                                DCCorpCheckBoxes[i].Checked = false;
                                DCCorpTextboxes[i].Enabled = false;
                            }
                        }
                        else // What they set
                        {
                            DCCorpCheckBoxes[i].Checked = Conversions.ToBoolean(SettingsVariables.UserDCTabSettings.CorpsChecked[i - 1]);
                            DCCorpTextboxes[i].Enabled = Conversions.ToBoolean(SettingsVariables.UserDCTabSettings.CorpsChecked[i - 1]);
                        }

                    }

                }

                if (UpdateCheckBoxes)
                {
                    txtDCTotalOptIPH.Text = "0.00";
                    txtDCTotalSelectedIPH.Text = "0.00";
                    lstDC.Items.Clear();
                }
            }
            else
            {
                // Using dummy, so uncheck all and disable all boxes
                for (int i = 1, loopTo1 = DCCorpLabels.Count() - 1; i <= loopTo1; i++)
                {
                    DCCorpCheckBoxes[i].Checked = false;
                    DCCorpTextboxes[i].Enabled = false;
                    DCCorpTextboxes[i].Text = "0.00";
                }
            }

        }

        private void btnDCExporttoClip_Click(object sender, EventArgs e)
        {
            var ClipboardData = new DataObject();
            string OutputText = "";
            ListView.CheckedListViewItemCollection checkeditems;
            bool ItemsSelected = false;
            string Separator = "";

            if (lstDC.CheckedItems.Count != 0)
            {
                // For each checked item, export the data
                checkeditems = lstDC.CheckedItems;

                if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.CSVDataExport)
                {
                    Separator = ", ";
                }
                else if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.SSVDataExport)
                {
                    Separator = "; ";
                }

                if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.CSVDataExport)
                {
                    OutputText = "Selected R&D Agents:" + Environment.NewLine + "Corporation, Agent Name, Agent Level, Agent Location, DataCore Skill, Isk per Hour" + Environment.NewLine + Environment.NewLine;
                }
                else if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.SSVDataExport)
                {
                    OutputText = "Selected R&D Agents:" + Environment.NewLine + "Corporation; Agent Name; Agent Level; Agent Location; DataCore Skill; Isk per Hour" + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    OutputText = "Selected R&D Agents:" + Environment.NewLine + Environment.NewLine;
                }

                foreach (ListViewItem item in checkeditems)
                {
                    ItemsSelected = true;
                    if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.CSVDataExport | (SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.SSVDataExport)
                    {
                        OutputText = OutputText + item.SubItems[1].Text + Separator + item.SubItems[2].Text + Separator + item.SubItems[3].Text + Separator;
                        OutputText = OutputText + item.SubItems[5].Text + Separator + item.SubItems[6].Text + Separator;
                        if ((SettingsVariables.UserApplicationSettings.DataExportFormat ?? "") == Public_Variables.SSVDataExport)
                        {
                            // Replace any commas with decimals and vice versa
                            OutputText = OutputText + Public_Variables.ConvertUStoEUDecimal(item.SubItems[10].Text) + Separator + Environment.NewLine;
                        }
                        else // Save as normal but remove any commas in the price
                        {
                            OutputText = OutputText + item.SubItems[10].Text.Replace(",", "") + Separator + Environment.NewLine;
                        }
                    }
                    else
                    {
                        OutputText = OutputText + "Corporation: " + item.SubItems[1].Text + Environment.NewLine;
                        OutputText = OutputText + "Agent Name: " + item.SubItems[2].Text + Environment.NewLine;
                        OutputText = OutputText + "Agent Level: " + item.SubItems[3].Text + Environment.NewLine;
                        OutputText = OutputText + "Agent Location: " + item.SubItems[5].Text + Environment.NewLine;
                        OutputText = OutputText + "Datacore Skill: " + item.SubItems[6].Text + Environment.NewLine;
                        OutputText = OutputText + "Isk per Hour: " + item.SubItems[10].Text + Environment.NewLine + Environment.NewLine;
                    }
                }

                if (ItemsSelected)
                {
                    // Paste to clipboard
                    Public_Variables.CopyTextToClipboard(OutputText);
                }
            }
            else
            {
                Interaction.MsgBox("No Agents Selected", Constants.vbInformation, Application.ProductName);
            }

        }

        private void cmbDCRegions_DropDown(object sender, EventArgs e)
        {
            string SQL;
            SQLiteDataReader readerReg;

            if (!DCRegionsLoaded)
            {

                // Load the select systems combobox with systems
                SQL = "SELECT regionName FROM RESEARCH_AGENTS, REGIONS WHERE RESEARCH_AGENTS.REGION_ID = REGIONS.regionID ";
                SQL += "GROUP BY regionName";

                Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                readerReg = Public_Variables.DBCommand.ExecuteReader();

                cmbDCRegions.Items.Add("All Regions");

                while (readerReg.Read())
                    cmbDCRegions.Items.Add(readerReg.GetString(0));

                readerReg.Close();

                cmbDCRegions.Text = "All Regions";
                DCRegionsLoaded = true;

            }

        }

        // For sorting a list of Mining Ore

        public class DataCoreIPHComparer : IComparer<DCAgent>
        {

            public int Compare(DCAgent p1, DCAgent p2)
            {
                // swap p2 and p1 to do decending sort
                return p2.IskPerHour.CompareTo(p1.IskPerHour);
            }

        }

        #endregion

        #region Mining

        #region Mining Object Functions

        private void lstMineGrid_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            if (e.ColumnIndex == 0)
            {
                e.Cancel = true;
                e.NewWidth = lstPricesView.Columns[e.ColumnIndex].Width;
            }
        }

        private void lstMineGrid_MouseClick(object sender, MouseEventArgs e)
        {
            ListClicked(lstMineGrid, sender, e);
        }

        private void OreCheckProcessing_CheckedChanged(object sender, EventArgs e)
        {


            UpdateProcessingSkillBoxes(Conversions.ToInteger(((CheckBox)sender).Name.Substring(16)), ((CheckBox)sender).Checked);
        }

        private void UpdateProcessingSkillBoxes(int Index, bool Checked)
        {
            MineProcessingCombos[Index].Enabled = Checked;
            MineProcessingLabels[Index].Enabled = Checked;
        }

        private void cmbMineDroneName_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateNumberMiningDrones(cmbMineDroneName.Text, cmbMineShipName.Text, cmbMineNumMiningDrones, false);
            }
        }

        private void cmbMineBoosterDroneName_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateNumberMiningDrones(cmbMineBoosterDroneName.Text, cmbMineBoosterShipName.Text, cmbMineBoosterNumMiningDrones, false);
            }
        }

        private void cmbMineShipName_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!UpdatingMiningShips & !Public_Variables.FirstLoad)
            {
                LoadMiningshipImage();
                UpdateMiningSkills();
                UpdateMiningShipEquipment();
                UpdateShipMiningDrones();

                if (MiningShipSelected() & cmbMineOreType.Text == "Ore")
                {
                    chkMineMichiImplant.Enabled = true;
                }
                else
                {
                    chkMineMichiImplant.Enabled = false;
                    chkMineMichiImplant.ForeColor = Color.Black;
                }

                // Save the ship selected locally so it reloads if they select a different mining type
                switch (cmbMineOreType.Text ?? "")
                {
                    case "Ore":
                        {
                            SettingsVariables.UserMiningTabSettings.OreMiningShip = cmbMineShipName.Text;
                            break;
                        }
                    case "Ice":
                        {
                            SettingsVariables.UserMiningTabSettings.IceMiningShip = cmbMineShipName.Text;
                            break;
                        }
                    case "Gas":
                        {
                            SettingsVariables.UserMiningTabSettings.GasMiningShip = cmbMineShipName.Text;
                            break;
                        }
                }

                // Clear the grid
                lstMineGrid.Items.Clear();

                // Refresh this value unless the value saved is not the default
                var S = new ProgramSettings();
                if (SettingsVariables.UserMiningTabSettings.Haulerm3 == S.DefaultMiningHaulerm3)
                {
                    GetHaulerM3(cmbMineShipName.Text);
                }

            }
        }

        private void cmbMineShipName_DropDown(object sender, EventArgs e)
        {
            UpdateMiningShipsCombo();
        }

        private void cmbMineAstrogeology_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateMiningShipForm(true);
            }
        }

        private void cmbMineAdvShipSkill_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateMiningShipForm(false);
            }
        }

        private void cmbMineBaseShipSkill_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateMiningShipForm(false);
            }
        }

        private void cmbMineSkill_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateMiningShipForm(true);
            }
        }

        private void cmbMineIceHarvesting_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateMiningShipForm(true);
            }
        }

        private void cmbMineDeepCore_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateMiningShipForm(true);
            }
        }

        private void cmbMineType_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (cmbMineOreType.Text == "Ice")
            {
                chkMineIncludeHighYieldOre.Enabled = false;
                chkMineIncludeA0StarOres.Enabled = false;
                gbMiningRigs.Enabled = true;
                chkMineIncludeHighYieldOre.Text = "High Yield Ice";
                chkMineIncludeHighSec.Text = "High Sec Ice";
                chkMineIncludeLowSec.Text = "Low Sec Ice";
                chkMineIncludeNullSec.Text = "Null Sec Ice";
                lstMineGrid.Columns[1].Text = "Ice Name";
                lblMineFacilityOreRate1.Text = "Ice:";
                tabMiningDrones.Enabled = true;
                chkMineMoonMining.Enabled = false; // Can't moon mine ice
                chkMineRefinedOre.Enabled = true;
            }

            else if (cmbMineOreType.Text == "Ore")
            {
                gbMiningRigs.Enabled = true;
                chkMineIncludeHighYieldOre.Enabled = true;
                chkMineIncludeA0StarOres.Enabled = true;
                chkMineIncludeHighYieldOre.Text = "High Yield Ores";
                chkMineIncludeHighSec.Text = "High Sec Ore";
                chkMineIncludeLowSec.Text = "Low Sec Ore";
                chkMineIncludeNullSec.Text = "Null Sec Ore";
                lstMineGrid.Columns[1].Text = "Ore Name";
                lblMineFacilityOreRate1.Text = "Ore:";
                tabMiningDrones.Enabled = true;
                chkMineMoonMining.Enabled = true; // Moon mining
                chkMineRefinedOre.Enabled = true;
            }

            else if (cmbMineOreType.Text == "Gas")
            {
                gbMiningRigs.Enabled = false;
                chkMineIncludeHighYieldOre.Enabled = false;
                chkMineIncludeA0StarOres.Enabled = false;
                chkMineIncludeHighYieldOre.Text = "High Yield Gas";
                chkMineIncludeHighSec.Text = "High Sec Gas";
                chkMineIncludeLowSec.Text = "Low Sec Gas";
                chkMineIncludeNullSec.Text = "Null Sec Gas";
                lstMineGrid.Columns[1].Text = "Gas Name";
                tabMiningDrones.Enabled = false;
                chkMineMoonMining.Enabled = false; // Can't moon mine gas

                // Dont allow refining for gas
                chkMineRefinedOre.Enabled = false;
                if (chkMineRefinedOre.Checked)
                {
                    // Auto select if they had refined checked
                    chkMineUnrefinedOre.Checked = true;
                    chkMineRefinedOre.Checked = false;
                }

            }

            // All three have wh options
            chkMineWH.Enabled = true;
            if (chkMineWH.Checked)
            {
                chkMineC1.Enabled = true;
                chkMineC2.Enabled = true;
                chkMineC3.Enabled = true;
                chkMineC4.Enabled = true;
                chkMineC5.Enabled = true;
                chkMineC6.Enabled = true;
            }
            else
            {
                chkMineC1.Enabled = false;
                chkMineC2.Enabled = false;
                chkMineC3.Enabled = false;
                chkMineC4.Enabled = false;
                chkMineC5.Enabled = false;
                chkMineC6.Enabled = false;
            }

            UpdateBoosterDroneRigChecks();

            if (!Public_Variables.FirstLoad)
            {
                // Load all the skills for the character first
                LoadCharacterMiningSkills();
                UpdateMiningImplants();
                UpdateMiningShipForm(true);
                UpdateProcessingSkills();
                UpdateShipMiningDrones();
                UpdateBoosterMiningDrones();
                RefreshMiningTabRefiningRates();
            }

            lstMineGrid.Items.Clear();

        }

        private void lstMineGrid_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            var argRefListView = lstMineGrid;
            Public_Variables.ListViewColumnSorter(e.Column, ref argRefListView, ref MiningColumnClicked, ref MiningColumnSortType);
            lstMineGrid = argRefListView;
        }

        private void chkMineUseFleetBooster_CheckedChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                LoadFleetBoosterImage();
                UpdateBoosterSkills();
                if (chkMineUseFleetBooster.Checked & chkMineBoosterUseDrones.Checked)
                {
                    tabBoosterDrones.Enabled = true;
                }
                else
                {
                    tabBoosterDrones.Enabled = false;
                }
            }
        }

        private void cmbMineMiningForeman_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateBoosterSkills();
            }
        }

        private void cmbMineMiningDirector_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateBoosterSkills();
            }
        }

        private void cmbMineBoosterShip_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!UpdatingMiningShips)
            {
                LoadFleetBoosterImage();
                UpdateBoosterSkills();
                UpdateBoosterMiningDrones();
                // Clear the grid
                lstMineGrid.Items.Clear();
            }
        }

        private void chkMineForemanBooster_Click(object sender, EventArgs e)
        {
            UpdateMiningBoosterObjects();
        }

        private void txtMineNumberMiners_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPriceChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtMineTotalJumpM3_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPriceChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtMineTotalJumpFuel_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPriceChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void chkMineUseHauler_CheckedChanged(object sender, EventArgs e)
        {
            if (chkMineUseHauler.Checked)
            {
                lblMineRTMin.Enabled = false;
                txtMineRTMin.Enabled = false;
                lblMineRTSec.Enabled = false;
                txtMineRTSec.Enabled = false;
                lblMineHaulerM3.Enabled = false;
                txtMineHaulerM3.Enabled = false;
            }
            else
            {
                lblMineRTMin.Enabled = true;
                txtMineRTMin.Enabled = true;
                lblMineRTSec.Enabled = true;
                txtMineRTSec.Enabled = true;
                lblMineHaulerM3.Enabled = true;
                txtMineHaulerM3.Enabled = true;
            }

        }

        private void txtMineRTMin_GotFocus(object sender, EventArgs e)
        {
            txtMineRTMin.SelectAll();
        }

        private void txtMineHaulerM3_GotFocus(object sender, EventArgs e)
        {
            txtMineHaulerM3.SelectAll();
        }

        private void txtMineHaulerM3_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtMineHaulerM3_LostFocus(object sender, EventArgs e)
        {
            txtMineHaulerM3.Text = Strings.FormatNumber(txtMineHaulerM3.Text, 1);
        }

        private void txtMineRTMin_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtMineRTSec_GotFocus(object sender, EventArgs e)
        {
            txtMineRTSec.SelectAll();
        }

        private void txtMineRTSec_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedRunschars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtMineRTSec_TextChanged(object sender, EventArgs e)
        {
            // Update the minutes and seconds if they enter greater than 60
            if (Conversions.ToInteger(txtMineRTSec.Text) >= 60)
            {
                txtMineRTMin.Text = Math.Floor(Conversions.ToInteger(txtMineRTSec.Text) / 60d).ToString();
                txtMineRTSec.Text = (Conversions.ToInteger(txtMineRTSec.Text) - Conversions.ToInteger(txtMineRTMin.Text) * 60).ToString();
            }
        }

        private void btnMineRefresh_Click(object sender, EventArgs e)
        {
            LoadMiningGrid();
        }

        private void btnMineReset_Click(object sender, EventArgs e)
        {
            LoadMiningTab();
        }

        private void cmbMineRefining_SelectedIndexChanged(object sender, EventArgs e)
        {

            // Load up the right processing checks
            UpdateProcessingSkills();

        }

        private void cmbMineRefineryEff_SelectedIndexChanged(object sender, EventArgs e)
        {

            // Load up the right processing checks
            UpdateProcessingSkills();

        }

        private void cmbMineMiningLaser_SelectedIndexChanged(object sender, EventArgs e)
        {
            SQLiteDataReader rsLookup;
            string SQL;

            SQL = "SELECT 'X' FROM ATTRIB_LOOKUP WHERE typeName = '" + Public_Variables.FormatDBString(cmbMineMiningLaser.Text) + "' ";
            SQL += "AND attributeID IN (604,605) AND value IN (663,482)"; // 604 and 605 are used with charge groups...and the values returned are groupIDs for mercoxit mining crystal or mining crystal resp

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsLookup = Public_Variables.DBCommand.ExecuteReader();

            if (rsLookup.HasRows)
            {
                // Enable the crystal group boxes
                gbMineCrystals.Enabled = true;
                gbMineCrystalType.Enabled = true;
            }
            else
            {
                gbMineCrystals.Enabled = false;
                gbMineCrystalType.Enabled = false;
            }

            rsLookup.Close();

        }

        private void txtMineBrokerFeeRate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtMineBrokerFeeRate.Text = Public_Variables.GetFormattedPercentEntry(txtMineBrokerFeeRate);
            }
        }

        private void txtMineBrokerFeeRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Only allow numbers, decimal, percent or backspace
            if (e.KeyChar != ControlChars.Back)
            {
                if (Public_Variables.allowedPercentChars.IndexOf(e.KeyChar) == -1)
                {
                    // Invalid Character
                    e.Handled = true;
                }
            }
        }

        private void txtMineBrokerFeeRate_GotFocus(object sender, EventArgs e)
        {
            txtMineBrokerFeeRate.SelectAll();
        }

        private void txtMineBrokerFeeRate_LostFocus(object sender, EventArgs e)
        {
            txtMineBrokerFeeRate.Text = Public_Variables.GetFormattedPercentEntry(txtMineBrokerFeeRate);
        }

        private void chkMineIncludeBrokerFees_Click(object sender, EventArgs e)
        {
            if (chkMineIncludeBrokerFees.Checked & chkMineIncludeBrokerFees.CheckState == CheckState.Indeterminate) // Show rate box
            {
                txtMineBrokerFeeRate.Visible = true;
            }
            else
            {
                txtMineBrokerFeeRate.Visible = false;
            }
        }

        private void chkMineForemanLaserRangeBoost_Click(object sender, EventArgs e)
        {
            UpdateMiningBoosterObjects();
        }

        private void BoosterMiningDroneRigs_Click(object sender, EventArgs e)
        {
            CheckBox argRigCheckbox = (CheckBox)sender;
            UpdateDroneRigChecks(ref argRigCheckbox);
            UpdateBoosterMiningDroneStats();
        }

        private void ShipMiningDroneRigs_SelectedIndexChanged(object sender, EventArgs e)
        {
            UpdateShipMiningDroneStats();
        }

        private void chkMineBoosterUseDrones_CheckedChanged(object sender, EventArgs e)
        {
            UpdateBoosterDroneRigChecks();
        }

        private void UpdateDroneRigChecks(ref CheckBox RigCheckbox, int Value = -1)
        {
            if (Value != -1)
            {
                switch (Value)
                {
                    case 2:
                        {
                            RigCheckbox.CheckState = CheckState.Indeterminate;
                            break;
                        }
                    case 1:
                        {
                            RigCheckbox.Checked = true;
                            break;
                        }
                    case 0:
                        {
                            RigCheckbox.Checked = false;
                            break;
                        }
                }
            }
            if (RigCheckbox.Enabled)
            {
                if (RigCheckbox.Checked & RigCheckbox.CheckState == CheckState.Indeterminate) // Show T2
                {
                    RigCheckbox.Text = "T2 Drone Rig";
                    RigCheckbox.ForeColor = Color.DarkOrange;
                }
                else
                {
                    RigCheckbox.Text = "T1 Drone Rig";
                    RigCheckbox.ForeColor = Color.Black;
                }
            }
        }

        private void chkMineRorqDeployedMode_Click(object sender, EventArgs e)
        {
            UpdateIndustrialCoreCheck();
            UpdateShipMiningDroneStats();
            UpdateBoosterMiningDroneStats();
        }

        private string GetMiningShipImage(string ShipName)
        {
            long ImageFile;
            string BPImage;

            // Display the mining ship
            switch (ShipName ?? "")
            {
                case Public_Variables.Venture:
                    {
                        ImageFile = (long)MiningShipTypeID.Venture;
                        break;
                    }
                case Public_Variables.Covetor:
                    {
                        ImageFile = (long)MiningShipTypeID.Covetor;
                        break;
                    }
                case Public_Variables.Retriever:
                    {
                        ImageFile = (long)MiningShipTypeID.Retriever;
                        break;
                    }
                case Public_Variables.Hulk:
                    {
                        ImageFile = (long)MiningShipTypeID.Hulk;
                        break;
                    }
                case Public_Variables.Skiff:
                    {
                        ImageFile = (long)MiningShipTypeID.Skiff;
                        break;
                    }
                case Public_Variables.Procurer:
                    {
                        ImageFile = (long)MiningShipTypeID.Procurer;
                        break;
                    }
                case Public_Variables.Mackinaw:
                    {
                        ImageFile = (long)MiningShipTypeID.Mackinaw;
                        break;
                    }
                case Public_Variables.Rorqual:
                    {
                        ImageFile = (long)MiningShipTypeID.Rorqual;
                        break;
                    }
                case Public_Variables.Orca:
                    {
                        ImageFile = (long)MiningShipTypeID.Orca;
                        break;
                    }
                case Public_Variables.Porpoise:
                    {
                        ImageFile = (long)MiningShipTypeID.Porpoise;
                        break;
                    }
                case Public_Variables.Drake:
                    {
                        ImageFile = (long)MiningShipTypeID.Drake;
                        break;
                    }
                case Public_Variables.Gnosis:
                    {
                        ImageFile = (long)MiningShipTypeID.Gnosis;
                        break;
                    }
                case Public_Variables.Rokh:
                    {
                        ImageFile = (long)MiningShipTypeID.Rokh;
                        break;
                    }
                case Public_Variables.Prospect:
                    {
                        ImageFile = (long)MiningShipTypeID.Prospect;
                        break;
                    }
                case Public_Variables.Endurance:
                    {
                        ImageFile = (long)MiningShipTypeID.Endurance;
                        break;
                    }

                default:
                    {
                        ImageFile = 0L;
                        break;
                    }
            }

            BPImage = Path.Combine(Public_Variables.UserImagePath, ImageFile.ToString() + "_64.png");

            return BPImage;

        }

        private void chkMineWH_CheckedChanged(object sender, EventArgs e)
        {
            if (chkMineWH.Checked == true)
            {
                chkMineC1.Enabled = true;
                chkMineC2.Enabled = true;
                chkMineC3.Enabled = true;
                chkMineC4.Enabled = true;
                chkMineC5.Enabled = true;
                chkMineC6.Enabled = true;
                // Also check the null box if not checked
                chkMineIncludeNullSec.Checked = true;
            }
            else
            {
                chkMineC1.Enabled = false;
                chkMineC2.Enabled = false;
                chkMineC3.Enabled = false;
                chkMineC4.Enabled = false;
                chkMineC5.Enabled = false;
                chkMineC6.Enabled = false;
            }

            UpdateOrebySpaceChecks();
        }

        private void UpdateOrebySpaceChecks()
        {

            if (!Public_Variables.FirstLoad)
            {
                if (cmbMineOreType.Text == "Ore" & chkMineWH.Checked == true & chkMineAmarr.Checked == false & chkMineGallente.Checked == false & chkMineMinmatar.Checked == false & chkMineCaldari.Checked == false)
                {
                    chkMineIncludeHighYieldOre.Enabled = false;
                }
                else
                {
                    chkMineIncludeHighYieldOre.Enabled = true;
                }
            }

        }

        private void MiningSpace_CheckChange(object sender, EventArgs e)
        {

            UpdateOrebySpaceChecks();

            if (((CheckBox)sender).Name == "chkMineTriglavian" | ((CheckBox)sender).Name == "chkMineMoonMining")
            {
                UpdateProcessingSkills();
            }

            RefreshMiningTabRefiningRates();

        }

        private void chkMineIncludeNullSec_CheckedChanged(object sender, EventArgs e)
        {
            // Don't let them choose WH classes unless null checked
            if (chkMineIncludeNullSec.Checked & chkMineWH.Checked)
            {
                chkMineC1.Enabled = true;
                chkMineC2.Enabled = true;
                chkMineC3.Enabled = true;
                chkMineC4.Enabled = true;
                chkMineC5.Enabled = true;
                chkMineC6.Enabled = true;
            }
            else
            {
                chkMineC1.Enabled = false;
                chkMineC2.Enabled = false;
                chkMineC3.Enabled = false;
                chkMineC4.Enabled = false;
                chkMineC5.Enabled = false;
                chkMineC6.Enabled = false;
                // Turn off WH
                chkMineWH.Checked = false;
            }

        }

        private void cmbMineNumMiningDrones_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateShipMiningDroneStats();
            }
        }

        private void cmbMineBoosterNumMiningDrones_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateBoosterMiningDroneStats();
            }
        }

        private void cmbMineDroneOpSkill_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                if (Conversions.ToInteger(cmbMineDroneOpSkill.Text) < 5)
                {
                    cmbMineDroneSpecSkill.Text = "0";
                    cmbMineDroneSpecSkill.Enabled = false;
                }
                else
                {
                    cmbMineDroneSpecSkill.Enabled = true;
                }
                UpdateShipMiningDrones();
                UpdateShipMiningDroneStats();
            }
        }

        private void cmbMineBoosterDroneOpSkill_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                if (Conversions.ToInteger(cmbMineBoosterDroneOpSkill.Text) < 5)
                {
                    cmbMineBoosterDroneSpecSkill.Text = "0";
                    cmbMineBoosterDroneSpecSkill.Enabled = false;
                }
                else
                {
                    cmbMineBoosterDroneSpecSkill.Enabled = true;
                }
                UpdateBoosterMiningDrones();
                UpdateBoosterMiningDroneStats();
            }
        }

        private void cmbMineDroneSpecSkill_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateShipMiningDrones();
                UpdateShipMiningDroneStats();
            }
        }

        private void cmbMineBoosterDroneSpecSkill_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateBoosterMiningDrones();
                UpdateBoosterMiningDroneStats();
            }
        }

        private void cmbMineDroneInterfacingSkill_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateShipMiningDroneStats();
            }
        }

        private void cmbMineBoosterDroneInterfacingSkill_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateBoosterMiningDroneStats();
            }
        }

        #endregion

        private const int AstrogeologySkillTypeID = 3410;
        private const int DeepCoreMiningSkillTypeID = 11395;
        private const int ExhumersSkillTypeID = 22551;
        private const int ExpeditionFrigatesSkillTypeID = 33856;
        private const int GasCloudHarvestingSkillTypeID = 25544;
        private const int IceHarvestingSkillTypeID = 16281;
        private const int MiningSkillTypeID = 3386;
        private const int MiningBargeSkillTypeID = 17940;
        private const int MiningFrigateSkillTypeID = 32918;
        private const int ReprocessingSkillTypeID = 3385;
        private const int ReprocessingEfficiencySkillTypeID = 3389;

        // Drone skills
        private const int DroneInterfacingSkillTypeID = 3442;
        private const int MiningDroneOperationSkillTypeID = 3438;
        private const int MiningDroneSpecializationSkillTypeID = 22541;
        private const int IceHarvestingDroneOperationSkillTypeID = 43702;
        private const int IceHarvestingDroneSpecializationSkillTypeID = 43703;

        private double MiningDronem3Hr;
        private double IceHarvestDroneCycleTime;
        private int DroneBlocksNoHauler = 0;
        private double BoosterMiningDronem3Hr;
        private double BoosterIceHarvestDroneCycleTime;
        private int BoosterDroneBlocksNoHauler = 0;
        private bool DroneNamesLoaded;
        private string SavedOreShipName; // Whatever ship was saved in settings, which may change locally for funcationality
        private string SavedIceShipName;
        private string SavedGasShipName;

        private enum MiningShipTypeID
        {
            Venture = 32880,
            Covetor = 17476,
            Retriever = 17478,
            Hulk = 22544,
            Skiff = 22546,
            Mackinaw = 22548,
            Rorqual = 28352,
            Orca = 28606,
            Porpoise = 42244,
            Procurer = 17480,
            Drake = 24698,
            Gnosis = 3756,
            Rokh = 24688,
            Prospect = 33697,
            Endurance = 37135
        }

        private void InitMiningTab()
        {
            LoadMiningTab();
        }

        // Loads in all the skills and such for the tab 
        private void LoadMiningTab()
        {
            int i;
            int TempSkillLevel;

            {
                ref var withBlock = ref SettingsVariables.UserMiningTabSettings;
                // Ore types
                cmbMineOreType.Text = withBlock.OreType;

                chkMineIncludeHighYieldOre.Checked = withBlock.CheckHighYieldOres;
                chkMineIncludeA0StarOres.Checked = withBlock.CheckA0Ores;
                chkMineIncludeHighSec.Checked = withBlock.CheckHighSecOres;
                chkMineIncludeLowSec.Checked = withBlock.CheckLowSecOres;
                chkMineIncludeNullSec.Checked = withBlock.CheckNullSecOres;
                chkMineWH.Checked = withBlock.CheckSovWormhole;
                chkMineMoonMining.Checked = withBlock.CheckSovMoon;

                if (chkMineIncludeNullSec.Checked & chkMineWH.Checked)
                {
                    chkMineC1.Enabled = true;
                    chkMineC2.Enabled = true;
                    chkMineC3.Enabled = true;
                    chkMineC4.Enabled = true;
                    chkMineC5.Enabled = true;
                    chkMineC6.Enabled = true;
                }
                else
                {
                    chkMineC1.Enabled = false;
                    chkMineC2.Enabled = false;
                    chkMineC3.Enabled = false;
                    chkMineC4.Enabled = false;
                    chkMineC5.Enabled = false;
                    chkMineC6.Enabled = false;
                    // Can't check wh if they don't select null
                    chkMineWH.Checked = false;
                }

                // Check all locations
                chkMineAmarr.Checked = withBlock.CheckSovAmarr;
                chkMineCaldari.Checked = withBlock.CheckSovCaldari;
                chkMineGallente.Checked = withBlock.CheckSovGallente;
                chkMineMinmatar.Checked = withBlock.CheckSovMinmatar;
                chkMineTriglavian.Checked = withBlock.CheckSovTriglavian;
                chkMineEDENCOM.Checked = withBlock.CheckEDENCOM;

                chkMineC1.Checked = withBlock.CheckSovC1;
                chkMineC2.Checked = withBlock.CheckSovC2;
                chkMineC3.Checked = withBlock.CheckSovC3;
                chkMineC4.Checked = withBlock.CheckSovC4;
                chkMineC5.Checked = withBlock.CheckSovC5;
                chkMineC6.Checked = withBlock.CheckSovC6;

                // Fleet booster
                chkMineUseFleetBooster.Checked = withBlock.CheckUseFleetBooster;
                cmbMineBoosterShipName.Text = withBlock.BoosterShip;
                cmbMineMiningDirector.Text = withBlock.MiningDirectorSkill.ToString();
                cmbMineMiningForeman.Text = withBlock.MiningFormanSkill.ToString();
                cmbMineBoosterShipSkill.Text = withBlock.BoosterShipSkill.ToString();
                chkMineForemanMindlink.Checked = withBlock.CheckMiningForemanMindLink;
                cmbMineIndustReconfig.Text = withBlock.IndustrialReconfig.ToString();
                chkMineBoosterUseDrones.Checked = withBlock.BoosterUseDrones;

                // Booster rigs
                if (withBlock.OreType == "Ore")
                {
                    var argRigCheckbox = chkMineBoosterDroneRig1;
                    UpdateDroneRigChecks(ref argRigCheckbox, withBlock.BoosterDroneRig1);
                    chkMineBoosterDroneRig1 = argRigCheckbox;
                    var argRigCheckbox1 = chkMineBoosterDroneRig2;
                    UpdateDroneRigChecks(ref argRigCheckbox1, withBlock.BoosterDroneRig2);
                    chkMineBoosterDroneRig2 = argRigCheckbox1;
                    var argRigCheckbox2 = chkMineBoosterDroneRig3;
                    UpdateDroneRigChecks(ref argRigCheckbox2, withBlock.BoosterDroneRig3);
                    chkMineBoosterDroneRig3 = argRigCheckbox2;
                }
                else if (withBlock.OreType == "Ice")
                {
                    var argRigCheckbox3 = chkMineBoosterDroneRig1;
                    UpdateDroneRigChecks(ref argRigCheckbox3, withBlock.BoosterIceDroneRig1);
                    chkMineBoosterDroneRig1 = argRigCheckbox3;
                    var argRigCheckbox4 = chkMineBoosterDroneRig2;
                    UpdateDroneRigChecks(ref argRigCheckbox4, withBlock.BoosterIceDroneRig2);
                    chkMineBoosterDroneRig2 = argRigCheckbox4;
                    var argRigCheckbox5 = chkMineBoosterDroneRig3;
                    UpdateDroneRigChecks(ref argRigCheckbox5, withBlock.BoosterIceDroneRig3);
                    chkMineBoosterDroneRig3 = argRigCheckbox5;
                }

                switch (withBlock.CheckRorqDeployed)
                {
                    case 2:
                        {
                            chkMineIndyCoreDeployedMode.CheckState = CheckState.Indeterminate;
                            break;
                        }
                    case 1:
                        {
                            chkMineIndyCoreDeployedMode.Checked = true;
                            break;
                        }
                    case 0:
                        {
                            chkMineIndyCoreDeployedMode.Checked = false;
                            break;
                        }
                }

                UpdateIndustrialCoreCheck();

                switch (withBlock.CheckMineForemanLaserOpBoost)
                {
                    case 2:
                        {
                            chkMineForemanLaserOpBoost.CheckState = CheckState.Indeterminate;
                            break;
                        }
                    case 1:
                        {
                            chkMineForemanLaserOpBoost.Checked = true;
                            break;
                        }
                    case 0:
                        {
                            chkMineForemanLaserOpBoost.Checked = false;
                            break;
                        }
                }

                switch (withBlock.CheckMineForemanLaserRangeBoost)
                {
                    case 2:
                        {
                            chkMineForemanLaserRangeBoost.CheckState = CheckState.Indeterminate;
                            break;
                        }
                    case 1:
                        {
                            chkMineForemanLaserRangeBoost.Checked = true;
                            break;
                        }
                    case 0:
                        {
                            chkMineForemanLaserRangeBoost.Checked = false;
                            break;
                        }
                }

                // Update the Booster boxes
                UpdateBoosterSkills();

                // Refining
                chkMineRefinedOre.Checked = withBlock.RefinedOre;
                chkMineUnrefinedOre.Checked = withBlock.UnrefinedOre;
                chkMineCompressedOre.Checked = withBlock.CompressedOre;

                // Hauler
                if (withBlock.CheckUseHauler)
                {
                    lblMineHaulerM3.Enabled = false;
                    lblMineRTMin.Enabled = false;
                    lblMineRTSec.Enabled = false;
                }
                else
                {
                    lblMineHaulerM3.Enabled = true;
                    lblMineRTMin.Enabled = true;
                    lblMineRTSec.Enabled = true;
                }

                chkMineUseHauler.Checked = withBlock.CheckUseHauler;
                txtMineRTMin.Text = Strings.FormatNumber(withBlock.RoundTripMin, 0);
                txtMineRTSec.Text = Strings.FormatNumber(withBlock.RoundTripSec, 0);
                txtMineHaulerM3.Text = Strings.FormatNumber(withBlock.Haulerm3, 0);

                MiningColumnClicked = withBlock.ColumnSort;
                if (withBlock.ColumnSortType == "Ascending")
                {
                    MiningColumnSortType = SortOrder.Ascending;
                }
                else
                {
                    MiningColumnSortType = SortOrder.Descending;
                }

                // Taxes and Fees
                chkMineIncludeBrokerFees.Checked = withBlock.CheckIncludeFees;
                chkMineIncludeTaxes.Checked = withBlock.CheckIncludeTaxes;

                txtMineBrokerFeeRate.Text = Strings.FormatPercent(withBlock.BrokerFeeRate, 1);

                // Michii
                chkMineMichiImplant.Checked = withBlock.MichiiImplant;

                // Number of miners
                txtMineNumberMiners.Text = withBlock.NumberofMiners.ToString();

                // Upgrades and miner types - different for Ice or Ore
                if (withBlock.OreType == "Ore")
                {
                    gbMiningRigs.Enabled = true;
                    cmbMineShipName.Text = withBlock.OreMiningShip;
                    SavedOreShipName = withBlock.OreMiningShip;
                    cmbMineMiningLaser.Text = withBlock.OreStrip;
                    cmbMineDroneName.Text = withBlock.MiningDrone;
                    cmbMineNumMiningDrones.Text = withBlock.NumMiningDrones;
                    if (cmbMineMiningUpgrade.Items.Contains(withBlock.OreUpgrade))
                    {
                        cmbMineMiningUpgrade.Text = withBlock.OreUpgrade;
                    }
                    else
                    {
                        cmbMineMiningUpgrade.Text = Public_Variables.None;
                    }
                    cmbMineNumLasers.Text = withBlock.NumOreMiners.ToString();
                    cmbMineNumMiningUpgrades.Text = withBlock.NumOreUpgrades.ToString();
                    cmbMineMiningRig1.Text = withBlock.ShipDroneRig1;
                    cmbMineMiningRig2.Text = withBlock.ShipDroneRig2;
                    cmbMineMiningRig3.Text = withBlock.ShipDroneRig3;
                }
                else if (withBlock.OreType == "Ice")
                {
                    gbMiningRigs.Enabled = true;
                    cmbMineShipName.Text = withBlock.IceMiningShip;
                    SavedIceShipName = withBlock.IceMiningShip;
                    cmbMineMiningLaser.Text = withBlock.IceStrip;
                    cmbMineDroneName.Text = withBlock.IceMiningDrone;
                    cmbMineNumMiningDrones.Text = withBlock.NumIceMiningDrones;
                    if (cmbMineMiningUpgrade.Items.Contains(withBlock.IceUpgrade))
                    {
                        cmbMineMiningUpgrade.Text = withBlock.IceUpgrade;
                    }
                    else
                    {
                        cmbMineMiningUpgrade.Text = Public_Variables.None;
                    }
                    cmbMineNumLasers.Text = withBlock.NumIceMiners.ToString();
                    cmbMineNumMiningUpgrades.Text = withBlock.NumIceUpgrades.ToString();
                    cmbMineMiningRig1.Text = withBlock.ShipIceDroneRig1;
                    cmbMineMiningRig2.Text = withBlock.ShipIceDroneRig2;
                    cmbMineMiningRig3.Text = withBlock.ShipIceDroneRig3;
                }
                else if (withBlock.OreType == "Gas")
                {
                    cmbMineDroneName.Text = Public_Variables.None;
                    cmbMineNumMiningDrones.Text = "";
                    cmbMineShipName.Text = withBlock.GasMiningShip;
                    SavedGasShipName = withBlock.GasMiningShip;
                    cmbMineMiningLaser.Text = withBlock.GasHarvester;
                    cmbMineMiningUpgrade.Text = withBlock.GasUpgrade;
                    cmbMineNumLasers.Text = withBlock.NumGasHarvesters.ToString();
                    cmbMineNumMiningUpgrades.Text = withBlock.NumGasUpgrades.ToString();
                    gbMiningRigs.Enabled = false;
                }

                if (withBlock.OreType == "Ore")
                {
                    gbMineCrystals.Enabled = true;
                    if (withBlock.T1Crystals)
                    {
                        chkMineT1Crystals.Checked = true;
                    }
                    else
                    {
                        chkMineT1Crystals.Checked = false;
                    }
                    if (withBlock.T2Crystals)
                    {
                        chkMineT2Crystals.Checked = true;
                    }
                    else
                    {
                        chkMineT2Crystals.Checked = false;
                    }

                    if (withBlock.CrystalTypeA)
                    {
                        chkMineTypeA.Checked = true;
                    }
                    else
                    {
                        chkMineTypeA.Checked = false;
                    }
                    if (withBlock.CrystalTypeB)
                    {
                        chkMineTypeB.Checked = true;
                    }
                    else
                    {
                        chkMineTypeB.Checked = false;
                    }
                    if (withBlock.CrystalTypeC)
                    {
                        chkMineTypeC.Checked = true;
                    }
                    else
                    {
                        chkMineTypeC.Checked = false;
                    }
                }

                else
                {
                    gbMineCrystals.Enabled = false;
                }

                // Implants
                UpdateMiningImplants();

                // Load the ore processing skills
                var loopTo = MineProcessingCheckBoxes.Count() - 1;
                for (i = 1; i <= loopTo; i++)
                {
                    TempSkillLevel = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(Public_Variables.SelectedCharacter.Skills.GetSkillTypeID(MineProcessingLabels[i].Text));
                    if (TempSkillLevel != 0)
                    {
                        MineProcessingCombos[i].Text = TempSkillLevel.ToString();
                        MineProcessingCheckBoxes[i].Checked = true;
                    }
                    else
                    {
                        MineProcessingCombos[i].Text = "0";
                        MineProcessingCheckBoxes[i].Checked = false;
                    }
                }

                // Update the ore processing skills
                UpdateProcessingSkills();

            }

            // Load all the skills for the character
            LoadCharacterMiningSkills();

            // Updates the mining ship form with correct boxes enabled and equipment, etc
            UpdateMiningShipForm(true);

            // Set drones now that everything else is loaded
            DroneNamesLoaded = false;
            UpdateShipMiningDrones();
            UpdateShipMiningDroneStats();
            UpdateBoosterMiningDrones();
            UpdateBoosterMiningDroneStats();

            // Load up the ship image
            LoadMiningshipImage();

            // Clear the grid
            lstMineGrid.Items.Clear();

        }

        private enum MiningOreType
        {
            Ore = 1,
            Ice = 2,
            Gas = 3
        }

        // Main grid function for loading ores to mine
        public void LoadMiningGrid()
        {
            string SQL;
            string SQLMain;
            SQLiteDataReader readerMine;
            SQLiteDataReader readerCrystal;
            SQLiteDataReader readerOre;
            int i;
            ListViewItem lstOreRow;
            var AttribLookup = new EVEAttributes();
            var MiningType = default(MiningOreType);

            double ShipMiningYield;
            double BaseCycleTime;
            string CycleTimeLabel = "";
            double CycleTime;
            var CrystalMiningYield = default(double);
            var OreList = new List<MiningOre>();
            MiningOre TempOre = default;

            var Orem3PerSecond = default(double);
            var OrePerSecond = default(double);

            double ResidueProbability = 0d;
            double ModuleResidueProbability = 0d;
            double ResidueVolumeMuliplier = 0d;
            double ModuleResidueVolumeMuliplier = 0d;
            double MiningLaserBaseCycleTime = 0d;

            // Ice stuff
            int IceCylesPerHour;
            int IceBlocksPerHour;
            // Ice Hauling
            int NumIceBlocksFullCargo;

            double ReprocessingYield; // For reference out of refining
            var ReprocessingTax = default(double);

            int TotalDroneIceBlocksPerHour = 0;
            double TotalDroneOrePerHour = 0d;

            // For hauler calcs
            double SecondstoFill;  // How much time it took to fill the m3 value with ore
            double FillCycles; // How many cycles it will take to fill the m3 value with ore in an hour
            long RTTimetoStationSeconds = 0L; // Seconds to get back to station to drop off ore

            double HeavyWaterCost = 0d; // Total it costs to run the Rorq in deployed mode

            string MoonType = "";

            double CycletimeNoCrystal = 0d; // If this is zero, then use the calculated rate, else use the base time because it takes crystal time into account

            // Determine multiplier - assume all additional mining ships have the same yield and other costs
            int MinerMultiplier = Conversions.ToInteger(txtMineNumberMiners.Text);

            DroneBlocksNoHauler = 0;
            BoosterDroneBlocksNoHauler = 0;
            IceBlocksPerHour = 0;

            // Error checks
            if (!CheckMiningEntryData())
            {
                return;
            }

            lstMineGrid.Items.Clear();
            lstMineGrid.BeginUpdate();
            lblMineCycleTime.Text = "";
            lblMineRange.Text = "";
            Cursor = Cursors.WaitCursor;
            Application.DoEvents();

            switch (cmbMineOreType.Text ?? "")
            {
                case "Ore":
                    {
                        MiningType = MiningOreType.Ore;
                        break;
                    }
                case "Ice":
                    {
                        MiningType = MiningOreType.Ice;
                        break;
                    }
                case "Gas":
                    {
                        MiningType = MiningOreType.Gas;
                        break;
                    }
            }

            // First determine what type of stuff we are mining
            SQLMain = "SELECT ORES.ORE_ID, ORE_NAME, ORE_VOLUME, UNITS_TO_REFINE, SPACE, BELT_TYPE FROM ORES, ORE_LOCATIONS ";
            SQL = "WHERE ORES.ORE_ID = ORE_LOCATIONS.ORE_ID ";

            string BeltTypeSQL = "AND (";

            // Always add type
            BeltTypeSQL += "BELT_TYPE = '" + cmbMineOreType.Text + "' OR ";

            if (chkMineMoonMining.Checked == true & chkMineMoonMining.Enabled == true)
            {
                BeltTypeSQL += "BELT_TYPE LIKE('%Moon Asteroid%') OR ";
            }

            if (chkMineIncludeA0StarOres.Checked)
            {
                BeltTypeSQL += "BELT_TYPE = 'A0 Ore' OR ";
            }

            SQL += BeltTypeSQL.Substring(0, Strings.Len(BeltTypeSQL) - 4) + ") ";

            // See if we want High yield ores
            if (MiningType == MiningOreType.Ice)
            {
                SQL += "AND ORES.HIGH_YIELD_ORE = -1 ";
            }
            else if (MiningType == MiningOreType.Gas)
            {
                SQL += "AND ORES.HIGH_YIELD_ORE = -2 ";
            }
            else if (chkMineIncludeHighYieldOre.Checked == false)
            {
                // Only base ores
                SQL += "AND ORES.HIGH_YIELD_ORE = 0 ";
            }

            // See where we want this for security
            SQL += "AND SYSTEM_SECURITY IN (";

            if (chkMineIncludeHighSec.Checked)
            {
                SQL += "'High Sec',";
            }
            if (chkMineIncludeLowSec.Checked)
            {
                SQL += "'Low Sec',";
            }
            if (chkMineIncludeNullSec.Checked)
            {
                SQL += "'Null Sec',";
            }

            // If WH checked, then add the classes
            if (chkMineWH.Checked == true)
            {
                if (chkMineC1.Checked & chkMineC1.Enabled)
                {
                    SQL += "'C1',";
                }
                if (chkMineC2.Checked & chkMineC2.Enabled)
                {
                    SQL += "'C2',";
                }
                if (chkMineC3.Checked & chkMineC3.Enabled)
                {
                    SQL += "'C3',";
                }
                if (chkMineC4.Checked & chkMineC4.Enabled)
                {
                    SQL += "'C4',";
                }
                if (chkMineC5.Checked & chkMineC5.Enabled)
                {
                    SQL += "'C5',";
                }
                if (chkMineC6.Checked & chkMineC6.Enabled)
                {
                    SQL += "'C6',";
                }
            }

            SQL = SQL.Substring(0, Strings.Len(SQL) - 1) + ") ";

            // Now determine what space we are looking at
            SQL += "AND SPACE IN (";

            if (chkMineAmarr.Checked)
            {
                SQL += "'Amarr',";
            }
            if (chkMineCaldari.Checked)
            {
                SQL += "'Caldari',";
            }
            if (chkMineGallente.Checked)
            {
                SQL += "'Gallente',";
            }
            if (chkMineMinmatar.Checked)
            {
                SQL += "'Minmatar',";
            }
            if (chkMineTriglavian.Checked)
            {
                SQL += "'Triglavian',";
            }
            if (chkMineWH.Checked)
            {
                SQL += "'WH',";
            }
            if (chkMineMoonMining.Checked)
            {
                SQL += "'Moon',";
            }
            SQL = SQL.Substring(0, Strings.Len(SQL) - 1) + ") ";

            // Group them
            string SQLGroup = "GROUP BY ORES.ORE_ID, ORE_NAME, ORE_VOLUME, UNITS_TO_REFINE ";

            // Based on the crystal types selected, they could have 7 different types of returns - no crystal, and T1, T2, with all 3 types (A,B,C)
            // So set the loops we need 
            // NEED TO LOOK UP CRYSTAL TYPE FOR EACH ORE
            var CrystalList = new List<string>();

            if (gbMineCrystals.Enabled & gbMineCrystalType.Enabled)
            {
                if (chkMineT1Crystals.Checked)
                {
                    if (chkMineTypeA.Checked)
                    {
                        CrystalList.Add("Type A I");
                    }
                    if (chkMineTypeB.Checked)
                    {
                        CrystalList.Add("Type B I");
                    }
                    if (chkMineTypeC.Checked)
                    {
                        CrystalList.Add("Type C I");
                    }
                }
                if (chkMineT2Crystals.Checked)
                {
                    if (chkMineTypeA.Checked)
                    {
                        CrystalList.Add("Type A II");
                    }
                    if (chkMineTypeB.Checked)
                    {
                        CrystalList.Add("Type B II");
                    }
                    if (chkMineTypeC.Checked)
                    {
                        CrystalList.Add("Type C II");
                    }
                }
                if (chkMineT1Crystals.Checked == false & chkMineT2Crystals.Checked == false)
                {
                    // They can't have a type without a tech, so just set to none
                    CrystalList.Add(Public_Variables.None);
                }
            }
            else
            {
                // No crystals for this module so just run one time
                CrystalList.Add(Public_Variables.None);
            }

            // Get Heavy Water costs
            if ((chkMineIndyCoreDeployedMode.Checked | chkMineIndyCoreDeployedMode.CheckState == CheckState.Indeterminate) & Conversions.ToInteger(cmbMineIndustReconfig.Text) != 0 & chkMineUseFleetBooster.Checked)
            {
                // Add (subtract from total isk) the heavy water cost
                HeavyWaterCost = CalculateIndyCoreDeployedCost(Conversions.ToInteger(cmbMineIndustReconfig.Text), Conversions.ToInteger(cmbMineBoosterShipSkill.Text));
            }
            else
            {
                HeavyWaterCost = 0d;
            }

            // Refining
            var ReprocessedMaterials = new Materials();
            // These will only set up base refine rates, we need to adjust with the rig updated rates
            var ReprocessingStation = new ReprocessingPlant(MineRefineFacility.GetFacility(ProductionType.Reprocessing), SettingsVariables.UserApplicationSettings.RefiningImplantValue);

            // Set the progress bar on the main tab
            pnlProgressBar.Value = 0;
            pnlProgressBar.Minimum = 0;
            pnlProgressBar.Maximum = 0;

            // Get the total count of rows for the progressbar - start with multplier
            int OreTypes = 0;
            if (chkMineRefinedOre.Checked & !(MiningType == MiningOreType.Gas))
            {
                OreTypes += 1;
            }
            if (chkMineUnrefinedOre.Checked | MiningType == MiningOreType.Gas)
            {
                OreTypes += 1;
            }

            // If they have 0 ore types, then they must want compressed
            if (OreTypes != 0)
            {
                // Get the count of all non-compressed items 
                Public_Variables.DBCommand = new SQLiteCommand("SELECT COUNT(*) FROM (SELECT DISTINCT ORE_NAME FROM ORES, ORE_LOCATIONS " + SQL + " AND COMPRESSED = 0)", Public_Variables.EVEDB.DBREf());
                readerMine = Public_Variables.DBCommand.ExecuteReader();
                readerMine.Read();

                // Set the initial max value without compressed ores taken into account
                pnlProgressBar.Maximum = readerMine.GetInt32(0) * CrystalList.Count * OreTypes;
                readerMine.Close();
            }

            // Get the count of all compressed items if checked
            if (chkMineCompressedOre.Checked)
            {
                Public_Variables.DBCommand = new SQLiteCommand("SELECT COUNT(*) FROM (SELECT DISTINCT ORE_NAME FROM ORES, ORE_LOCATIONS " + SQL + " AND COMPRESSED = 1)", Public_Variables.EVEDB.DBREf());
                readerMine = Public_Variables.DBCommand.ExecuteReader();
                readerMine.Read();
                // Add the count and adjust for crystals
                pnlProgressBar.Maximum += readerMine.GetInt32(0) * CrystalList.Count;
                readerMine.Close();
            }

            if (pnlProgressBar.Maximum > 0)
            {
                pnlProgressBar.Maximum -= 1;
            }
            pnlProgressBar.Visible = true;
            pnlStatus.Text = "Calculating Mining Values...";

            Application.DoEvents();

            // Run for main query - Only get the ore list of base ores and add compressed values later
            Public_Variables.DBCommand = new SQLiteCommand(SQLMain + SQL + " AND COMPRESSED = 0 " + SQLGroup, Public_Variables.EVEDB.DBREf());
            readerMine = Public_Variables.DBCommand.ExecuteReader();

            double CrystalYieldModifier;
            double CrystalAsteroidDurationMultiplier;

            // Get the module state values
            ModuleResidueProbability = AttribLookup.GetAttribute(cmbMineMiningLaser.Text, ItemAttributes.miningWasteProbability);
            ModuleResidueVolumeMuliplier = AttribLookup.GetAttribute(cmbMineMiningLaser.Text, ItemAttributes.miningWastedVolumeMultiplier);
            MiningLaserBaseCycleTime = AttribLookup.GetAttribute(cmbMineMiningLaser.Text, ItemAttributes.duration);

            // Boosters use one module and charges for boosting 
            double GangBurstBonusCycle = 0d;
            double GangBurstBonusRange = 0d;
            if (chkMineUseFleetBooster.Checked)
            {
                GangBurstBonusCycle = CalculateBurstBonus(BurstBonusType.Cycle, chkMineForemanLaserOpBoost);
                GangBurstBonusRange = CalculateBurstBonus(BurstBonusType.Range, chkMineForemanLaserRangeBoost);
            }

            // Loop through all the ores and determine ore amount, refine, 
            while (readerMine.Read())
            {
                // For each crystal type and tech, calculate a row
                foreach (var Crystal in CrystalList)
                {
                    Application.DoEvents();

                    // Reset these
                    ResidueProbability = ModuleResidueProbability;
                    ResidueVolumeMuliplier = ModuleResidueVolumeMuliplier;

                    // DB Data
                    TempOre = new MiningOre();
                    ReprocessingYield = 0d;
                    TempOre.OreID = readerMine.GetInt64(0);
                    TempOre.OreName = readerMine.GetString(1);
                    TempOre.OreVolume = readerMine.GetDouble(2);
                    TempOre.UnitsToRefine = readerMine.GetInt32(3);
                    TempOre.Space = readerMine.GetString(4);
                    TempOre.BeltType = readerMine.GetString(5);

                    CrystalYieldModifier = 1d;
                    CrystalAsteroidDurationMultiplier = 1d;

                    if ((Crystal ?? "") != Public_Variables.None)
                    {
                        // Get the crystal id from the list and look up crystal mining bonus, residue probability and volume, and cycle time bonus
                        string CSQL;
                        CSQL = "Select attributeID, value from TYPE_ATTRIBUTES WHERE typeID In ";
                        CSQL += "(Select IT.typeID FROM TYPE_ATTRIBUTES As TA, INVENTORY_TYPES As IT ";
                        CSQL += "WHERE value In (Select value FROM TYPE_ATTRIBUTES As TA, INVENTORY_TYPES As IT ";
                        CSQL += "WHERE TA.typeID = IT.typeID And attributeID = 790 And typeName = '" + TempOre.OreName + "') ";
                        CSQL += "AND TA.typeID = IT.typeID AND attributeID = 182 AND IT.typeName LIKE '%" + Crystal + "') ";
                        CSQL += "AND attributeID IN (782,3159,3160,3161)";
                        Public_Variables.DBCommand = new SQLiteCommand(CSQL, Public_Variables.EVEDB.DBREf());
                        readerCrystal = Public_Variables.DBCommand.ExecuteReader();

                        while (readerCrystal.Read())
                        {
                            switch (readerCrystal.GetInt32(0))
                            {
                                case (int)ItemAttributes.specializationAsteroidYieldMultiplier:
                                    {
                                        CrystalYieldModifier = readerCrystal.GetDouble(1);
                                        // Add rig value for mercoxit if used (32817 = rig typeid)
                                        if (cmbMineMiningRig1.Text == "Mercoxit Opt" & TempOre.OreName.Contains("Mercoxit"))
                                        {
                                            CrystalYieldModifier += AttribLookup.GetAttribute(32817, ItemAttributes.miningAmountBonus) / 100d;
                                        }

                                        break;
                                    }
                                case (int)ItemAttributes.specializationAsteroidDurationMultiplier:
                                    {
                                        CrystalAsteroidDurationMultiplier = readerCrystal.GetDouble(1);
                                        break;
                                    }
                                case (int)ItemAttributes.specializationCrystalMiningWasteProbabilityBonus:
                                    {
                                        ResidueProbability += readerCrystal.GetDouble(1);
                                        break;
                                    }
                                case (int)ItemAttributes.specializationCrystalMiningWastedVolumeMultiplierBonus:
                                    {
                                        ResidueVolumeMuliplier += readerCrystal.GetDouble(1);
                                        break;
                                    }
                            }
                        }
                        readerCrystal.Close();
                    }

                    // Save values
                    TempOre.ResidueProbability = ResidueProbability;
                    TempOre.ResidueVolumeMuliplier = ResidueVolumeMuliplier;

                    // Get the mining yield first (this is without crystals and no mercoxit)
                    if (MiningShipSelected())
                    {
                        ShipMiningYield = CalculateMiningAmount();
                        // Duration is in milliseconds - add in crystal bonus too
                        CycletimeNoCrystal = CalculateMiningCycleTime(MiningLaserBaseCycleTime / 1000d, GangBurstBonusCycle);
                        BaseCycleTime = CycletimeNoCrystal * CrystalAsteroidDurationMultiplier;
                        if (CrystalAsteroidDurationMultiplier == 1d)
                        {
                            CycleTimeLabel = Strings.FormatNumber(BaseCycleTime, 1) + " s";
                            ttMining.SetToolTip(lblMineCycleTime, "");
                        }
                        else
                        {
                            CycleTimeLabel = Strings.FormatNumber(CycletimeNoCrystal, 1) + " s*";
                            ttMining.SetToolTip(lblMineCycleTime, "* Base Cycle time without Crystal Bonus");
                        }
                    }
                    else
                    {
                        ShipMiningYield = 0d;
                        CycleTimeLabel = "N/A";
                        BaseCycleTime = 1d;
                    } // For not dividing by zero

                    TempOre.CycleTime = BaseCycleTime;

                    // If not using a hauler, adjust the cycle time based on round trip time
                    if (chkMineUseHauler.Checked == false)
                    {

                        if (TempOre.OreVolume > Conversions.ToDouble(txtMineHaulerM3.Text))
                        {
                            // You can't use this hauler for this amount of ore
                            // So no point in going on
                            Interaction.MsgBox("The volume of the hauler is too small to use for this setup.", Constants.vbExclamation, Application.ProductName);
                            txtMineHaulerM3.Focus();
                            return;
                        }

                        // Get Round Trip Time (RTT) to station to drop off ore - User entered, in seconds
                        RTTimetoStationSeconds = Conversions.ToInteger(txtMineRTMin.Text) * 60 + Conversions.ToInteger(txtMineRTSec.Text);

                    }

                    // Ore amount
                    if (!(MiningType == MiningOreType.Ice) & !(MiningType == MiningOreType.Gas))
                    {
                        // Determine crystal amount
                        CrystalMiningYield = ShipMiningYield * CrystalYieldModifier;
                        // Save the crystal type
                        TempOre.CrystalType = Crystal;
                        TempOre.OreUnitsPerCycle = CrystalMiningYield;

                        // Calculate the m3 per second for this ore including mining drone input
                        TotalDroneOrePerHour = MiningDronem3Hr;
                        if (chkMineBoosterUseDrones.Checked & chkMineUseFleetBooster.Checked)
                        {
                            TotalDroneOrePerHour += (int)Math.Round(Math.Floor(BoosterMiningDronem3Hr));
                        }
                        Orem3PerSecond = CrystalMiningYield / BaseCycleTime + TotalDroneOrePerHour / 3600d;

                        // This is the m3 per second, but need to get this ORE per second based on it's volume
                        OrePerSecond = Orem3PerSecond / TempOre.OreVolume;
                    }

                    else if (MiningType == MiningOreType.Ice)
                    {
                        TempOre.CrystalType = Public_Variables.None;
                        IceCylesPerHour = (int)Math.Round(Math.Floor(3600d / BaseCycleTime));

                        // Total ice blocks per hour
                        TotalDroneIceBlocksPerHour = (int)Math.Round(Math.Floor(MiningDronem3Hr / 1000d));
                        if (chkMineBoosterUseDrones.Checked & chkMineUseFleetBooster.Checked)
                        {
                            TotalDroneIceBlocksPerHour += (int)Math.Round(Math.Floor(BoosterMiningDronem3Hr / 1000d));
                        }

                        IceBlocksPerHour = (int)Math.Round(IceCylesPerHour * ShipMiningYield) + TotalDroneIceBlocksPerHour;

                        // Total ice blocks per cycle
                        TempOre.OreUnitsPerCycle = ShipMiningYield * 1000d; // Ice is 1000 m3
                    }

                    else if (MiningType == MiningOreType.Gas)
                    {
                        TempOre.CrystalType = Public_Variables.None;

                        TempOre.OreUnitsPerCycle = ShipMiningYield;
                        Orem3PerSecond = ShipMiningYield / BaseCycleTime;

                        // This is the m3 per second, but need to get this ORE per second based on it's volume
                        OrePerSecond = Orem3PerSecond / TempOre.OreVolume;
                    }

                    if (chkMineUseHauler.Checked == false)
                    {
                        // Treat Ore and Gas the same
                        if (!(MiningType == MiningOreType.Ice))
                        {
                            if (ShipMiningYield != 0d)
                            {
                                // How long to fill the cargo?
                                SecondstoFill = Conversions.ToDouble(txtMineHaulerM3.Text) / Orem3PerSecond;
                                // How many cycles where in this session?
                                FillCycles = SecondstoFill / BaseCycleTime;

                                // Add on the round trip time and recalculate cycle time
                                CycleTime = (FillCycles * BaseCycleTime + RTTimetoStationSeconds) / FillCycles;

                                // Recalculate with new cycle time
                                if (cmbMineOreType.Text == "Ore")
                                {
                                    Orem3PerSecond = CrystalMiningYield / CycleTime + TotalDroneOrePerHour / 3600d;
                                }
                                else // Gas
                                {
                                    Orem3PerSecond = ShipMiningYield / CycleTime;
                                }

                                // This is the m3 per second, but need to get CycleTime ORE per second based on it's volume
                                OrePerSecond = Orem3PerSecond / TempOre.OreVolume;
                            }
                            else
                            {
                                Orem3PerSecond = 0d;
                            }
                        }

                        else // Ice
                        {
                            // How much can fit in cargo?
                            NumIceBlocksFullCargo = (int)Math.Round(Math.Floor(Conversions.ToDouble(txtMineHaulerM3.Text) / TempOre.OreVolume));

                            if (ShipMiningYield != 0d)
                            {
                                // Are we using mining drones?
                                if (MiningDronem3Hr != 0d)
                                {
                                    // Figure out how many cycle times does it take to get blocks from drones using a basic harvester cycle?
                                    int NumHarvCyclesforDroneBlocks = (int)Math.Round(IceHarvestDroneCycleTime / 1000d / BaseCycleTime);
                                    // For the time we mine with drones returning, how many blocks will we get? Count harvesters and drones
                                    int BlocksperDroneCycle = (int)Math.Round(ShipMiningYield * NumHarvCyclesforDroneBlocks + Conversions.ToInteger(cmbMineNumMiningDrones.Text));

                                    // Set the fill cycles based on drone yields - how many to fill this
                                    FillCycles = (int)Math.Round(Math.Ceiling(NumIceBlocksFullCargo / (double)BlocksperDroneCycle));

                                    // Now calc the time to do those cycles
                                    // Add on the round trip time and recalculate cycle time
                                    CycleTime = (FillCycles * (NumHarvCyclesforDroneBlocks * BaseCycleTime) + RTTimetoStationSeconds) / FillCycles;

                                    // Recalculate with new cycle time
                                    IceCylesPerHour = (int)Math.Round(Math.Floor(3600d / CycleTime));

                                    // Total ice blocks per hour
                                    IceBlocksPerHour = IceCylesPerHour * BlocksperDroneCycle;

                                    // Now, reset the drone yield on the drone box and 
                                    DroneBlocksNoHauler = Conversions.ToInteger(cmbMineNumMiningDrones.Text) * IceCylesPerHour;
                                }

                                else // No drones
                                {
                                    // How many full harvester cycles to fill the cargo?
                                    FillCycles = (int)Math.Round(Math.Ceiling(NumIceBlocksFullCargo / ShipMiningYield));

                                    // Add on the round trip time and normalize cycle time with return to station
                                    CycleTime = (FillCycles * BaseCycleTime + RTTimetoStationSeconds) / FillCycles;

                                    // Recalculate with new cycle time
                                    IceCylesPerHour = (int)Math.Round(Math.Floor(3600d / CycleTime));

                                    // Total ice blocks per hour
                                    IceBlocksPerHour = (int)Math.Round(IceCylesPerHour * ShipMiningYield);

                                }

                                // Are we using a booster mining drones?
                                if (BoosterMiningDronem3Hr != 0d & chkMineUseFleetBooster.Checked)
                                {
                                    int BoosterDroneYield = Conversions.ToInteger(cmbMineBoosterNumMiningDrones.Text);
                                    // Booster only mines with drones, so how many drones are we using (1 block each drone) and how many drone runs to fill cargo?
                                    FillCycles = (int)Math.Round(Math.Ceiling(GetHaulerM3(cmbMineBoosterShipName.Text) / TempOre.OreVolume / BoosterDroneYield));

                                    // Now calc the time to do those cycles
                                    // Add on the round trip time and recalculate cycle time
                                    CycleTime = (FillCycles * (BoosterIceHarvestDroneCycleTime / 1000d) + RTTimetoStationSeconds) / FillCycles;

                                    // Recalculate with new cycle time
                                    IceCylesPerHour = (int)Math.Round(Math.Floor(3600d / CycleTime));

                                    // Total ice blocks per hour
                                    IceBlocksPerHour += IceCylesPerHour * BoosterDroneYield;

                                    // Now, reset the drone yield on the drone box and 
                                    BoosterDroneBlocksNoHauler = BoosterDroneYield * IceCylesPerHour;

                                }
                            }

                            else
                            {
                                NumIceBlocksFullCargo = 0;
                            }
                        }
                    }

                    if (MiningType == MiningOreType.Ice)
                    {
                        TempOre.UnitsPerHour = IceBlocksPerHour;
                    }
                    else
                    {
                        TempOre.UnitsPerHour = OrePerSecond * 3600d;
                    }

                    // Only refine ore or ice
                    if (chkMineRefinedOre.Checked & !(MiningType == MiningOreType.Gas))
                    {

                        var BFI = Public_Variables.GetBrokerFeeData(chkMineIncludeBrokerFees, txtMineBrokerFeeRate);
                        int TempOreProcessingSkill = Public_Variables.GetFormOreProcessingSkill(TempOre.OreName, MineProcessingLabels, MineProcessingCombos);

                        // Update the material modifier based on the type of ore
                        if (TempOre.BeltType.Contains("Moon"))
                        {
                            ReprocessingStation.GetFacilility().MaterialMultiplier = ReprocessingStation.GetFacilility().MoonOreFacilityRefineRate;
                        }
                        else if (TempOre.BeltType == "Ore")
                        {
                            ReprocessingStation.GetFacilility().MaterialMultiplier = ReprocessingStation.GetFacilility().OreFacilityRefineRate;
                        }
                        else if (TempOre.BeltType == "Ice")
                        {
                            ReprocessingStation.GetFacilility().MaterialMultiplier = ReprocessingStation.GetFacilility().IceFacilityRefineRate;
                        }

                        // Refine total Ore we mined for an hour and save the total isk/hour
                        List<string> argRefinedMineralsList = null;
                        ReprocessedMaterials = ReprocessingStation.Reprocess(TempOre.OreID, Conversions.ToInteger(cmbMineRefining.Text), Conversions.ToInteger(cmbMineRefineryEff.Text), TempOreProcessingSkill, TempOre.UnitsPerHour, chkMineIncludeTaxes.Checked, BFI, ref ReprocessingYield, ref ReprocessingTax, RefinedMineralsList: ref argRefinedMineralsList);

                        TempOre.RefineYield = ReprocessingYield;

                        if (ReprocessingStation.GetFacilility().IncludeActivityUsage)
                        {
                            TempOre.IPH = ReprocessedMaterials.GetTotalMaterialsCost() - ReprocessingTax;
                        }
                        else
                        {
                            TempOre.IPH = ReprocessedMaterials.GetTotalMaterialsCost();
                        }

                        // Add (subtract from total isk) the heavy water cost
                        TempOre.IPH = TempOre.IPH - HeavyWaterCost;

                        // Drone yield included in total ore so just for display
                        TempOre.DroneYield = GetDroneYield(MiningType == MiningOreType.Ice, MiningType == MiningOreType.Gas, MinerMultiplier);

                        // Calculate the unit price by refining one batch
                        double argReprocessingFees = (double)default;
                        List<string> argRefinedMineralsList1 = null;
                        ReprocessedMaterials = ReprocessingStation.Reprocess(TempOre.OreID, Conversions.ToInteger(cmbMineRefining.Text), Conversions.ToInteger(cmbMineRefineryEff.Text), TempOreProcessingSkill, TempOre.UnitsToRefine, chkMineIncludeTaxes.Checked, BFI, ref ReprocessingYield, ref argReprocessingFees, RefinedMineralsList: ref argRefinedMineralsList1);
                        TempOre.OreUnitPrice = ReprocessedMaterials.GetTotalMaterialsCost() / TempOre.UnitsToRefine;
                        TempOre.RefineType = "Refined";

                        if (TempOre.RefineYield == 0d)
                        {
                            TempOre.RefineYield = ReprocessingYield;
                        }

                        // For each record, update the progress bar
                        var argPG = pnlProgressBar;
                        Public_Variables.IncrementToolStripProgressBar(ref argPG);
                        pnlProgressBar = argPG;
                        OreList.Add(TempOre);
                    }

                    if (chkMineCompressedOre.Checked)
                    {
                        // First, get the unit price and volume for the compressed ore
                        SQL = "SELECT PRICE FROM ITEM_PRICES WHERE ITEM_NAME LIKE 'Compressed " + TempOre.OreName + "'";
                        Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                        readerOre = Public_Variables.DBCommand.ExecuteReader();

                        if (readerOre.Read())
                        {
                            TempOre.OreUnitPrice = readerOre.GetDouble(0);
                            // Reset the units mined
                            double SavedUnits = TempOre.UnitsPerHour;
                            // Now all blocks are 1 unit, you need 100 units to refine to get the same yield
                            // If Not MiningType = MiningOreType.Ice Then
                            // ' All ores are 100 to 1 compressed block, ice is 1 to 1
                            // TempOre.UnitsPerHour = TempOre.UnitsPerHour / 100
                            // End If

                            // Drone yield included in total ore so just for display
                            TempOre.DroneYield = GetDroneYield(MiningType == MiningOreType.Ice, MiningType == MiningOreType.Gas, MinerMultiplier);

                            // Units we mined, times unit price is IPH
                            TempOre.IPH = TempOre.UnitsPerHour * TempOre.OreUnitPrice;
                            TempOre.RefineYield = 0d;
                            TempOre.RefineType = "Compressed";
                            // For each record, update the progress bar
                            var argPG1 = pnlProgressBar;
                            Public_Variables.IncrementToolStripProgressBar(ref argPG1);
                            pnlProgressBar = argPG1;
                            OreList.Add(TempOre);
                            // Reset the units if we do unrefined
                            TempOre.UnitsPerHour = SavedUnits;
                        }

                        readerOre.Close();

                    }

                    if (chkMineUnrefinedOre.Checked | MiningType == MiningOreType.Gas) // Just use the Ore prices since we are selling it straight
                    {
                        // First, get the unit price for the ore
                        SQL = "SELECT PRICE FROM ITEM_PRICES WHERE ITEM_NAME = '" + TempOre.OreName + "'";
                        Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                        readerOre = Public_Variables.DBCommand.ExecuteReader();

                        if (readerOre.Read())
                        {
                            TempOre.OreUnitPrice = readerOre.GetDouble(0);
                            // Units we mined, times unit price is IPH 
                            TempOre.IPH = TempOre.UnitsPerHour * TempOre.OreUnitPrice;
                            TempOre.DroneYield = GetDroneYield(MiningType == MiningOreType.Ice, MiningType == MiningOreType.Gas, MinerMultiplier);
                            TempOre.RefineYield = 0d;
                            TempOre.RefineType = "Unrefined";
                            // For each record, update the progress bar
                            var argPG2 = pnlProgressBar;
                            Public_Variables.IncrementToolStripProgressBar(ref argPG2);
                            pnlProgressBar = argPG2;
                            OreList.Add(TempOre);
                        }

                        readerOre.Close();

                    }
                    Application.DoEvents();
                }
            }

            // Now update the progress panel for the list
            pnlStatus.Text = "Updating Mining List...";
            pnlProgressBar.Value = 0;
            pnlProgressBar.Maximum = OreList.Count;
            Application.DoEvents();

            // Sort the ore List by the iph
            OreList.Sort(new MiningOreIPHComparer());

            readerMine.Close();

            // Update column widths based on type - Ice, don't show Crystal, Gas, don't show Refine or Crystal
            switch (cmbMineOreType.Text ?? "")
            {
                case "Ore":
                    {
                        lstMineGrid.Columns[1].Width = MineOreNameColumnWidth;
                        lstMineGrid.Columns[4].Width = MineRefineYieldColumnWidth;
                        lstMineGrid.Columns[5].Width = MineCrystalColumnWidth;
                        break;
                    }
                case "Ice":
                    {
                        lstMineGrid.Columns[1].Width = MineOreNameColumnWidth + MineCrystalColumnWidth;
                        lstMineGrid.Columns[4].Width = MineRefineYieldColumnWidth;
                        lstMineGrid.Columns[5].Width = 0; // Hide
                        break;
                    }
                case "Gas":
                    {
                        lstMineGrid.Columns[1].Width = MineOreNameColumnWidth + MineCrystalColumnWidth + MineRefineYieldColumnWidth;
                        lstMineGrid.Columns[4].Width = 0;
                        lstMineGrid.Columns[5].Width = 0; // Hide
                        break;
                    }
            }

            var loopTo = OreList.Count - 1;
            for (i = 0; i <= loopTo; i++)
            {
                // Make sure we want to add Mercoxit
                if (!OreList[i].OreName.Contains("Mercoxit") | OreList[i].OreName.Contains("Mercoxit") & cmbMineMiningLaser.Text.Contains("Deep Core"))
                {
                    lstOreRow = new ListViewItem(OreList[i].OreID.ToString());
                    // The remaining columns are subitems  
                    MoonType = "";
                    if (OreList[i].Space == "Moon")
                    {
                        // Add the type of moon this comes from
                        {
                            var withBlock = OreList[i].OreName;
                            if (withBlock.Contains("Bitumens") | withBlock.Contains("Coesite") | withBlock.Contains("Sylvite") | withBlock.Contains("Zeolites"))
                            {
                                MoonType = " (R4)";
                            }
                            else if (withBlock.Contains("Cobaltite") | withBlock.Contains("Euxenite") | withBlock.Contains("Scheelite") | withBlock.Contains("Titanite"))
                            {
                                MoonType = " (R8)";
                            }
                            else if (withBlock.Contains("Chromite") | withBlock.Contains("Otavite") | withBlock.Contains("Sperrylite") | withBlock.Contains("Vanadinite"))
                            {
                                MoonType = " (R16)";
                            }
                            else if (withBlock.Contains("Carnotite") | withBlock.Contains("Cinnabar") | withBlock.Contains("Pollucite") | withBlock.Contains("Zircon"))
                            {
                                MoonType = " (R32)";
                            }
                            else if (withBlock.Contains("Loparite") | withBlock.Contains("Monazite") | withBlock.Contains("Xenotime") | withBlock.Contains("Ytterbite"))
                            {
                                MoonType = " (R64)";
                            }
                        }
                    }
                    lstOreRow.SubItems.Add(OreList[i].OreName + MoonType);
                    lstOreRow.SubItems.Add(OreList[i].RefineType);
                    lstOreRow.SubItems.Add(Strings.FormatNumber(OreList[i].OreUnitPrice, 2));
                    if (OreList[i].RefineYield == 0d)
                    {
                        lstOreRow.SubItems.Add("-");
                    }
                    else
                    {
                        lstOreRow.SubItems.Add(Strings.FormatPercent(OreList[i].RefineYield, 3));
                    }
                    lstOreRow.SubItems.Add(OreList[i].CrystalType);
                    // Add residue values
                    lstOreRow.SubItems.Add(Strings.FormatPercent(OreList[i].ResidueProbability / 100d, 1));
                    lstOreRow.SubItems.Add(Strings.FormatNumber(OreList[i].ResidueVolumeMuliplier, 0));
                    // Modify all three by mining multiplier
                    // lstOreRow.SubItems.Add(FormatNumber(OreList(i).OreUnitsPerCycle * MinerMultiplier, 2))
                    // For drone yield, we only apply the miner multipler to drone yield from mining ships, not booster
                    if (MiningType == MiningOreType.Ice)
                    {
                        lstOreRow.SubItems.Add(Strings.FormatNumber(OreList[i].DroneYield, 0)); // Multiplier for drone mining calculated above
                    }
                    else
                    {
                        lstOreRow.SubItems.Add(Strings.FormatNumber(OreList[i].DroneYield, 1));
                    } // Multiplier for drone mining calculated above
                    lstOreRow.SubItems.Add(Strings.FormatNumber(Math.Round(OreList[i].UnitsPerHour * MinerMultiplier), 0));
                    lstOreRow.SubItems.Add(Strings.FormatNumber(OreList[i].IPH * MinerMultiplier, 2));
                    lstOreRow.SubItems.Add(Strings.FormatNumber(OreList[i].CycleTime, 1) + " s");
                    lstMineGrid.Items.Add(lstOreRow);
                }
                var argPG3 = pnlProgressBar;
                Public_Variables.IncrementToolStripProgressBar(ref argPG3);
                pnlProgressBar = argPG3;
                Application.DoEvents();
            }

            Cursor = Cursors.Default;

            lstMineGrid.EndUpdate();

            // Update the mining range of the mining lasers selected
            lblMineRange.Text = Strings.FormatNumber(CalculateMiningRange(AttribLookup.GetAttribute(cmbMineMiningLaser.Text, ItemAttributes.maxRange), cmbMineOreType.Text, GangBurstBonusRange) / 1000d, 2) + " km";
            lblMineCycleTime.Text = CycleTimeLabel;

            i = 0;
            Cursor = Cursors.Default;
            pnlStatus.Text = "";
            pnlProgressBar.Visible = false;
            Application.DoEvents();

        }
        private double GetDroneYield(bool IceMining, bool GasMining, int NumMiners)
        {
            double Yield = 0d;

            // Drone yield included in total ore so just for display
            if (!GasMining) // No mining drones for gas
            {
                Yield = MiningDronem3Hr * NumMiners; // Add the multiple miner yield here
                if (chkMineBoosterUseDrones.Checked & chkMineUseFleetBooster.Checked)
                {
                    Yield += BoosterMiningDronem3Hr;
                }
                if (IceMining)
                {
                    if (chkMineUseHauler.Checked)
                    {
                        // Convert to blocks
                        Yield = (int)Math.Round(Math.Floor(Yield / 1000d));
                    }
                    else
                    {
                        Yield = DroneBlocksNoHauler + BoosterDroneBlocksNoHauler;
                    }
                }
            }

            return Yield;

        }

        // Refreshes the variables and labels for ore/ice/moon refining rates for the selected facility based on options selected
        public void RefreshMiningTabRefiningRates()
        {
            {
                var withBlock = MineRefineFacility.GetSelectedFacility();
                switch (cmbMineOreType.Text ?? "")
                {
                    case "Ore":
                        {
                            lblMineFacilityOreRate.Text = "Ore Rate:";
                            lblMineFacilityOreRate.Text = Strings.FormatPercent(withBlock.OreFacilityRefineRate, 2);

                            // Only enable if the moon ore checked
                            if (chkMineMoonMining.Checked == true)
                            {
                                lblMineFacilityMoonOreRate1.Enabled = true;
                                lblMineFacilityMoonOreRate.Enabled = true;
                                // Update Moon rate
                                lblMineFacilityMoonOreRate.Text = Strings.FormatPercent(withBlock.MoonOreFacilityRefineRate, 2);
                            }
                            else
                            {
                                // Disable moon
                                lblMineFacilityMoonOreRate1.Enabled = false;
                                lblMineFacilityMoonOreRate.Enabled = false;
                                lblMineFacilityMoonOreRate.Text = "-";
                            }

                            break;
                        }
                    case "Ice":
                        {
                            lblMineFacilityOreRate.Text = "Ice Rate:";
                            lblMineFacilityOreRate.Text = Strings.FormatPercent(withBlock.IceFacilityRefineRate, 2);
                            // Disable moon
                            lblMineFacilityMoonOreRate1.Enabled = false;
                            lblMineFacilityMoonOreRate.Enabled = false;
                            lblMineFacilityMoonOreRate.Text = "-";
                            break;
                        }

                    default:
                        {
                            lblMineFacilityOreRate.Text = "-";
                            lblMineFacilityMoonOreRate.Text = "-";
                            break;
                        }
                }
            }
        }

        // Loads the skills for all skill combos
        public void LoadCharacterMiningSkills()
        {

            // Load the Mining Skills for this character
            cmbMineDeepCore.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(DeepCoreMiningSkillTypeID).ToString();
            cmbMineAstrogeology.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(AstrogeologySkillTypeID).ToString();
            cmbMineSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(MiningSkillTypeID).ToString();
            cmbMineRefineryEff.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(ReprocessingEfficiencySkillTypeID).ToString();
            cmbMineRefining.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(ReprocessingSkillTypeID).ToString();

            // Drone skills
            if (cmbMineOreType.Text == "Ice")
            {
                // Ship
                if ((SettingsVariables.UserMiningTabSettings.IceDroneOpSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineDroneOpSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(IceHarvestingDroneOperationSkillTypeID).ToString();
                }
                else
                {
                    cmbMineDroneOpSkill.Text = SettingsVariables.UserMiningTabSettings.IceDroneOpSkill;
                }
                if ((SettingsVariables.UserMiningTabSettings.IceDroneSpecSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineDroneSpecSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(IceHarvestingDroneSpecializationSkillTypeID).ToString();
                }
                else
                {
                    cmbMineDroneSpecSkill.Text = SettingsVariables.UserMiningTabSettings.IceDroneSpecSkill;
                }
                if ((SettingsVariables.UserMiningTabSettings.IceDroneInterfaceSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineDroneInterfacingSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(DroneInterfacingSkillTypeID).ToString();
                }
                else
                {
                    cmbMineDroneInterfacingSkill.Text = SettingsVariables.UserMiningTabSettings.IceDroneInterfaceSkill;
                }
                // Booster
                if ((SettingsVariables.UserMiningTabSettings.BoosterIceDroneOpSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineBoosterDroneOpSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(IceHarvestingDroneOperationSkillTypeID).ToString();
                }
                else
                {
                    cmbMineBoosterDroneOpSkill.Text = SettingsVariables.UserMiningTabSettings.BoosterIceDroneOpSkill;
                }
                if ((SettingsVariables.UserMiningTabSettings.BoosterIceDroneSpecSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineBoosterDroneSpecSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(IceHarvestingDroneSpecializationSkillTypeID).ToString();
                }
                else
                {
                    cmbMineBoosterDroneSpecSkill.Text = SettingsVariables.UserMiningTabSettings.BoosterIceDroneSpecSkill;
                }
                if ((SettingsVariables.UserMiningTabSettings.BoosterIceDroneInterfaceSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineBoosterDroneInterfacingSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(DroneInterfacingSkillTypeID).ToString();
                }
                else
                {
                    cmbMineBoosterDroneInterfacingSkill.Text = SettingsVariables.UserMiningTabSettings.BoosterIceDroneInterfaceSkill;
                }
            }
            else // If cmbMineOreType.Text = "Ore" Then
            {
                // Ship
                if ((SettingsVariables.UserMiningTabSettings.DroneOpSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineDroneOpSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(MiningDroneOperationSkillTypeID).ToString();
                }
                else
                {
                    cmbMineDroneOpSkill.Text = SettingsVariables.UserMiningTabSettings.DroneOpSkill;
                }
                if ((SettingsVariables.UserMiningTabSettings.DroneSpecSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineDroneSpecSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(MiningDroneSpecializationSkillTypeID).ToString();
                }
                else
                {
                    cmbMineDroneSpecSkill.Text = SettingsVariables.UserMiningTabSettings.DroneSpecSkill;
                }
                if ((SettingsVariables.UserMiningTabSettings.DroneInterfaceSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineDroneInterfacingSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(DroneInterfacingSkillTypeID).ToString();
                }
                else
                {
                    cmbMineDroneInterfacingSkill.Text = SettingsVariables.UserMiningTabSettings.DroneInterfaceSkill;
                }
                // Booster
                if ((SettingsVariables.UserMiningTabSettings.BoosterDroneOpSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineBoosterDroneOpSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(MiningDroneOperationSkillTypeID).ToString();
                }
                else
                {
                    cmbMineBoosterDroneOpSkill.Text = SettingsVariables.UserMiningTabSettings.BoosterDroneOpSkill;
                }
                if ((SettingsVariables.UserMiningTabSettings.BoosterDroneSpecSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineBoosterDroneSpecSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(MiningDroneSpecializationSkillTypeID).ToString();
                }
                else
                {
                    cmbMineBoosterDroneSpecSkill.Text = SettingsVariables.UserMiningTabSettings.BoosterDroneSpecSkill;
                }
                if ((SettingsVariables.UserMiningTabSettings.BoosterDroneInterfaceSkill ?? "") == (SettingsVariables.AllSettings.DefaultDroneSkills ?? ""))
                {
                    cmbMineBoosterDroneInterfacingSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(DroneInterfacingSkillTypeID).ToString();
                }
                else
                {
                    cmbMineBoosterDroneInterfacingSkill.Text = SettingsVariables.UserMiningTabSettings.BoosterDroneInterfaceSkill;
                }
            }

            // If this is a dummy account, set these all to 1 - TODO Remove, or re-check so they work even if 0
            if (string.IsNullOrEmpty(cmbMineAstrogeology.Text))
            {
                cmbMineAstrogeology.Text = "1";
            }
            if (string.IsNullOrEmpty(cmbMineSkill.Text))
            {
                cmbMineSkill.Text = "1";
            }

            if (cmbMineOreType.Text == "Gas")
            {
                if (Public_Variables.SelectedCharacter.Skills.GetSkillLevel(GasCloudHarvestingSkillTypeID) == 0)
                {
                    // Set it to base 1 - even though if they don't have this skill they can't fit a gas harvester
                    cmbMineGasIceHarvesting.Text = "1";
                }
                else
                {
                    cmbMineGasIceHarvesting.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(GasCloudHarvestingSkillTypeID).ToString();
                }
            }
            else if (cmbMineOreType.Text == "Ice")
            {
                cmbMineGasIceHarvesting.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(IceHarvestingSkillTypeID).ToString();
            }
            else
            {
                cmbMineGasIceHarvesting.Text = "0";
            }

            if (cmbMineOreType.Text != "Gas")
            {
                cmbMineAdvShipSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(ExhumersSkillTypeID).ToString();
            }
            else
            {
                // Load the Expedition frigate skill for the prospect
                cmbMineAdvShipSkill.Text = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(ExpeditionFrigatesSkillTypeID).ToString();
            }

            int MiningBarge = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(MiningBargeSkillTypeID);
            int MiningFrigate = Public_Variables.SelectedCharacter.Skills.GetSkillLevel(MiningFrigateSkillTypeID);

            if (MiningBarge == 0)
            {
                // Look up Mining Frigate skill
                if (MiningFrigate == 0)
                {
                    // Just set it to 1
                    cmbMineBaseShipSkill.Text = "1";
                }
                else
                {
                    cmbMineBaseShipSkill.Text = MiningFrigate.ToString();
                }
            }
            else
            {
                cmbMineBaseShipSkill.Text = MiningBarge.ToString();
            }

        }

        // Saves all the settings on the screen selected
        private void btnMineSaveSettings_Click(object sender, EventArgs e)
        {
            var TempSettings = SettingsVariables.UserMiningTabSettings;
            var Settings = new ProgramSettings();

            // Check data first
            if (!CheckMiningEntryData())
            {
                return;
            }

            // Ore types
            TempSettings.OreType = cmbMineOreType.Text;

            TempSettings.CheckHighSecOres = chkMineIncludeHighSec.Checked;
            TempSettings.CheckLowSecOres = chkMineIncludeLowSec.Checked;
            TempSettings.CheckNullSecOres = chkMineIncludeNullSec.Checked;
            TempSettings.CheckHighYieldOres = chkMineIncludeHighYieldOre.Checked;
            TempSettings.CheckA0Ores = chkMineIncludeA0StarOres.Checked;

            TempSettings.RefinedOre = chkMineRefinedOre.Checked;
            TempSettings.UnrefinedOre = chkMineUnrefinedOre.Checked;
            TempSettings.CompressedOre = chkMineCompressedOre.Checked;

            // Upgrades and miner types - different for Ice, Ore, or Gas
            if (TempSettings.OreType == "Ore")
            {
                TempSettings.OreMiningShip = cmbMineShipName.Text;
                SavedOreShipName = TempSettings.OreMiningShip;
                TempSettings.MiningDrone = cmbMineDroneName.Text;
                TempSettings.NumMiningDrones = cmbMineNumMiningDrones.Text;
                TempSettings.DroneOpSkill = cmbMineDroneOpSkill.Text;
                TempSettings.DroneSpecSkill = cmbMineDroneSpecSkill.Text;
                TempSettings.DroneInterfaceSkill = cmbMineDroneInterfacingSkill.Text;
                if (MiningShipSelected())
                {
                    TempSettings.OreStrip = cmbMineMiningLaser.Text;
                    TempSettings.OreUpgrade = cmbMineMiningUpgrade.Text;
                    TempSettings.NumOreMiners = Conversions.ToInteger(cmbMineNumLasers.Text);
                    TempSettings.NumOreUpgrades = Conversions.ToInteger(cmbMineNumMiningUpgrades.Text);
                    TempSettings.OreImplant = cmbMineHighwallImplant.Text;
                    TempSettings.T1Crystals = chkMineT1Crystals.Checked;
                    TempSettings.T2Crystals = chkMineT2Crystals.Checked;
                    TempSettings.CrystalTypeA = chkMineTypeA.Checked;
                    TempSettings.CrystalTypeB = chkMineTypeB.Checked;
                    TempSettings.CrystalTypeC = chkMineTypeC.Checked;
                }
                // Ship
                TempSettings.ShipDroneRig1 = cmbMineMiningRig1.Text;
                TempSettings.ShipDroneRig2 = cmbMineMiningRig2.Text;
                TempSettings.ShipDroneRig3 = cmbMineMiningRig3.Text;
                // Booster
                var argRigCheckBox = chkMineBoosterDroneRig1;
                SetRigCheckSetting(ref TempSettings.BoosterDroneRig1, ref argRigCheckBox);
                chkMineBoosterDroneRig1 = argRigCheckBox;
                var argRigCheckBox1 = chkMineBoosterDroneRig2;
                SetRigCheckSetting(ref TempSettings.BoosterDroneRig2, ref argRigCheckBox1);
                chkMineBoosterDroneRig2 = argRigCheckBox1;
                var argRigCheckBox2 = chkMineBoosterDroneRig3;
                SetRigCheckSetting(ref TempSettings.BoosterDroneRig3, ref argRigCheckBox2);
                chkMineBoosterDroneRig3 = argRigCheckBox2;
                TempSettings.BoosterMiningDrone = cmbMineBoosterDroneName.Text;
                TempSettings.BoosterNumMiningDrones = cmbMineBoosterNumMiningDrones.Text;
                TempSettings.BoosterDroneOpSkill = cmbMineBoosterDroneOpSkill.Text;
                TempSettings.BoosterDroneSpecSkill = cmbMineBoosterDroneSpecSkill.Text;
                TempSettings.BoosterDroneInterfaceSkill = cmbMineBoosterDroneInterfacingSkill.Text;
            }
            else if (TempSettings.OreType == "Ice")
            {
                TempSettings.IceMiningShip = cmbMineShipName.Text;
                SavedIceShipName = TempSettings.IceMiningShip;
                TempSettings.IceMiningDrone = cmbMineDroneName.Text;
                TempSettings.NumIceMiningDrones = cmbMineNumMiningDrones.Text;
                TempSettings.IceDroneOpSkill = cmbMineDroneOpSkill.Text;
                TempSettings.IceDroneSpecSkill = cmbMineDroneSpecSkill.Text;
                TempSettings.IceDroneInterfaceSkill = cmbMineDroneInterfacingSkill.Text;
                if (MiningShipSelected())
                {
                    TempSettings.IceStrip = cmbMineMiningLaser.Text;
                    TempSettings.IceUpgrade = cmbMineMiningUpgrade.Text;
                    TempSettings.NumIceMiners = Conversions.ToInteger(cmbMineNumLasers.Text);
                    TempSettings.NumIceUpgrades = Conversions.ToInteger(cmbMineNumMiningUpgrades.Text);
                    TempSettings.IceImplant = cmbMineHighwallImplant.Text;
                }
                // Ship
                TempSettings.ShipIceDroneRig1 = cmbMineMiningRig1.Text;
                TempSettings.ShipIceDroneRig2 = cmbMineMiningRig2.Text;
                TempSettings.ShipIceDroneRig3 = cmbMineMiningRig3.Text;
                // Booster
                var argRigCheckBox3 = chkMineBoosterDroneRig1;
                SetRigCheckSetting(ref TempSettings.BoosterIceDroneRig1, ref argRigCheckBox3);
                chkMineBoosterDroneRig1 = argRigCheckBox3;
                var argRigCheckBox4 = chkMineBoosterDroneRig2;
                SetRigCheckSetting(ref TempSettings.BoosterIceDroneRig2, ref argRigCheckBox4);
                chkMineBoosterDroneRig2 = argRigCheckBox4;
                var argRigCheckBox5 = chkMineBoosterDroneRig3;
                SetRigCheckSetting(ref TempSettings.BoosterIceDroneRig3, ref argRigCheckBox5);
                chkMineBoosterDroneRig3 = argRigCheckBox5;
                TempSettings.BoosterIceMiningDrone = cmbMineBoosterDroneName.Text;
                TempSettings.BoosterNumIceMiningDrones = cmbMineBoosterNumMiningDrones.Text;
                TempSettings.BoosterIceDroneOpSkill = cmbMineBoosterDroneOpSkill.Text;
                TempSettings.BoosterIceDroneSpecSkill = cmbMineBoosterDroneSpecSkill.Text;
                TempSettings.BoosterIceDroneInterfaceSkill = cmbMineBoosterDroneInterfacingSkill.Text;
            }
            else if (TempSettings.OreType == "Gas")
            {
                TempSettings.GasMiningShip = cmbMineShipName.Text;
                SavedGasShipName = TempSettings.GasMiningShip;
                TempSettings.GasHarvester = cmbMineMiningLaser.Text;
                TempSettings.GasUpgrade = Public_Variables.None;
                TempSettings.NumGasHarvesters = Conversions.ToInteger(cmbMineNumLasers.Text);
                TempSettings.NumGasUpgrades = 0;
                TempSettings.GasImplant = cmbMineHighwallImplant.Text;
            }

            // Fleet booster
            TempSettings.CheckUseFleetBooster = chkMineUseFleetBooster.Checked;
            TempSettings.BoosterShip = cmbMineBoosterShipName.Text;
            TempSettings.MiningDirectorSkill = Conversions.ToInteger(cmbMineMiningDirector.Text);
            TempSettings.MiningFormanSkill = Conversions.ToInteger(cmbMineMiningForeman.Text);
            TempSettings.BoosterShipSkill = Conversions.ToInteger(cmbMineBoosterShipSkill.Text);
            TempSettings.CheckMiningForemanMindLink = chkMineForemanMindlink.Checked;
            TempSettings.IndustrialReconfig = Conversions.ToInteger(cmbMineIndustReconfig.Text);
            TempSettings.BoosterUseDrones = chkMineBoosterUseDrones.Checked;
            if (chkMineIndyCoreDeployedMode.CheckState == CheckState.Indeterminate)
            {
                TempSettings.CheckRorqDeployed = 2;
            }
            else if (chkMineIndyCoreDeployedMode.Checked == true)
            {
                TempSettings.CheckRorqDeployed = 1;
            }
            else
            {
                TempSettings.CheckRorqDeployed = 0;
            }

            if (chkMineForemanLaserOpBoost.CheckState == CheckState.Indeterminate)
            {
                TempSettings.CheckMineForemanLaserOpBoost = 2;
            }
            else if (chkMineForemanLaserOpBoost.Checked == true)
            {
                TempSettings.CheckMineForemanLaserOpBoost = 1;
            }
            else
            {
                TempSettings.CheckMineForemanLaserOpBoost = 0;
            }

            if (chkMineForemanLaserRangeBoost.CheckState == CheckState.Indeterminate)
            {
                TempSettings.CheckMineForemanLaserRangeBoost = 2;
            }
            else if (chkMineForemanLaserRangeBoost.Checked == true)
            {
                TempSettings.CheckMineForemanLaserRangeBoost = 1;
            }
            else
            {
                TempSettings.CheckMineForemanLaserRangeBoost = 0;
            }

            // Check all locations
            TempSettings.CheckSovAmarr = chkMineAmarr.Checked;
            TempSettings.CheckSovCaldari = chkMineCaldari.Checked;
            TempSettings.CheckSovGallente = chkMineGallente.Checked;
            TempSettings.CheckSovMinmatar = chkMineMinmatar.Checked;
            TempSettings.CheckSovTriglavian = chkMineTriglavian.Checked;
            TempSettings.CheckEDENCOM = chkMineEDENCOM.Checked;
            TempSettings.CheckSovWormhole = chkMineWH.Checked;
            TempSettings.CheckSovMoon = chkMineMoonMining.Checked;

            TempSettings.CheckSovC1 = chkMineC1.Checked;
            TempSettings.CheckSovC2 = chkMineC2.Checked;
            TempSettings.CheckSovC3 = chkMineC3.Checked;
            TempSettings.CheckSovC4 = chkMineC4.Checked;
            TempSettings.CheckSovC5 = chkMineC5.Checked;
            TempSettings.CheckSovC6 = chkMineC6.Checked;

            // Save it in the Application settings
            Settings.SaveApplicationSettings(SettingsVariables.UserApplicationSettings);

            TempSettings.ColumnSort = MiningColumnClicked;
            if (MiningColumnSortType == SortOrder.Ascending)
            {
                TempSettings.ColumnSortType = "Ascending";
            }
            else
            {
                TempSettings.ColumnSortType = "Decending";
            }

            TempSettings.CheckUseHauler = chkMineUseHauler.Checked;

            // Hauler - only save values if not using hauler
            if (chkMineUseHauler.Checked == false)
            {
                TempSettings.RoundTripMin = Conversions.ToInteger(txtMineRTMin.Text);
                TempSettings.RoundTripSec = Conversions.ToInteger(txtMineRTSec.Text);
                TempSettings.Haulerm3 = Conversions.ToDouble(txtMineHaulerM3.Text);
            }
            else
            {
                TempSettings.RoundTripMin = Settings.DefaultMiningRoundTripMin;
                TempSettings.RoundTripSec = Settings.DefaultMiningRoundTripSec;
                TempSettings.Haulerm3 = Settings.DefaultMiningHaulerm3;
            }

            // Taxes and Fees
            TempSettings.CheckIncludeFees = chkMineIncludeBrokerFees.Checked;
            TempSettings.CheckIncludeTaxes = chkMineIncludeTaxes.Checked;

            // Michii
            TempSettings.MichiiImplant = chkMineMichiImplant.Checked;

            // Number of miners

            TempSettings.NumberofMiners = Conversions.ToInteger(txtMineNumberMiners.Text);

            // Save the data in the XML file
            Settings.SaveMiningSettings(TempSettings);

            // Save the data to the local variable
            SettingsVariables.UserMiningTabSettings = TempSettings;

            Interaction.MsgBox("Settings Saved", Constants.vbInformation, Application.ProductName);

        }

        private void SetRigCheckSetting(ref int SettingValue, ref CheckBox RigCheckBox)
        {
            if (RigCheckBox.CheckState == CheckState.Indeterminate)
            {
                SettingValue = 2;
            }
            else if (RigCheckBox.Checked == true)
            {
                SettingValue = 1;
            }
            else
            {
                SettingValue = 0;
            }
        }

        // Loads the Fleet Boost Ship image
        private void LoadFleetBoosterImage()
        {
            if (chkMineUseFleetBooster.Checked)
            {
                string ShipName;

                if (cmbMineBoosterShipName.Text == "Other")
                {
                    ShipName = Public_Variables.Rokh;
                }
                else if (cmbMineBoosterShipName.Text == "Battlecruiser")
                {
                    ShipName = Public_Variables.Gnosis;
                }
                else
                {
                    ShipName = cmbMineBoosterShipName.Text;
                }

                string BPImage = GetMiningShipImage(ShipName);

                if (File.Exists(BPImage))
                {
                    pictMineFleetBoostShip.Image = Image.FromFile(BPImage);
                }
                else
                {
                    pictMineFleetBoostShip.Image = null;
                }
            }

            else
            {
                pictMineFleetBoostShip.Image = null;
            }

            pictMineFleetBoostShip.Update();

        }

        // Loads the Mining Ship Image
        private void LoadMiningshipImage()
        {
            string ShipName;

            if (cmbMineShipName.Text == "Other")
            {
                ShipName = Public_Variables.Rokh;
            }
            else if (cmbMineShipName.Text == "Battlecruiser")
            {
                ShipName = Public_Variables.Gnosis;
            }
            else
            {
                ShipName = cmbMineShipName.Text;
            }

            string BPImage = GetMiningShipImage(ShipName);

            if (File.Exists(BPImage))
            {
                pictMineSelectedShip.Image = Image.FromFile(BPImage);
            }
            else
            {
                pictMineSelectedShip.Image = null;
            }

            pictMineSelectedShip.Update();

        }

        // Loads the implants for the mining type
        private void UpdateMiningImplants()
        {
            int ReqSkill;
            var AttribLookup = new EVEAttributes();

            // Clear implants
            cmbMineHighwallImplant.Items.Clear();

            // Set Ore or Ice implants
            if (cmbMineOreType.Text == "Ice")
            {
                cmbMineHighwallImplant.Items.Add(Public_Variables.None);
                // Inherent Implants 'Yeti' Ice Harvesting IH-1001
                cmbMineHighwallImplant.Items.Add("'Yeti' IH-1001");
                cmbMineHighwallImplant.Items.Add("'Yeti' IH-1003");
                cmbMineHighwallImplant.Items.Add("'Yeti' IH-1005");

                // No Michi for ice
                chkMineMichiImplant.Enabled = false;
                chkMineMichiImplant.ForeColor = Color.Black;

                cmbMineHighwallImplant.Text = SettingsVariables.UserMiningTabSettings.IceImplant;
            }

            else if (cmbMineOreType.Text == "Ore")
            {
                // Inherent Implants 'Highwall' Mining MX-1001
                cmbMineHighwallImplant.Items.Add(Public_Variables.None);
                cmbMineHighwallImplant.Items.Add("'Highwall' MX-1001");
                cmbMineHighwallImplant.Items.Add("'Highwall' MX-1003");
                cmbMineHighwallImplant.Items.Add("'Highwall' MX-1005");

                if (MiningShipSelected())
                {
                    chkMineMichiImplant.Enabled = true;
                }
                else
                {
                    chkMineMichiImplant.Enabled = false;
                    chkMineMichiImplant.ForeColor = Color.Black;
                }

                // Michi Implant
                ReqSkill = (int)Math.Round(AttribLookup.GetAttribute("Michi's Excavation Augmentor", ItemAttributes.requiredSkill1Level));
                if (ReqSkill != Public_Variables.SelectedCharacter.Skills.GetSkillLevel(3411L))
                {
                    chkMineMichiImplant.ForeColor = Color.Red;
                    if (SettingsVariables.UserApplicationSettings.ShowToolTips)
                    {
                        ttBP.SetToolTip(chkMineMichiImplant, "Requires Cybernetics " + ReqSkill);
                    }
                }
                else
                {
                    chkMineMichiImplant.ForeColor = Color.Black;
                }

                cmbMineHighwallImplant.Text = SettingsVariables.UserMiningTabSettings.OreImplant;
            }

            else if (cmbMineOreType.Text == "Gas")
            {
                cmbMineHighwallImplant.Items.Add(Public_Variables.None);
                // Eifyr and Co. 'Alchemist' Gas Harvesting GH-801
                cmbMineHighwallImplant.Items.Add("'Alchemist' GH-801");
                cmbMineHighwallImplant.Items.Add("'Alchemist' GH-803");
                cmbMineHighwallImplant.Items.Add("'Alchemist' GH-805");

                // No Michi for gas
                chkMineMichiImplant.Enabled = false;
                chkMineMichiImplant.ForeColor = Color.Black;

                cmbMineHighwallImplant.Text = SettingsVariables.UserMiningTabSettings.GasImplant;
            }

        }

        // Updates the skills and combos associated with the ship selected
        private void UpdateMiningShipForm(bool UpdateEquipment)
        {

            // Update the mining skills first, ships loaded depend on these
            UpdateMiningSkills();

            // Load the ships into the ship combo
            UpdateMiningShipsCombo();

            if (UpdateEquipment | (cmbMineShipName.Text ?? "") == Public_Variables.Orca | (cmbMineShipName.Text ?? "") == Public_Variables.Rorqual | (cmbMineShipName.Text ?? "") == Public_Variables.Porpoise)
            {
                // Finally load all the ship equipment
                UpdateMiningShipEquipment();
                // Refresh drone stats
                UpdateShipMiningDroneStats();
            }

        }

        // Updates the mining drones for use
        private void UpdateShipMiningDrones()
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateMiningDrones(cmbMineOreType.Text, cmbMineDroneName, SettingsVariables.UserMiningTabSettings.MiningDrone, SettingsVariables.UserMiningTabSettings.IceMiningDrone, cmbMineDroneOpSkill, cmbMineDroneSpecSkill, cmbMineShipName.Text, tabShipDrones, cmbMineNumMiningDrones);
            }
        }

        // Updates the boosters mining drones for use
        private void UpdateBoosterMiningDrones()
        {
            if (!Public_Variables.FirstLoad)
            {
                UpdateMiningDrones(cmbMineOreType.Text, cmbMineBoosterDroneName, SettingsVariables.UserMiningTabSettings.BoosterMiningDrone, SettingsVariables.UserMiningTabSettings.BoosterIceMiningDrone, cmbMineBoosterDroneOpSkill, cmbMineBoosterDroneSpecSkill, cmbMineBoosterShipName.Text, tabBoosterDrones, cmbMineBoosterNumMiningDrones);
                UpdateBoosterDroneRigChecks(); // May need to be reset based on fleet options
            }
        }

        // Updates the mining drones for objects sent
        private void UpdateMiningDrones(string OreType, ComboBox DroneNameCombo, string DefaultDroneName, string DefaultIceDroneName, ComboBox DroneSkillCombo, ComboBox DroneSpecSkillCombo, string ShipName, TabPage DroneTab, ComboBox NumDroneCombo)
        {

            string SavedDroneSelection = DroneNameCombo.Text;

            // Load up drones into the combo based on skills selected
            DroneNameCombo.BeginUpdate();
            DroneNameCombo.Items.Clear();
            DroneNameCombo.Items.Add(Public_Variables.None); // Always add none

            switch (OreType ?? "")
            {
                case "Ore":
                    {
                        DroneTab.Enabled = true;
                        if (Conversions.ToInteger(DroneSkillCombo.Text) >= 1)
                        {
                            DroneNameCombo.Items.Add("Civilian Mining Drone");
                            DroneNameCombo.Items.Add("Mining Drone I");
                            DroneNameCombo.Items.Add("Harvester Mining Drone");
                        }
                        if (Conversions.ToInteger(DroneSkillCombo.Text) >= 1 & DroneSpecSkillCombo.Enabled == true & Conversions.ToInteger(DroneSpecSkillCombo.Text) >= 1)
                        {
                            DroneNameCombo.Items.Add("Mining Drone II");
                            DroneNameCombo.Items.Add("'Augmented' Mining Drone");
                            if ((ShipName ?? "") == Public_Variables.Rorqual)
                            {
                                DroneNameCombo.Items.Add("'Excavator' Mining Drone");
                            }
                        }

                        if (DroneNameCombo.Items.Contains(SavedDroneSelection))
                        {
                            DroneNameCombo.Text = SavedDroneSelection;
                        }
                        else if (DroneNameCombo.Items.Contains(DefaultDroneName))
                        {
                            DroneNameCombo.Text = DefaultDroneName;
                        }
                        else
                        {
                            DroneNameCombo.Text = Public_Variables.None;
                        }

                        break;
                    }

                case "Ice":
                    {
                        DroneTab.Enabled = true;
                        if (Conversions.ToInteger(DroneSkillCombo.Text) >= 1)
                        {
                            DroneNameCombo.Items.Add("Ice Harvesting Drone I");
                        }
                        if (Conversions.ToInteger(DroneSpecSkillCombo.Text) >= 1 & DroneSpecSkillCombo.Enabled == true & Conversions.ToInteger(DroneSpecSkillCombo.Text) >= 1)
                        {
                            DroneNameCombo.Items.Add("Ice Harvesting Drone II");
                            DroneNameCombo.Items.Add("'Augmented' Ice Harvesting Drone");
                            if ((ShipName ?? "") == Public_Variables.Rorqual)
                            {
                                DroneNameCombo.Items.Add("'Excavator' Ice Harvesting Drone");
                            }
                        }

                        if (DroneNameCombo.Items.Contains(SavedDroneSelection))
                        {
                            DroneNameCombo.Text = SavedDroneSelection;
                        }
                        else if (DroneNameCombo.Items.Contains(DefaultIceDroneName))
                        {
                            DroneNameCombo.Text = DefaultIceDroneName;
                        }
                        else
                        {
                            DroneNameCombo.Text = Public_Variables.None;
                        }

                        break;
                    }

                case "Gas":
                    {
                        DroneTab.Enabled = false; // No gas drones
                        break;
                    }
            }

            UpdateNumberMiningDrones(DroneNameCombo.Text, ShipName, NumDroneCombo, false);

            DroneNameCombo.EndUpdate();

        }

        private enum DroneRigType
        {
            None = 0,
            T1 = 1,
            T2 = 2,
            Ice = 3,
            Mercoxit = 4
        }

        private DroneRigType GetDroneRigType(CheckBox RigCheck)
        {
            if (RigCheck.Enabled & RigCheck.Checked)
            {
                if (RigCheck.CheckState == CheckState.Indeterminate)
                {
                    return DroneRigType.T2;
                }
                else
                {
                    return DroneRigType.T1;
                }
            }

            return DroneRigType.None;

        }

        private DroneRigType GetDroneRigType(ComboBox ComboCheck)
        {
            if (ComboCheck.Enabled & (ComboCheck.Text ?? "") != Public_Variables.None & !string.IsNullOrEmpty(ComboCheck.Text))
            {
                if (ComboCheck.Text.Contains("T2"))
                {
                    return DroneRigType.T2;
                }
                else if (ComboCheck.Text.Contains("Ice Harvesting"))
                {
                    return DroneRigType.Ice;
                }
                else if (ComboCheck.Text.Contains("Mercoxit Opt"))
                {
                    return DroneRigType.Mercoxit;
                }
                else
                {
                    return DroneRigType.T1;
                }
            }

            return DroneRigType.None;

        }

        private void UpdateShipMiningDroneStats()
        {
            if (!Public_Variables.FirstLoad)
            {
                var argRangeLabel = lblMineDroneIdealRange;
                var argYieldLabel = lblMineMiningDroneYield;
                var argTextLabel = lblMineMiningDroneM3;
                var argRig1 = GetDroneRigType(cmbMineMiningRig1);
                var argRig2 = GetDroneRigType(cmbMineMiningRig2);
                var argRig3 = GetDroneRigType(cmbMineMiningRig3);
                UpdateMiningDroneStats(ref MiningDronem3Hr, cmbMineShipName.Text, cmbMineBaseShipSkill.Text, cmbMineDroneName.Text, cmbMineNumMiningDrones.Text, cmbMineDroneOpSkill.Text, cmbMineDroneSpecSkill.Text, cmbMineDroneInterfacingSkill.Text, ref argRangeLabel, ref argYieldLabel, ref argTextLabel, ref IceHarvestDroneCycleTime, cmbMineOreType.Text, ref argRig1, ref argRig2, ref argRig3);
                lblMineDroneIdealRange = argRangeLabel;
                lblMineMiningDroneYield = argYieldLabel;
                lblMineMiningDroneM3 = argTextLabel;
            }
        }

        private void UpdateBoosterMiningDroneStats()
        {
            if (!Public_Variables.FirstLoad)
            {
                var argRangeLabel = lblMineBoosterDroneIdealRange;
                var argYieldLabel = lblMineBoosterMiningDroneYield;
                var argTextLabel = lblMineBoosterMiningDroneM3;
                var argRig1 = GetDroneRigType(chkMineBoosterDroneRig1);
                var argRig2 = GetDroneRigType(chkMineBoosterDroneRig2);
                var argRig3 = GetDroneRigType(chkMineBoosterDroneRig3);
                UpdateMiningDroneStats(ref BoosterMiningDronem3Hr, cmbMineBoosterShipName.Text, cmbMineBoosterShipSkill.Text, cmbMineBoosterDroneName.Text, cmbMineBoosterNumMiningDrones.Text, cmbMineBoosterDroneOpSkill.Text, cmbMineBoosterDroneSpecSkill.Text, cmbMineBoosterDroneInterfacingSkill.Text, ref argRangeLabel, ref argYieldLabel, ref argTextLabel, ref BoosterIceHarvestDroneCycleTime, cmbMineOreType.Text, ref argRig1, ref argRig2, ref argRig3, true);
                lblMineBoosterDroneIdealRange = argRangeLabel;
                lblMineBoosterMiningDroneYield = argYieldLabel;
                lblMineBoosterMiningDroneM3 = argTextLabel;
            }
        }

        // Updates the stats on the drones group
        private void UpdateMiningDroneStats(ref double MiningAmtVariable, string ShipName, string BaseShipSkill, string DroneName, string NumDrones, string DroneSkill, string DroneSpecSkill, string DroneInterfaceSkill, ref Label RangeLabel, ref Label YieldLabel, ref Label TextLabel, ref double DroneCycleTime, string OreType, ref DroneRigType Rig1, ref DroneRigType Rig2, ref DroneRigType Rig3, bool BoosterDrones = false)
        {
            // Initialize
            RangeLabel.Text = "Ideal Range: N/A";
            YieldLabel.Text = "-";
            MiningAmtVariable = 0d;
            DroneCycleTime = 0d;

            // Calculate the m3 and range based on ship selected
            if ((DroneName ?? "") != Public_Variables.None & !string.IsNullOrEmpty(DroneName) & DroneSkill != "0" & OreType != "Gas")
            {
                var AttribLookup = new EVEAttributes();
                double DroneMiningAmountpCycle = 0d;
                // Update the optimal range for this drone first
                double NavigationBonus = 1d + Public_Variables.SelectedCharacter.Skills.GetSkillLevel(12305L) * (AttribLookup.GetAttribute(12305, ItemAttributes.maxVelocityBonus) / 100d);
                RangeLabel.Text = "Ideal Range: " + Strings.FormatNumber(AttribLookup.GetAttribute(DroneName, ItemAttributes.maxRange) * NavigationBonus, 0) + " m";

                // Start adding in the rest of the skill bonuses
                int MiningDroneOpLevel = !string.IsNullOrEmpty(DroneSkill) ? Conversions.ToInteger(DroneSkill) : 0;
                int MiningDroneOpSpecLevel = !string.IsNullOrEmpty(DroneSkill) ? Conversions.ToInteger(DroneSpecSkill) : 0;

                DroneMiningAmountpCycle = AttribLookup.GetAttribute(DroneName, ItemAttributes.miningAmount);

                if (OreType == "Ore")
                {
                    DroneMiningAmountpCycle *= 1d + AttribLookup.GetAttribute(DroneInterfacingSkillTypeID, ItemAttributes.miningAmountBonus) * Conversions.ToInteger(DroneInterfaceSkill) / 100d;
                    DroneMiningAmountpCycle *= 1d + AttribLookup.GetAttribute(MiningDroneOperationSkillTypeID, ItemAttributes.miningAmountBonus) * MiningDroneOpLevel / 100d;
                    DroneMiningAmountpCycle *= 1d + AttribLookup.GetAttribute(MiningDroneSpecializationSkillTypeID, ItemAttributes.miningAmountBonus) * MiningDroneOpSpecLevel / 100d;
                    // Ship role bonus
                    DroneMiningAmountpCycle *= 1d + AttribLookup.GetAttribute(ShipName, ItemAttributes.roleBonusDroneMiningYield) / 100d;
                    DroneMiningAmountpCycle *= 1d + GetMiningDroneRigBonus(Rig1, OreType, ShipName); // Rigs
                    DroneMiningAmountpCycle *= 1d + GetMiningDroneRigBonus(Rig2, OreType, ShipName); // Rigs
                    DroneMiningAmountpCycle *= 1d + GetMiningDroneRigBonus(Rig3, OreType, ShipName); // Rigs

                    // Only the mining industrials have bonuses to mining drones based on main ship skill
                    switch (ShipName ?? "")
                    {
                        case Public_Variables.Porpoise:
                        case Public_Variables.Orca:
                            {
                                DroneMiningAmountpCycle *= 1d + AttribLookup.GetAttribute(ShipName, ItemAttributes.industrialCommandBonusDroneOreMiningYield) * Conversions.ToInteger(BaseShipSkill) / 100d;
                                break;
                            }
                        case Public_Variables.Rorqual:
                            {
                                DroneMiningAmountpCycle *= 1d + AttribLookup.GetAttribute(ShipName, ItemAttributes.capitalIndustrialShipBonusDroneOreMiningYield) * Conversions.ToInteger(BaseShipSkill) / 100d;
                                break;
                            }
                    }

                    // Add role bonus 
                    DroneMiningAmountpCycle *= 1d + AttribLookup.GetAttribute(ShipName, ItemAttributes.roleBonusDroneMiningYield) / 100d;

                    // Adjust with the core bonus if boosted and using the drones
                    if (BoosterDrones)
                    {
                        DroneMiningAmountpCycle *= 1d + GetIndustrialCorebonus(ShipName, CoreBonus.OreDroneMiningYield);
                    }

                    // Amount of cycles we can do in an hour times the amount per cycle
                    DroneCycleTime = AttribLookup.GetAttribute(DroneName, ItemAttributes.duration) / 1000d;
                    MiningAmtVariable = Conversions.ToInteger(NumDrones) * 3600 / DroneCycleTime * DroneMiningAmountpCycle;

                    // Set the amount of m3 per hour for all the drones we have
                    TextLabel.Text = "Yield (m3/Hr):";
                    YieldLabel.Text = Strings.FormatNumber(MiningAmtVariable, 1);
                }
                else
                {
                    DroneCycleTime = AttribLookup.GetAttribute(DroneName, ItemAttributes.duration);
                    DroneCycleTime *= 1d + AttribLookup.GetAttribute(IceHarvestingDroneOperationSkillTypeID, ItemAttributes.rofBonus) * MiningDroneOpLevel / 100d;
                    DroneCycleTime *= 1d + AttribLookup.GetAttribute(IceHarvestingDroneSpecializationSkillTypeID, ItemAttributes.rofBonus) * MiningDroneOpSpecLevel / 100d;
                    // Ship role bonus
                    DroneCycleTime *= 1d + AttribLookup.GetAttribute(ShipName, ItemAttributes.roleBonusDroneIceHarvestingSpeed) / 100d;
                    DroneCycleTime *= 1d + GetMiningDroneRigBonus(Rig1, OreType, ShipName); // Rigs
                    DroneCycleTime *= 1d + GetMiningDroneRigBonus(Rig2, OreType, ShipName); // Rigs
                    DroneCycleTime *= 1d + GetMiningDroneRigBonus(Rig3, OreType, ShipName); // Rigs

                    // Only the mining industrials have bonuses to mining drones based on main ship skill
                    switch (ShipName ?? "")
                    {
                        case Public_Variables.Porpoise:
                        case Public_Variables.Orca:
                            {
                                DroneCycleTime *= 1d + AttribLookup.GetAttribute(ShipName, ItemAttributes.industrialCommandBonusDroneIceHarvestingCycleTime) / 100d * Conversions.ToInteger(BaseShipSkill);
                                break;
                            }
                        case Public_Variables.Rorqual:
                            {
                                DroneCycleTime *= 1d + AttribLookup.GetAttribute(ShipName, ItemAttributes.capitalIndustrialShipBonusDroneIceCycleTime) / 100d * Conversions.ToInteger(BaseShipSkill);
                                break;
                            }
                    }

                    // Adjust with the core bonus if boosted
                    if (BoosterDrones)
                    {
                        DroneCycleTime *= 1d + GetIndustrialCorebonus(ShipName, CoreBonus.IceDroneHarvestingSpeed);
                    }

                    MiningAmtVariable = Conversions.ToInteger(NumDrones) * (3600d / (DroneCycleTime / 1000d) * DroneMiningAmountpCycle);

                    // Convert to blocks
                    TextLabel.Text = "Yield (blks/Hr):";
                    YieldLabel.Text = Strings.FormatNumber(Math.Floor(MiningAmtVariable / 1000d), 0);

                }
            }
        }

        // Returns the rig bonus for drones rig check selected
        private double GetMiningDroneRigBonus(DroneRigType DroneRig, string DroneType, string ShipName)
        {
            var AttribLookup = new EVEAttributes();
            string RigName = "";
            string RigTech = "";
            double RigBonus = 0d;

            if (DroneRig == DroneRigType.T1 | DroneRig == DroneRigType.T2)
            {

                switch (AttribLookup.GetAttribute(ShipName, ItemAttributes.rigSize))
                {
                    case 1d:
                        {
                            RigName = "Small Drone Mining Augmentor ";
                            break;
                        }

                    case 2d:
                        {
                            RigName = "Medium Drone Mining Augmentor ";
                            break;
                        }

                    case 3d:
                        {
                            RigName = "Large Drone Mining Augmentor ";
                            break;
                        }

                    case 4d:
                        {
                            RigName = "Capital Drone Mining Augmentor ";
                            break;
                        }
                }

                if (DroneRig != DroneRigType.None)
                {
                    if (DroneRig == DroneRigType.T2)
                    {
                        RigTech = "II";
                    }
                    else
                    {
                        RigTech = "I";
                    }

                    if (DroneType == "Ore")
                    {
                        RigBonus = AttribLookup.GetAttribute(RigName + RigTech, ItemAttributes.miningAmountBonus) / 100d;
                    }
                    else // Ice
                    {
                        RigBonus = AttribLookup.GetAttribute(RigName + RigTech, ItemAttributes.rofBonus) / 100d;
                    }
                }
            }

            return RigBonus;

        }

        // Updates the max drones for the ship selected
        private void UpdateNumberMiningDrones(string DroneName, string ShipName, ComboBox NumDronesCombo, bool Booster)
        {

            if ((DroneName ?? "") != Public_Variables.None)
            {
                var AttribLookup = new EVEAttributes();
                // Get the m3 of the drone bay and bandwidth for drone and ship
                double ShipDroneBandwith = AttribLookup.GetAttribute(ShipName, ItemAttributes.droneBandwidth);
                double DroneBandwith = AttribLookup.GetAttribute(DroneName, ItemAttributes.droneBandwidthUsed);

                // Now calculate the max drones you can mine with based on bandwidth
                double MaxDrones = ShipDroneBandwith / DroneBandwith;

                if (MaxDrones > 5d)
                {
                    MaxDrones = 5d;
                }

                // Reset the combo
                NumDronesCombo.BeginUpdate();
                NumDronesCombo.Items.Clear();

                for (double i = 0d, loopTo = MaxDrones; i <= loopTo; i++)
                    NumDronesCombo.Items.Add(i.ToString());

                // Select the default if it's in the list, else 0
                switch (cmbMineOreType.Text ?? "")
                {
                    case "Ore":
                        {
                            if (NumDronesCombo.Items.Contains(SettingsVariables.UserMiningTabSettings.BoosterNumMiningDrones) & Booster)
                            {
                                NumDronesCombo.Text = SettingsVariables.UserMiningTabSettings.BoosterNumMiningDrones;
                            }
                            else if (NumDronesCombo.Items.Contains(SettingsVariables.UserMiningTabSettings.NumMiningDrones))
                            {
                                NumDronesCombo.Text = SettingsVariables.UserMiningTabSettings.NumMiningDrones;
                            }
                            else
                            {
                                NumDronesCombo.Text = "0";
                            }

                            break;
                        }
                    case "Ice":
                        {
                            if (NumDronesCombo.Items.Contains(SettingsVariables.UserMiningTabSettings.BoosterNumIceMiningDrones) & Booster)
                            {
                                NumDronesCombo.Text = SettingsVariables.UserMiningTabSettings.BoosterNumIceMiningDrones;
                            }
                            else if (NumDronesCombo.Items.Contains(SettingsVariables.UserMiningTabSettings.NumIceMiningDrones))
                            {
                                NumDronesCombo.Text = SettingsVariables.UserMiningTabSettings.NumIceMiningDrones;
                            }
                            else
                            {
                                NumDronesCombo.Text = "0";
                            }

                            break;
                        }
                    case "Gas":
                        {
                            NumDronesCombo.Text = "0";
                            break;
                        }
                }

                NumDronesCombo.EndUpdate();
            }
            else
            {
                NumDronesCombo.Text = "0";
            }

        }

        // Updates the mining skills for the ships and equipment
        private void UpdateMiningSkills()
        {
            // Mining upgrades - need mining upgrades 1 or 4 for T2
            // * mercoxit - T2's Deep core Mining 2
            // Deep Core Strip Mining skill - Astrogeology 5 and Mining 5
            // Ice miners - Need to change the mining combo name to Ice Harvesting
            // * Need level 4 for T1 and level 5 for T2
            // If they choose 'Other' for ship, hide strip miners and then show 'Miners' and number
            // If they choose frigs or cruisers, show skill level of ship along with miners

            // Mining Skill
            // 3 for mining upgrades
            // 4 for Astrology and ice harvesting
            // 5 for Deep core mining

            if (string.IsNullOrEmpty(cmbMineSkill.Text))
            {
                cmbMineSkill.Text = "1";
            }

            // Mining upgrades (ice and ore)
            if (Conversions.ToInteger(cmbMineSkill.Text) >= 3 & cmbMineOreType.Text != "Gas" & (cmbMineShipName.Text ?? "") != Public_Variables.Orca & (cmbMineShipName.Text ?? "") != Public_Variables.Rorqual & (cmbMineShipName.Text ?? "") != Public_Variables.Porpoise)
            {
                cmbMineMiningUpgrade.Enabled = true;
            }
            else
            {
                cmbMineMiningUpgrade.Enabled = false;
            }

            // Ice/Gas Harvesting skill
            if (Conversions.ToInteger(cmbMineSkill.Text) >= 4)
            {
                if (cmbMineOreType.Text == "Ice")
                {
                    lblMineGasIceHarvesting.Text = "Ice Harv:";
                    lblMineGasIceHarvesting.Enabled = true;
                    cmbMineGasIceHarvesting.Enabled = true;
                    cmbMineAstrogeology.Enabled = true;
                }
                else if (cmbMineOreType.Text == "Gas")
                {
                    lblMineGasIceHarvesting.Text = "Gas Harv:";
                    lblMineGasIceHarvesting.Enabled = true;
                    cmbMineGasIceHarvesting.Enabled = true;
                    cmbMineAstrogeology.Enabled = true;
                }
                else if (cmbMineOreType.Text == "Ore")
                {
                    lblMineGasIceHarvesting.Enabled = false;
                    cmbMineGasIceHarvesting.Enabled = false;
                    cmbMineAstrogeology.Enabled = true;
                }
            }
            else
            {
                cmbMineAstrogeology.Enabled = false;
                lblMineGasIceHarvesting.Enabled = false;
                cmbMineGasIceHarvesting.Enabled = false;
            }

            if (string.IsNullOrEmpty(cmbMineAstrogeology.Text))
            {
                cmbMineAstrogeology.Text = "1";
            }

            if (string.IsNullOrEmpty(cmbMineDroneOpSkill.Text))
            {
                cmbMineDroneOpSkill.Text = "1";
            }

            // Drone specialization skill needs drone op 5
            if (Conversions.ToInteger(cmbMineDroneOpSkill.Text) == 5)
            {
                cmbMineDroneSpecSkill.Enabled = true;
            }
            else
            {
                cmbMineDroneSpecSkill.Enabled = false;
            }

            // Deep core only for asteroid mining
            if (Conversions.ToInteger(cmbMineSkill.Text) == 5 & Conversions.ToInteger(cmbMineAstrogeology.Text) == 5 & cmbMineOreType.Text == "Ore")
            {
                cmbMineDeepCore.Enabled = true;
                lblMineDeepCore.Enabled = true;
            }
            else
            {
                cmbMineDeepCore.Enabled = false;
                lblMineDeepCore.Enabled = false;
            }

            if (string.IsNullOrEmpty(cmbMineBaseShipSkill.Text))
            {
                cmbMineBaseShipSkill.Text = "1";
            }

            // Set exhumer skill combo for ice, but the prospect can mine ore so enable it for all
            if (cmbMineOreType.Text == "Ice")
            {
                if (Conversions.ToInteger(cmbMineAstrogeology.Text) == 5 & cmbMineAstrogeology.Enabled == true & Conversions.ToInteger(cmbMineBaseShipSkill.Text) == 5)
                {
                    cmbMineAdvShipSkill.Enabled = true;
                    lblMineExhumers.Enabled = true;
                }
                else
                {
                    cmbMineAdvShipSkill.Enabled = false;
                    lblMineExhumers.Enabled = false;
                }
            }
            else
            {
                cmbMineAdvShipSkill.Enabled = true;
                lblMineExhumers.Enabled = true;
            }

            // Set true, can be set false when they choose "other"
            cmbMineBaseShipSkill.Enabled = true;
            lblMineBaseShipSkill.Enabled = true;

            // Set the skill level of the ship they selected if not a mining barge/exhumer
            switch (cmbMineShipName.Text ?? "")
            {
                case "Other":
                    {
                        cmbMineBaseShipSkill.Enabled = false;
                        lblMineBaseShipSkill.Enabled = false;
                        cmbMineAdvShipSkill.Enabled = false;
                        lblMineExhumers.Enabled = false;
                        break;
                    }
                case Public_Variables.Rorqual:
                    {
                        if (Conversions.ToInteger(cmbMineBaseShipSkill.Text) >= 3)
                        {
                            cmbMineAdvShipSkill.Enabled = true;
                            lblMineExhumers.Enabled = true;
                        }
                        else
                        {
                            cmbMineAdvShipSkill.Enabled = false;
                            lblMineExhumers.Enabled = false;
                        }

                        break;
                    }
            }

        }

        // Updates the ships combo with ships based on the levels of skills set
        private void UpdateMiningShipsCombo()
        {
            string PreviousShip = cmbMineShipName.Text;
            string MaxShipName = "";
            int ShipSkillLevel = 0;

            UpdatingMiningShips = true;
            cmbMineShipName.Items.Clear();

            if (string.IsNullOrEmpty(cmbMineBaseShipSkill.Text))
            {
                cmbMineBaseShipSkill.Text = "1";
            }

            if (string.IsNullOrEmpty(cmbMineAdvShipSkill.Text))
            {
                cmbMineAdvShipSkill.Text = "1";
            }

            // For all mining, load the frigates based on skills

            // Check for Mining Frigate skill to load the Venture
            if (Conversions.ToInteger(cmbMineBaseShipSkill.Text) >= 1)
            {
                cmbMineShipName.Items.Add(Public_Variables.Venture);
                MaxShipName = Public_Variables.Venture;
            }

            // Use exhumers skill for expedition frigate
            if (Conversions.ToInteger(cmbMineBaseShipSkill.Text) == 5 & Conversions.ToInteger(cmbMineAdvShipSkill.Text) >= 1)
            {
                // Add the prospect and endurance
                cmbMineShipName.Items.Add(Public_Variables.Endurance);
                cmbMineShipName.Items.Add(Public_Variables.Prospect);
                MaxShipName = Public_Variables.Endurance;
            }

            if (cmbMineOreType.Text != "Ice")
            {
                // Always add other for non ICE mining
                cmbMineShipName.Items.Add("Other");
            }

            // Exhumers and Mining Barges - Load for Ice, Ore, and Gas
            // 3 for Mining barge, Procurer, 4 for Retriever, 5 for Covetor
            // 5 for Exhumers and Deep core mining
            // Covetor, Retriever, Procurer. Hulk, Skiff, Mackinaw
            if (Conversions.ToInteger(cmbMineAstrogeology.Text) >= 3 & cmbMineAstrogeology.Enabled == true & Conversions.ToInteger(cmbMineBaseShipSkill.Text) >= 1)
            {
                cmbMineShipName.Items.Add(Public_Variables.Procurer);
                MaxShipName = Public_Variables.Procurer;
                cmbMineShipName.Items.Add(Public_Variables.Retriever);
                MaxShipName = Public_Variables.Retriever;
                cmbMineShipName.Items.Add(Public_Variables.Covetor);
                MaxShipName = Public_Variables.Covetor;
            }

            if (Conversions.ToInteger(cmbMineAstrogeology.Text) == 5 & cmbMineAstrogeology.Enabled == true & Conversions.ToInteger(cmbMineBaseShipSkill.Text) == 5 & Conversions.ToInteger(cmbMineAdvShipSkill.Text) >= 1 & cmbMineAdvShipSkill.Enabled)
            {
                cmbMineShipName.Items.Add(Public_Variables.Skiff);
                MaxShipName = Public_Variables.Skiff;
                cmbMineShipName.Items.Add(Public_Variables.Mackinaw);
                MaxShipName = Public_Variables.Mackinaw;
                cmbMineShipName.Items.Add(Public_Variables.Hulk);
                MaxShipName = Public_Variables.Hulk;
            }

            // Add all three cap mining vessels - have ore and ice bonuses 
            if (cmbMineOreType.Text != "Gas")
            {
                if (Conversions.ToInteger(cmbMineBaseShipSkill.Text) >= 1)
                {
                    cmbMineShipName.Items.Add(Public_Variables.Porpoise);
                    MaxShipName = Public_Variables.Porpoise;
                    cmbMineShipName.Items.Add(Public_Variables.Orca);
                    MaxShipName = Public_Variables.Orca;
                    // Need industrial command ships 3 and capital industrial ships 1 to use rorq
                    if (Conversions.ToInteger(cmbMineBaseShipSkill.Text) >= 3 & Conversions.ToInteger(cmbMineAdvShipSkill.Text) >= 1 & cmbMineAdvShipSkill.Enabled)
                    {
                        cmbMineShipName.Items.Add(Public_Variables.Rorqual);
                        MaxShipName = Public_Variables.Rorqual;
                    }
                }
            }

            if (string.IsNullOrEmpty(MaxShipName) & cmbMineOreType.Text != "Ice")
            {
                MaxShipName = "Other";
            }
            else if (string.IsNullOrEmpty(MaxShipName) & cmbMineOreType.Text == "Ice")
            {
                MaxShipName = Public_Variables.None;
                // Always add None for this case
                cmbMineShipName.Items.Add(Public_Variables.None);
            }

            // Use settings to load the ships, else load the maxshipname unless first load
            if (cmbMineOreType.Text == "Ore" & !string.IsNullOrEmpty(SettingsVariables.UserMiningTabSettings.OreMiningShip))
            {
                cmbMineShipName.Text = SettingsVariables.UserMiningTabSettings.OreMiningShip;
            }
            else if (cmbMineOreType.Text == "Ice" & !string.IsNullOrEmpty(SettingsVariables.UserMiningTabSettings.IceMiningShip))
            {
                cmbMineShipName.Text = SettingsVariables.UserMiningTabSettings.IceMiningShip;
            }
            else if (cmbMineOreType.Text == "Gas" & !string.IsNullOrEmpty(SettingsVariables.UserMiningTabSettings.GasMiningShip))
            {
                cmbMineShipName.Text = SettingsVariables.UserMiningTabSettings.GasMiningShip;
            }
            else if (cmbMineShipName.Items.Contains(PreviousShip))
            {
                cmbMineShipName.Text = PreviousShip;
            }
            else
            {
                cmbMineShipName.Text = MaxShipName;
            }

            // If we have a max ship name, then set it if it didn't stick in the combo after checking settings
            if (!string.IsNullOrEmpty(MaxShipName) & string.IsNullOrEmpty(cmbMineShipName.Text))
            {
                cmbMineShipName.Text = MaxShipName;
            }

            UpdatingMiningShips = false;
            LoadMiningshipImage();

        }

        // Updates the enable settings on the booster rig checks
        private void UpdateBoosterDroneRigChecks()
        {
            if (cmbMineOreType.Text == "Gas" | chkMineUseFleetBooster.Checked == false)
            {
                // No rigs for gas mining
                chkMineBoosterUseDrones.Enabled = false;
                chkMineBoosterDroneRig1.Enabled = false;
                chkMineBoosterDroneRig2.Enabled = false;
                chkMineBoosterDroneRig3.Enabled = false;
                tabBoosterDrones.Enabled = false;
            }
            else
            {
                // Enable checks
                chkMineBoosterUseDrones.Enabled = true;
                if (chkMineBoosterUseDrones.Checked)
                {
                    chkMineBoosterDroneRig1.Enabled = true;
                    chkMineBoosterDroneRig2.Enabled = true;
                    chkMineBoosterDroneRig3.Enabled = true;
                    tabBoosterDrones.Enabled = true;
                }
                else
                {
                    chkMineBoosterDroneRig1.Enabled = false;
                    chkMineBoosterDroneRig2.Enabled = false;
                    chkMineBoosterDroneRig3.Enabled = false;
                    tabBoosterDrones.Enabled = false;
                }
            }
        }

        // Loads the laser/strip combos, implant, etc for the ship types
        private void UpdateMiningShipEquipment()
        {
            int LaserCount = 0;
            int MLUCount = 0;
            int i;
            string MaxStrip = "";
            string T1Module = "";
            string ShipName;
            bool DeepCoreLoaded = false;
            var AttribLookup = new EVEAttributes();

            string SQL;
            SQLiteDataReader rsMiners;

            bool BargeSelected = false;

            // Load up the main mining laser query - set groupID for search in processing
            SQL = "SELECT typeName, CASE WHEN metaGroupID IS NULL THEN 1 ELSE metaGroupID END AS TECH ";
            SQL += "FROM INVENTORY_TYPES WHERE published <> 0 ";

            // Clear miners
            cmbMineMiningLaser.Items.Clear();

            ShipName = cmbMineShipName.Text;

            // Set the first mining combo to only have base rigs
            cmbMineMiningRig1.Items.Remove("Ice Harvesting");
            cmbMineMiningRig1.Items.Remove("Mercoxit Opt");

            switch (ShipName ?? "")
            {
                case Public_Variables.Hulk:
                case Public_Variables.Mackinaw:
                case Public_Variables.Skiff:
                case Public_Variables.Covetor:
                case Public_Variables.Retriever:
                case Public_Variables.Procurer:
                    {
                        BargeSelected = true;
                        SetEquipmentObjects(true);
                        // Get the numbers
                        LaserCount = (int)Math.Round(AttribLookup.GetAttribute(ShipName, ItemAttributes.hiSlots));
                        MLUCount = (int)Math.Round(AttribLookup.GetAttribute(ShipName, ItemAttributes.lowSlots));

                        switch (ShipName ?? "")
                        {
                            case Public_Variables.Hulk:
                            case Public_Variables.Mackinaw:
                            case Public_Variables.Skiff:
                                {
                                    cmbMineMiningRig3.Enabled = false; // Exhumers only have 2 rig slots
                                    break;
                                }

                            default:
                                {
                                    cmbMineMiningRig3.Enabled = true;
                                    break;
                                }
                        }

                        // Now load the strips
                        if (cmbMineOreType.Text == "Ore")
                        {
                            // Mining Skill
                            // Mining 4 for T1 Strips
                            // Mining 5 for T2 Strips
                            SQL += "AND INVENTORY_TYPES.groupID IN (464, 483) AND typeName NOT LIKE '%Ice%' ";
                            if (Conversions.ToInteger(cmbMineSkill.Text) < 5)
                            {
                                SQL += "AND TECH <> 2 AND typeName NOT LIKE '%Deep Core%' "; // Don't load the deep core or tech 2
                                chkMineT1Crystals.Enabled = false;
                                chkMineT2Crystals.Enabled = false;
                            }
                            else if (Conversions.ToInteger(cmbMineSkill.Text) == 5 & cmbMineDeepCore.Enabled == false)
                            {
                                SQL += " AND typeName NOT LIKE '%Deep Core%' "; // Don't load the deep core
                                chkMineT1Crystals.Enabled = true;
                                chkMineT2Crystals.Enabled = true;
                            }
                            else if (Conversions.ToInteger(cmbMineDeepCore.Text) >= 2 & cmbMineDeepCore.Enabled == true)
                            {
                                // Load them all
                                chkMineT1Crystals.Enabled = true;
                                chkMineT2Crystals.Enabled = true;
                            }
                            SQL += "ORDER BY typeName";

                            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                            rsMiners = Public_Variables.DBCommand.ExecuteReader();

                            while (rsMiners.Read())
                            {
                                cmbMineMiningLaser.Items.Add(rsMiners.GetString(0));
                                if (rsMiners.GetInt32(1) == 1)
                                {
                                    T1Module = rsMiners.GetString(0);
                                }
                            }

                            if (cmbMineMiningLaser.Items.Contains(SettingsVariables.UserMiningTabSettings.OreStrip))
                            {
                                MaxStrip = SettingsVariables.UserMiningTabSettings.OreStrip;
                            }
                            else
                            {
                                MaxStrip = T1Module;
                            }

                            // Update the first mining rig to include mercoxit
                            cmbMineMiningRig1.Items.Add("Mercoxit Opt");

                            rsMiners.Close();
                        }

                        else if (cmbMineOreType.Text == "Ice")
                        {
                            // Ice harvesting skill
                            // 1 for T1 strip
                            // 5 for T2 strips
                            SQL += "AND INVENTORY_TYPES.groupID IN (464, 483) AND typeName LIKE '%Ice%' ";
                            if (Conversions.ToInteger(cmbMineGasIceHarvesting.Text) < 5)
                            {
                                SQL += "AND TECH <> 2 "; // Don't load tech 2
                            }
                            SQL += "ORDER BY typeName";

                            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                            rsMiners = Public_Variables.DBCommand.ExecuteReader();

                            while (rsMiners.Read())
                            {
                                cmbMineMiningLaser.Items.Add(rsMiners.GetString(0));
                                if (rsMiners.GetInt32(1) == 1)
                                {
                                    T1Module = rsMiners.GetString(0);
                                }
                            }

                            chkMineT1Crystals.Enabled = false;
                            chkMineT2Crystals.Enabled = false;

                            if (cmbMineMiningLaser.Items.Contains(SettingsVariables.UserMiningTabSettings.OreStrip))
                            {
                                MaxStrip = SettingsVariables.UserMiningTabSettings.OreStrip;
                            }
                            else
                            {
                                MaxStrip = T1Module;
                            }

                            // Update the first mining rig to include ice harvesting
                            cmbMineMiningRig1.Items.Add("Ice Harvesting");

                            rsMiners.Close();
                        }

                        else if (cmbMineOreType.Text == "Gas")
                        {
                            // Only venture and other ships
                            SQL += "AND INVENTORY_TYPES.groupID = 4138 "; // Gas harvesters - Scoops require turret hardpoints
                            if (Conversions.ToInteger(cmbMineGasIceHarvesting.Text) < 5)
                            {
                                SQL += "AND TECH <> 2 "; // Don't load the tech 2
                            }
                            SQL += "ORDER BY typeName";

                            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                            rsMiners = Public_Variables.DBCommand.ExecuteReader();

                            while (rsMiners.Read())
                            {
                                cmbMineMiningLaser.Items.Add(rsMiners.GetString(0));
                                if (rsMiners.GetInt32(1) == 1)
                                {
                                    T1Module = rsMiners.GetString(0);
                                }
                            }

                            if (cmbMineMiningLaser.Items.Contains(SettingsVariables.UserMiningTabSettings.OreStrip))
                            {
                                MaxStrip = SettingsVariables.UserMiningTabSettings.OreStrip;
                            }
                            else
                            {
                                MaxStrip = T1Module;
                            }

                            rsMiners.Close();
                        }

                        // Turn on the num lasers
                        lblMineLaserNumber.Enabled = true;
                        cmbMineNumLasers.Enabled = true;
                        break;
                    }

                case Public_Variables.Porpoise:
                case Public_Variables.Orca:
                case Public_Variables.Rorqual:
                    {
                        // Just disable the equipment grid except the drone rigs
                        SetEquipmentObjects(false);

                        cmbMineMiningRig1.Enabled = true;
                        cmbMineMiningRig2.Enabled = true;
                        cmbMineMiningRig3.Enabled = true; // All three have 3 rig slots
                                                          // Other ships that are not mining barges
                        break;
                    }

                default:
                    {
                        SetEquipmentObjects(true);
                        LaserCount = (int)Math.Round(AttribLookup.GetAttribute(ShipName, ItemAttributes.turretSlotsLeft)); // Use turret hardpoints for this
                        MLUCount = (int)Math.Round(AttribLookup.GetAttribute(ShipName, ItemAttributes.lowSlots));

                        switch (ShipName ?? "")
                        {
                            case Public_Variables.Prospect:
                            case Public_Variables.Endurance: // T2 ships
                                {
                                    cmbMineMiningRig3.Enabled = false;
                                    break;
                                }

                            default:
                                {
                                    cmbMineMiningRig3.Enabled = true;
                                    break;
                                }
                        }

                        // For Other Ships
                        lblMineLaserNumber.Visible = true;
                        cmbMineNumLasers.Visible = true;

                        if (cmbMineOreType.Text == "Ore")
                        {
                            chkMineT1Crystals.Enabled = false;
                            chkMineT2Crystals.Enabled = false;

                            // Add all the basic mining lasers
                            SQL += "AND (INVENTORY_TYPES.groupID = 54 OR (INVENTORY_TYPES.groupID = 483 AND typeName NOT LIKE '%Strip%')) AND typeName NOT LIKE '%Ice%' ";

                            if (Conversions.ToInteger(cmbMineSkill.Text) < 4)
                            {
                                SQL += "AND TECH <> 2 AND typeName NOT LIKE '%Deep Core%' "; // Don't load T2 or any others
                            }
                            else if (Conversions.ToInteger(cmbMineSkill.Text) < 5)
                            {
                                SQL += "AND typeName NOT LIKE '%Deep Core%' "; // No deep core if not 5
                            }
                            else if (cmbMineDeepCore.Enabled == false | Conversions.ToInteger(cmbMineDeepCore.Text) == 0)
                            {
                                SQL += " AND typeName NOT LIKE '%Deep Core%'"; // Don't load the deep core if not enabled
                            }
                            else if (Conversions.ToInteger(cmbMineDeepCore.Text) >= 1 & Conversions.ToInteger(cmbMineDeepCore.Text) <= 2 & cmbMineDeepCore.Enabled == true)
                            {
                                SQL += " AND typeName NOT LIKE '%Modulated Deep Core%'"; // Don't load the modulated deep core
                            }
                            else if (Conversions.ToInteger(cmbMineDeepCore.Text) >= 2 & cmbMineDeepCore.Enabled == true)
                            {
                                // Deep core is fine
                                chkMineT1Crystals.Enabled = true;
                                chkMineT2Crystals.Enabled = true;
                            }
                            SQL += "ORDER BY typeName";

                            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                            rsMiners = Public_Variables.DBCommand.ExecuteReader();

                            while (rsMiners.Read())
                            {
                                cmbMineMiningLaser.Items.Add(rsMiners.GetString(0));
                                if (rsMiners.GetInt32(1) == 1)
                                {
                                    T1Module = rsMiners.GetString(0);
                                }
                            }

                            if (cmbMineMiningLaser.Items.Contains(SettingsVariables.UserMiningTabSettings.OreStrip))
                            {
                                MaxStrip = SettingsVariables.UserMiningTabSettings.OreStrip;
                            }
                            else
                            {
                                MaxStrip = T1Module;
                            }

                            rsMiners.Close();
                        }

                        else if (cmbMineOreType.Text == "Gas")
                        {
                            // Only venture and other ships
                            SQL += "AND INVENTORY_TYPES.groupID = 737 "; // Gas Cloud Scoops
                            if (Conversions.ToInteger(cmbMineGasIceHarvesting.Text) < 5)
                            {
                                SQL += "AND TECH <> 2 "; // Don't load the tech 2
                            }
                            SQL += "ORDER BY typeName";

                            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                            rsMiners = Public_Variables.DBCommand.ExecuteReader();

                            while (rsMiners.Read())
                            {
                                cmbMineMiningLaser.Items.Add(rsMiners.GetString(0));
                                if (rsMiners.GetInt32(1) == 1)
                                {
                                    T1Module = rsMiners.GetString(0);
                                }
                            }

                            if (cmbMineMiningLaser.Items.Contains(SettingsVariables.UserMiningTabSettings.OreStrip))
                            {
                                MaxStrip = SettingsVariables.UserMiningTabSettings.OreStrip;
                            }
                            else
                            {
                                MaxStrip = T1Module;
                            }

                            rsMiners.Close();
                        }

                        else if (cmbMineOreType.Text == "Ice" & ((ShipName ?? "") == Public_Variables.Endurance | (ShipName ?? "") == Public_Variables.Prospect | (ShipName ?? "") == Public_Variables.Venture))
                        {
                            SQL += "AND INVENTORY_TYPES.groupID = 54 AND typeName LIKE '%Ice%' ";
                            if (Conversions.ToInteger(cmbMineGasIceHarvesting.Text) < 5)
                            {
                                SQL += "AND TECH <> 2 "; // Don't load tech 2
                            }
                            SQL += "ORDER BY typeName";

                            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
                            rsMiners = Public_Variables.DBCommand.ExecuteReader();

                            while (rsMiners.Read())
                            {
                                cmbMineMiningLaser.Items.Add(rsMiners.GetString(0));
                                if (rsMiners.GetInt32(1) == 1)
                                {
                                    T1Module = rsMiners.GetString(0);
                                }
                            }

                            if (cmbMineMiningLaser.Items.Contains(SettingsVariables.UserMiningTabSettings.OreStrip))
                            {
                                MaxStrip = SettingsVariables.UserMiningTabSettings.OreStrip;
                            }
                            else
                            {
                                MaxStrip = T1Module;
                            }

                            rsMiners.Close();

                        }

                        break;
                    }

            }

            // Set crystals
            chkMineT2Crystals.Checked = SettingsVariables.UserMiningTabSettings.T2Crystals;

            // Set Strip name
            cmbMineMiningLaser.Text = MaxStrip;

            // Set the MLU numbers
            cmbMineNumMiningUpgrades.Items.Clear();
            cmbMineNumMiningUpgrades.Enabled = true;

            // Allow 8 for MLU's if other ship (Rohk, Iteron, etc)
            if (ShipName == "Other" & cmbMineOreType.Text != "Gas" & cmbMineOreType.Text != "Ice")
            {
                MLUCount = 8;
                LaserCount = 8;
            }
            else if (cmbMineOreType.Text == "Gas" & !BargeSelected)
            {
                MLUCount = 0;
                // Update laser count based on skills - max of 5 but no more than turrets 
                if ((cmbMineShipName.Text ?? "") == Public_Variables.Venture | (cmbMineShipName.Text ?? "") == Public_Variables.Prospect | (cmbMineShipName.Text ?? "") == Public_Variables.Endurance)
                {
                    // Update the laser count if it's less than the turrets on the venture/prospect
                    if (Conversions.ToInteger(cmbMineGasIceHarvesting.Text) < LaserCount)
                    {
                        LaserCount = Conversions.ToInteger(cmbMineGasIceHarvesting.Text);
                    }
                }
                else // Other Ship
                {
                    // Update the turrets based on the skill, max of 5
                    LaserCount = Conversions.ToInteger(cmbMineGasIceHarvesting.Text);
                }
            }

            var loopTo = MLUCount;
            for (i = 1; i <= loopTo; i++)
                cmbMineNumMiningUpgrades.Items.Add(i.ToString());

            // Load the available upgrades
            LoadMiningUpgrades();

            // Set the number of Strip miners available
            cmbMineNumLasers.Items.Clear();

            // Set the max allowable lasers
            var loopTo1 = LaserCount;
            for (i = 1; i <= loopTo1; i++)
                cmbMineNumLasers.Items.Add(i.ToString());

            // Choose options for None ships first, these should be just clear settings
            cmbMineNumMiningUpgrades.Text = "0";
            cmbMineMiningUpgrade.Text = Public_Variables.None;
            cmbMineNumLasers.Text = "0";
            cmbMineMiningLaser.Text = Public_Variables.None;

            cmbMineMiningRig1.SelectedIndexChanged -= ShipMiningDroneRigs_SelectedIndexChanged;
            cmbMineMiningRig2.SelectedIndexChanged -= ShipMiningDroneRigs_SelectedIndexChanged;
            cmbMineMiningRig3.SelectedIndexChanged -= ShipMiningDroneRigs_SelectedIndexChanged;

            // Normal ship or "other"
            // Load settings, only change to user settings if the ship is the same as the one selected

            // Set the names and numbers for upgrades and strips
            if (cmbMineOreType.Text == "Ore")
            {
                // Set the number of MLUs
                if (SettingsVariables.UserMiningTabSettings.NumOreUpgrades == 0 | MLUCount < SettingsVariables.UserMiningTabSettings.NumOreUpgrades | (ShipName ?? "") != (SavedOreShipName ?? ""))
                {
                    cmbMineNumMiningUpgrades.Text = MLUCount.ToString();
                }
                else
                {
                    cmbMineNumMiningUpgrades.Text = SettingsVariables.UserMiningTabSettings.NumOreUpgrades.ToString();
                }

                // Set the MLU Text - These are hardcoded so just use the default or user setting
                cmbMineMiningUpgrade.Text = SettingsVariables.UserMiningTabSettings.OreUpgrade;

                // Set number of strips
                if (SettingsVariables.UserMiningTabSettings.NumOreMiners == 0 | LaserCount < SettingsVariables.UserMiningTabSettings.NumOreMiners | (ShipName ?? "") != (SavedOreShipName ?? ""))
                {
                    cmbMineNumLasers.Text = LaserCount.ToString();
                }
                else
                {
                    cmbMineNumLasers.Text = SettingsVariables.UserMiningTabSettings.NumOreMiners.ToString();
                }

                // Set Strip name
                if (string.IsNullOrEmpty(SettingsVariables.UserMiningTabSettings.OreStrip))
                {
                    cmbMineMiningLaser.Text = MaxStrip;
                }
                else
                {
                    cmbMineMiningLaser.Text = SettingsVariables.UserMiningTabSettings.OreStrip;
                }

                cmbMineMiningRig1.Text = SettingsVariables.UserMiningTabSettings.ShipDroneRig1;
                cmbMineMiningRig2.Text = SettingsVariables.UserMiningTabSettings.ShipDroneRig2;
                cmbMineMiningRig3.Text = SettingsVariables.UserMiningTabSettings.ShipDroneRig3;
            }

            else if (cmbMineOreType.Text == "Ice")
            {
                // Set the number of MLUs
                if (SettingsVariables.UserMiningTabSettings.NumIceUpgrades == 0 | MLUCount < SettingsVariables.UserMiningTabSettings.NumIceUpgrades | (ShipName ?? "") != (SavedIceShipName ?? ""))
                {
                    cmbMineNumMiningUpgrades.Text = MLUCount.ToString();
                }
                else
                {
                    cmbMineNumMiningUpgrades.Text = SettingsVariables.UserMiningTabSettings.NumIceUpgrades.ToString();
                }

                // Set the MLU Text - These are hardcoded so just use the default or user setting
                cmbMineMiningUpgrade.Text = SettingsVariables.UserMiningTabSettings.IceUpgrade;

                // Set number of strips
                if (SettingsVariables.UserMiningTabSettings.NumIceMiners == 0 | LaserCount < SettingsVariables.UserMiningTabSettings.NumIceMiners | (ShipName ?? "") != (SavedIceShipName ?? ""))
                {
                    cmbMineNumLasers.Text = LaserCount.ToString();
                }
                else
                {
                    // Update with the user settings they have, up to the max the ship can use
                    cmbMineNumLasers.Text = SettingsVariables.UserMiningTabSettings.NumIceMiners.ToString();
                }

                // Set Strip name
                if (string.IsNullOrEmpty(SettingsVariables.UserMiningTabSettings.IceStrip))
                {
                    cmbMineMiningLaser.Text = MaxStrip;
                }
                else
                {
                    cmbMineMiningLaser.Text = SettingsVariables.UserMiningTabSettings.IceStrip;
                }

                cmbMineMiningRig1.Text = SettingsVariables.UserMiningTabSettings.ShipIceDroneRig1;
                cmbMineMiningRig2.Text = SettingsVariables.UserMiningTabSettings.ShipIceDroneRig2;
                cmbMineMiningRig3.Text = SettingsVariables.UserMiningTabSettings.ShipIceDroneRig3;
            }

            else if (cmbMineOreType.Text == "Gas")
            {
                // No MLUs for gas
                cmbMineNumMiningUpgrades.Enabled = false;
                cmbMineMiningUpgrade.Text = SettingsVariables.UserMiningTabSettings.GasUpgrade;

                // Set number of strips
                if (SettingsVariables.UserMiningTabSettings.NumIceMiners == 0 | MLUCount < SettingsVariables.UserMiningTabSettings.NumGasHarvesters | (ShipName ?? "") != (SavedGasShipName ?? ""))
                {
                    cmbMineNumLasers.Text = LaserCount.ToString();
                }
                else
                {
                    cmbMineNumLasers.Text = SettingsVariables.UserMiningTabSettings.NumGasHarvesters.ToString();
                }

                // Set Strip name
                if (string.IsNullOrEmpty(SettingsVariables.UserMiningTabSettings.IceStrip))
                {
                    cmbMineMiningLaser.Text = MaxStrip;
                }
                else
                {
                    cmbMineMiningLaser.Text = SettingsVariables.UserMiningTabSettings.GasHarvester;
                }
            }

            GetHaulerM3(cmbMineShipName.Text);

            lblMineCycleTime.Text = "";
            lblMineRange.Text = "";

            if (string.IsNullOrEmpty(cmbMineMiningRig1.Text))
            {
                cmbMineMiningRig1.Text = Public_Variables.None;
            }
            if (string.IsNullOrEmpty(cmbMineMiningRig2.Text))
            {
                cmbMineMiningRig2.Text = Public_Variables.None;
            }
            if (string.IsNullOrEmpty(cmbMineMiningRig3.Text))
            {
                cmbMineMiningRig3.Text = Public_Variables.None;
            }

            cmbMineMiningRig1.SelectedIndexChanged += ShipMiningDroneRigs_SelectedIndexChanged;
            cmbMineMiningRig2.SelectedIndexChanged += ShipMiningDroneRigs_SelectedIndexChanged;
            cmbMineMiningRig3.SelectedIndexChanged += ShipMiningDroneRigs_SelectedIndexChanged;

        }

        // Loads the mining upgrades for the type of ore selected
        private void LoadMiningUpgrades()
        {
            string SQL;
            SQLiteDataReader rsEq;

            cmbMineMiningUpgrade.BeginUpdate();
            cmbMineMiningUpgrade.Items.Clear();
            cmbMineMiningUpgrade.Items.Add(Public_Variables.None); // Always add none

            SQL = "SELECT typeName, value FROM INVENTORY_TYPES, TYPE_ATTRIBUTES WHERE groupID = 546 and published <> 0 and INVENTORY_TYPES.typeID = TYPE_ATTRIBUTES.typeID ";

            switch (cmbMineOreType.Text ?? "")
            {
                case "Ore":
                    {
                        SQL += "AND attributeID = " + ((int)ItemAttributes.miningAmountBonus).ToString();
                        break;
                    }
                case "Ice":
                    {
                        SQL += "AND attributeID = " + ((int)ItemAttributes.iceHarvestCycleBonus).ToString();
                        break;
                    }

                default:
                    {
                        goto ProcExit;
                    }
            }

            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            rsEq = Public_Variables.DBCommand.ExecuteReader();

            while (rsEq.Read())
                cmbMineMiningUpgrade.Items.Add(rsEq.GetString(0) + " (" + Conversions.ToString(rsEq.GetValue(1)) + "%)");

            rsEq.Close();

        ProcExit:
            ;

            cmbMineMiningUpgrade.EndUpdate();

        }

        // Sets the enable for all objects on ship mining equipment
        public void SetEquipmentObjects(bool SentValue)
        {
            gbMineCrystals.Enabled = SentValue;
            lblMineMinerTurret.Enabled = SentValue;
            cmbMineMiningLaser.Enabled = SentValue;
            cmbMineMiningUpgrade.Enabled = SentValue;
            lblMineMiningUpgrade.Enabled = SentValue;
            cmbMineNumMiningUpgrades.Enabled = SentValue;
            lblMineNumMiningUpgrades.Enabled = SentValue;
            cmbMineNumLasers.Enabled = SentValue;
            lblMineLaserNumber.Enabled = SentValue;
            lblMineImplants.Enabled = SentValue;
            cmbMineHighwallImplant.Enabled = SentValue;
            cmbMineMiningRig1.Enabled = SentValue;
            cmbMineMiningRig2.Enabled = SentValue;
            cmbMineMiningRig3.Enabled = SentValue;
        }

        // Updates the processing skills (enable, disable) depending on the refining skills selected
        private void UpdateProcessingSkills()
        {

            if (Public_Variables.FirstLoad)
            {
                return;
            }

            // Set them all false first
            for (int i = 1, loopTo = MineProcessingCheckBoxes.Count() - 1; i <= loopTo; i++)
                MineProcessingCheckBoxes[i].Enabled = false;

            for (int i = 1, loopTo1 = MineProcessingCombos.Count() - 1; i <= loopTo1; i++)
                MineProcessingCombos[i].Enabled = false;

            for (int i = 1, loopTo2 = MineProcessingLabels.Count() - 1; i <= loopTo2; i++)
                MineProcessingLabels[i].Enabled = false;

            cmbMineRefineryEff.Enabled = false;

            if (cmbMineOreType.Text == "Ore")
            {

                if (cmbMineRefining.Text == "4" | cmbMineRefining.Text == "5")
                {
                    // Veld, Scordite, Pyroxeres, Plag, and Mordunium
                    EnableOreProcessingGroup(1, true);

                    // Reprocessing 4 is needed for this instead of 5
                    cmbMineRefineryEff.Enabled = true;
                }

                if (cmbMineRefining.Text == "5")
                {
                    // Hemo, Hed, Jaspet, Kernite, Omber, Ytirium, Griemeer, Noxcite, Refinery Effy
                    EnableOreProcessingGroup(2, true);
                }

                if (cmbMineRefineryEff.Text == "4" | cmbMineRefineryEff.Text == "5")
                {
                    // Dark Ochre, Gneiss, Crokite, Kylixium
                    EnableOreProcessingGroup(3, true);
                }

                if (cmbMineRefineryEff.Text == "5")
                {
                    // Ark, Bisot, Spod,Eifyrium, Ducinium, Hezorime, Ueganite
                    EnableOreProcessingGroup(4, true);
                    EnableOreProcessingGroup(6, true); // Mercoxit
                                                       // Moon mining
                    if (chkMineMoonMining.Checked)
                    {
                        EnableOreProcessingGroup(7, true);
                        EnableOreProcessingGroup(8, true);
                        EnableOreProcessingGroup(9, true);
                        EnableOreProcessingGroup(10, true);
                        EnableOreProcessingGroup(11, true);
                    }
                    // Trig mining
                    if (chkMineTriglavian.Checked)
                    {
                        EnableOreProcessingGroup(5, true);
                    }
                }
            }

            else if (cmbMineOreType.Text == "Ice")
            {
                // Enable the one ice processing skill
                if (cmbMineRefining.Text == "5")
                {
                    cmbMineRefineryEff.Enabled = true;
                }

                if (cmbMineRefineryEff.Enabled & cmbMineRefineryEff.Text == "5")
                {
                    EnableOreProcessingGroup(12, true);
                }
            }

            else
            {
                // We don't refine, so leave them all off
            } // Gas

        }

        // Changes the ore processing skill group to enabled or disabled
        private void EnableOreProcessingGroup(int Index, bool EnableObject)
        {
            if (MineProcessingCheckBoxes[Index].Checked & EnableObject)
            {
                // Ok to enable
                MineProcessingCombos[Index].Enabled = true;
                MineProcessingLabels[Index].Enabled = true;
            }
            else
            {
                // Don't enable
                MineProcessingCombos[Index].Enabled = false;
                MineProcessingLabels[Index].Enabled = false;
            }

            MineProcessingCheckBoxes[Index].Enabled = EnableObject;
        }

        // Updates the skills and boxes associated with the booster
        private void UpdateBoosterSkills()
        {
            string CurrentShip;

            // Industrial command ships = Orca/Porpoise. Need Mining director 1
            // Capital industrial = rorq, need nothing

            // Mining director needs mining foreman 5
            // Mindlink (implant) needs mining director 5 
            // Mining Foreman Link 1 needs mining foreman 5
            // Mining Foreman Link 2 needs mining director 1
            if (chkMineUseFleetBooster.Checked)
            {
                cmbMineBoosterShipName.Enabled = true;
                cmbMineMiningForeman.Enabled = true;
                lblMineBoosterShipSkill.Enabled = true;
                cmbMineBoosterShipSkill.Enabled = true;

                if (cmbMineMiningForeman.Text == "5")
                {
                    cmbMineMiningDirector.Enabled = true;

                    if (Operators.CompareString(cmbMineMiningDirector.Text, "1", false) >= 0)
                    {
                        chkMineForemanMindlink.Enabled = true; // Implant
                        chkMineForemanLaserOpBoost.ThreeState = true; // Allow for t2 mindlink
                        chkMineForemanLaserOpBoost.Enabled = true;
                        chkMineForemanLaserRangeBoost.ThreeState = true; // Allow for t2 mindlink
                        chkMineForemanLaserRangeBoost.Enabled = true;
                    }
                    else
                    {
                        chkMineForemanMindlink.Enabled = false;
                        chkMineForemanLaserOpBoost.Enabled = true;
                        chkMineForemanLaserOpBoost.ThreeState = false; // Only the T1 mindlink
                        chkMineForemanLaserRangeBoost.Enabled = true;
                        chkMineForemanLaserRangeBoost.ThreeState = false;
                    } // Only the T1 mindlink
                }
                else
                {
                    chkMineForemanLaserOpBoost.Enabled = false;
                    chkMineForemanLaserRangeBoost.Enabled = false;
                    chkMineForemanMindlink.Enabled = false;
                    cmbMineMiningDirector.Enabled = false;
                }

                UpdateMiningBoosterObjects();

                UpdatingMiningShips = true;

                CurrentShip = cmbMineBoosterShipName.Text;
                cmbMineBoosterShipName.Items.Clear();

                cmbMineBoosterShipName.Items.Add(Public_Variables.Rorqual);
                cmbMineBoosterShipName.Items.Add(Public_Variables.Orca);
                cmbMineBoosterShipName.Items.Add(Public_Variables.Porpoise);
                cmbMineBoosterShipName.Items.Add("Battlecruiser");
                cmbMineBoosterShipName.Items.Add("Other");

                if (cmbMineBoosterShipName.Items.Contains(CurrentShip))
                {
                    cmbMineBoosterShipName.Text = CurrentShip;
                }
                else
                {
                    cmbMineBoosterShipName.Text = "Other";
                }

                UpdatingMiningShips = false;

                if (cmbMineBoosterShipName.Text == "Other")
                {
                    // Disable mining foreman link
                    chkMineForemanLaserOpBoost.Enabled = false;
                    chkMineForemanLaserRangeBoost.Enabled = false;
                }

                if ((cmbMineBoosterShipName.Text ?? "") == Public_Variables.Orca | (cmbMineBoosterShipName.Text ?? "") == Public_Variables.Rorqual | (cmbMineBoosterShipName.Text ?? "") == Public_Variables.Porpoise)
                {
                    cmbMineBoosterShipSkill.Enabled = true;
                }
                else
                {
                    cmbMineBoosterShipSkill.Enabled = false;
                }

                switch (cmbMineBoosterShipName.Text ?? "")
                {
                    case Public_Variables.Rorqual:
                    case Public_Variables.Orca:
                    case Public_Variables.Porpoise:
                        {
                            chkMineIndyCoreDeployedMode.Enabled = true;
                            cmbMineIndustReconfig.Enabled = true;
                            lblMineIndustrialReconfig.Enabled = true;
                            break;
                        }

                    default:
                        {
                            chkMineIndyCoreDeployedMode.Enabled = false;
                            cmbMineIndustReconfig.Enabled = false;
                            lblMineIndustrialReconfig.Enabled = false;
                            break;
                        }
                }
            }

            else
            {
                cmbMineBoosterShipName.Enabled = false;
                cmbMineMiningDirector.Enabled = false;
                cmbMineMiningForeman.Enabled = false;
                chkMineForemanMindlink.Enabled = false;
                chkMineForemanLaserOpBoost.Enabled = false;
                chkMineForemanLaserRangeBoost.Enabled = false;
                lblMineBoosterShipSkill.Enabled = false;
                cmbMineBoosterShipSkill.Enabled = false;
                chkMineIndyCoreDeployedMode.Enabled = false;
                cmbMineIndustReconfig.Enabled = false;
                lblMineIndustrialReconfig.Enabled = false;
            }

            UpdateBoosterDroneRigChecks();

        }

        // Checks all the data entered
        private bool CheckMiningEntryData()
        {

            // Check the location
            if (chkMineIncludeHighSec.Checked == false & chkMineIncludeLowSec.Checked == false & chkMineIncludeNullSec.Checked == false)
            {
                // Can't query any ore
                Interaction.MsgBox("You must select an Ore Location", Constants.vbExclamation, Application.ProductName);
                return false;
            }

            // Check the Space types
            if (chkMineAmarr.Checked == false & chkMineCaldari.Checked == false & chkMineGallente.Checked == false & chkMineMinmatar.Checked == false & chkMineWH.Checked == false & chkMineTriglavian.Checked == false & chkMineMoonMining.Checked == false)
            {
                // Can't query any ore
                Interaction.MsgBox("You must select an Ore Space", Constants.vbExclamation, Application.ProductName);
                return false;
            }

            if (chkMineWH.Checked == true & chkMineWH.Enabled == true & chkMineC1.Checked == false & chkMineC2.Checked == false & chkMineC3.Checked == false & chkMineC4.Checked == false & chkMineC5.Checked == false & chkMineC6.Checked == false)
            {
                // Can't query any ore
                Interaction.MsgBox("You must select a Wormhole Class", Constants.vbExclamation, Application.ProductName);
                return false;
            }

            // Check the values in the hauler calculations. They can't be greater than 30 minutes
            if (Conversions.ToInteger(txtMineRTMin.Text) * 60 + Conversions.ToInteger(txtMineRTSec.Text) > 1800)
            {
                // Can't query any ore
                Interaction.MsgBox("Please select a smaller Round Trip Time for returning to station", Constants.vbExclamation, Application.ProductName);
                txtMineRTMin.Focus();
                return false;
            }

            // Number of miners
            if (string.IsNullOrEmpty(Strings.Trim(txtMineNumberMiners.Text)) | Strings.Trim(txtMineNumberMiners.Text) == "0")
            {
                Interaction.MsgBox("Invalid number of miners", Constants.vbExclamation, Application.ProductName);
                txtMineNumberMiners.Focus();
                return false;
            }

            if (Conversion.Val(txtMineNumberMiners.Text) > 100d)
            {
                Interaction.MsgBox("You can't select more than 100 miners", Constants.vbExclamation, Application.ProductName);
                txtMineNumberMiners.Focus();
                return false;
            }

            if ((chkMineT1Crystals.Checked | chkMineT2Crystals.Checked) & chkMineTypeA.Checked == false & chkMineTypeB.Checked == false & chkMineTypeC.Checked == false)
            {
                Interaction.MsgBox("You must select a Crystal Type when selecting T1 or T2 crystals", Constants.vbExclamation, Application.ProductName);
                txtMineNumberMiners.Focus();
                return false;
            }

            // Make sure a refine type is selected for ice and ore
            if (chkMineRefinedOre.Checked == false & chkMineCompressedOre.Checked == false & chkMineUnrefinedOre.Checked == false & cmbMineOreType.Text != "Gas" | chkMineCompressedOre.Checked == false & chkMineUnrefinedOre.Checked == false & cmbMineOreType.Text == "Gas")
            {
                // Can't calculate nothing
                Interaction.MsgBox("You must select one ore Processing Type to calculate.", Constants.vbExclamation, Application.ProductName);
                chkMineRefinedOre.Focus();
                return false;
            }

            // Check that there is a mining laser chosen
            if (string.IsNullOrEmpty(cmbMineMiningLaser.Text) & MiningShipSelected())
            {
                Interaction.MsgBox("No mining laser selected. Check ship type and skills selected.", Constants.vbExclamation, Application.ProductName);
                cmbMineMiningLaser.Focus();
                return false;
            }

            return true;

        }

        // Loads the cargo m3 for hauler if selected
        private double GetHaulerM3(string ShipName)
        {
            double HaulerM3 = 0d;
            var AttribLookup = new EVEAttributes();

            // Load the ore hold of the ship selected
            switch (ShipName ?? "")
            {
                case Public_Variables.Hulk:
                case Public_Variables.Skiff:
                case Public_Variables.Covetor:
                case Public_Variables.Procurer:
                case Public_Variables.Venture:
                case Public_Variables.Prospect:
                case Public_Variables.Endurance:
                    {
                        HaulerM3 = AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.generalMiningHoldCapacity);
                        break;
                    }
                case Public_Variables.Mackinaw:
                case Public_Variables.Retriever:
                    {
                        HaulerM3 = AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.generalMiningHoldCapacity) * (1d + Conversions.ToInteger(cmbMineBaseShipSkill.Text) * (AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.miningBargeBonusGeneralMiningHoldCapacity) / 100d));
                        break;
                    }
                case Public_Variables.Orca:
                case Public_Variables.Rorqual:
                case Public_Variables.Porpoise:
                    {
                        // Use special ore hold, fleet hanger - like to use cargo too but that's not in attributes?
                        HaulerM3 = AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.generalMiningHoldCapacity) + AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.fleetHangarCapacity);
                        break;
                    }
            }

            txtMineHaulerM3.Text = Strings.FormatNumber(HaulerM3, 2);

            return HaulerM3;

        }

        // Calculates the total mining amount per cycle for the ship set up (not including crystals)
        private double CalculateMiningAmount()
        {
            double Mining;
            double Astrogeology;
            double BaseShipBonus;
            double AdvancedShipBonus;
            double MiningUpgrades;
            double HighwallImplant;
            double MichiImplant;
            double RoleBonus;
            var AttribLookup = new EVEAttributes();

            double m3YieldperCycle;
            int MiningLasers = Conversions.ToInteger(cmbMineNumLasers.Text);

            // Get base yield and multiply by number of lasers
            m3YieldperCycle = AttribLookup.GetAttribute(cmbMineMiningLaser.Text, ItemAttributes.miningAmount) * MiningLasers;

            if (cmbMineOreType.Text == "Ore")
            {

                // Yield stacks
                if (cmbMineSkill.Enabled == true)
                {
                    Mining = Conversions.ToInteger(cmbMineSkill.Text);
                }
                else
                {
                    Mining = 0d;
                }

                if (cmbMineAstrogeology.Enabled == true)
                {
                    Astrogeology = Conversions.ToInteger(cmbMineAstrogeology.Text);
                }
                else
                {
                    Astrogeology = 0d;
                }

                // Mining Upgrades - Look up the upgrade bonus from text selected
                if (cmbMineMiningUpgrade.Enabled == true & (cmbMineMiningUpgrade.Text ?? "") != Public_Variables.None)
                {
                    // Replace the percent if it's in the string so we can take the 9 or 10% bonus easier
                    int S = Strings.InStr(cmbMineMiningUpgrade.Text, "(");
                    int E = Strings.InStr(cmbMineMiningUpgrade.Text, "%") - 1;
                    MiningUpgrades = Conversions.ToInteger(cmbMineMiningUpgrade.Text.Substring(S, E - S));
                }
                else
                {
                    MiningUpgrades = 0d;
                }

                // Implant bonus
                if ((cmbMineHighwallImplant.Text ?? "") != Public_Variables.None)
                {
                    // Inherent Implants 'Highwall' Mining MX-1001
                    HighwallImplant = AttribLookup.GetAttribute("Inherent Implants 'Highwall' Mining " + cmbMineHighwallImplant.Text.Substring(11), ItemAttributes.miningAmountBonus);
                }
                else
                {
                    HighwallImplant = 0d;
                }

                // Michii Implant bonus
                if (chkMineMichiImplant.Enabled == true & chkMineMichiImplant.Checked == true)
                {
                    MichiImplant = AttribLookup.GetAttribute(chkMineMichiImplant.Text, ItemAttributes.miningAmountBonus);
                }
                else
                {
                    MichiImplant = 0d;
                }

                // Base ship yield bonus
                if (cmbMineShipName.Enabled == true)
                {
                    // Just look both up for any ship and it will find the bonus regardless
                    BaseShipBonus = AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.miningFrigatesBonusOreMiningYield);
                    BaseShipBonus += AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.miningBargeBonusOreMiningYield);
                    BaseShipBonus *= Conversions.ToInteger(cmbMineBaseShipSkill.Text);
                }
                else
                {
                    BaseShipBonus = 0d;
                }

                // Advanced ship bonus 
                if (cmbMineAdvShipSkill.Enabled == true)
                {
                    // Just look both up for any ship and it will find the bonus regardless
                    AdvancedShipBonus = AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.expeditionFrigateBonusOreMiningYield);
                    AdvancedShipBonus += AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.exhumersBonusOreMiningYield);
                    AdvancedShipBonus *= Conversions.ToInteger(cmbMineAdvShipSkill.Text);
                }
                else
                {
                    AdvancedShipBonus = 0d;
                }

                // Role bonus
                RoleBonus = AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.shipRoleBonusOreMiningYield) / 100d + 1d;

                // Add skills
                m3YieldperCycle *= 1d + AttribLookup.GetAttribute(MiningSkillTypeID, ItemAttributes.miningAmountBonus) * Mining / 100d;
                m3YieldperCycle *= 1d + AttribLookup.GetAttribute(AstrogeologySkillTypeID, ItemAttributes.miningAmountBonus) * Astrogeology / 100d;
                m3YieldperCycle *= 1d + MichiImplant / 100d;
                m3YieldperCycle *= 1d + HighwallImplant / 100d;
                m3YieldperCycle *= Math.Pow(1d + MiningUpgrades / 100d, Conversions.ToInteger(cmbMineNumMiningUpgrades.Text)); // Diminishing returns
                m3YieldperCycle *= 1d + BaseShipBonus / 100d;
                m3YieldperCycle *= 1d + AdvancedShipBonus / 100d;
                m3YieldperCycle *= RoleBonus;

                if (chkMineEDENCOM.Checked)
                {
                    m3YieldperCycle *= 1.1d;
                }

                return m3YieldperCycle;
            }

            else if (cmbMineOreType.Text == "Ice")
            {
                // One block per cycle - no yield bonus currently
                return 1 * MiningLasers;
            }

            else if (cmbMineOreType.Text == "Gas")
            {

                // Look up any bonuses for role yield
                m3YieldperCycle *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.shipRoleBonusGasHarvestingYield) / 100d + 1d;

                return m3YieldperCycle;

            }

            return 0d;

        }

        private enum BurstBonusType
        {
            Range = 0,
            Cycle = 1
        }

        private const int MiningLaserFieldEnhancementChargeID = 42829;
        private const int MiningLaserOptimizationChargeId = 42830;
        private const int MiningDirectorSkillID = 22552;
        private const int MiningForemanBurst1_ID = 42528;
        private const int MiningForemanBurst2_ID = 43551;
        private const int CapitalIndustrialCore1_ID = 28583;
        private const int CapitalIndustrialCore2_ID = 42890;
        private const int LargeIndustrialCore1_ID = 58945;
        private const int LargeIndustrialCore2_ID = 58950;
        private const int MediumIndustrialCore1_ID = 62590;
        private const int MediumIndustrialCore2_ID = 62591;

        // Calculates the total burst bonus from ships and charges
        private double CalculateBurstBonus(BurstBonusType BurstType, CheckBox BoostCheckRef)
        {
            double GangBurstBonus;
            double MindLinkBonus;
            double BaseChargeBonus;
            var AttribLookup = new EVEAttributes();
            double MiningDirectorBonus = 1d + Conversions.ToInteger(cmbMineMiningDirector.Text) * (AttribLookup.GetAttribute(MiningDirectorSkillID, ItemAttributes.commandStrengthBonus) / 100d);

            // Get the burst bonus duration for the mindlink
            if (chkMineForemanMindlink.Checked == true & chkMineForemanMindlink.Enabled == true)
            {
                MindLinkBonus = 1d + AttribLookup.GetAttribute(chkMineForemanMindlink.Text, ItemAttributes.mindlinkBonus) / 100d;
            }
            else
            {
                MindLinkBonus = 1d;
            }

            // Get the bonus for the type of charge used
            if (BurstType == BurstBonusType.Range)
            {
                BaseChargeBonus = AttribLookup.GetAttribute(MiningLaserFieldEnhancementChargeID, ItemAttributes.warfareBuff1Multiplier) / 100d;
            }
            else
            {
                BaseChargeBonus = AttribLookup.GetAttribute(MiningLaserOptimizationChargeId, ItemAttributes.warfareBuff1Multiplier) / 100d;
            }

            // Mining Foreman Link bonus
            if (cmbMineMiningDirector.Enabled == true & BoostCheckRef.Enabled)
            {
                if (BoostCheckRef.Checked & BoostCheckRef.CheckState == CheckState.Indeterminate)
                {
                    // Checked T2 
                    GangBurstBonus = BaseChargeBonus * MiningDirectorBonus * MindLinkBonus * AttribLookup.GetAttribute(MiningForemanBurst2_ID, ItemAttributes.warfareBuff1Value);
                }
                else if (BoostCheckRef.Checked)
                {
                    // Checked T1
                    GangBurstBonus = BaseChargeBonus * MiningDirectorBonus * MindLinkBonus * AttribLookup.GetAttribute(MiningForemanBurst1_ID, ItemAttributes.warfareBuff1Value);
                }
                else
                {
                    GangBurstBonus = 0d;
                }
            }
            else
            {
                GangBurstBonus = 0d;
            }

            // Add Industrial core bonus
            GangBurstBonus *= 1d + GetIndustrialCorebonus(cmbMineBoosterShipName.Text, CoreBonus.BurstStrength);

            int ShipSkillLevel = 1;

            if (!string.IsNullOrEmpty(cmbMineBoosterShipSkill.Text))
            {
                ShipSkillLevel = Conversions.ToInteger(cmbMineBoosterShipSkill.Text);
            }

            // Ship boost to bursts
            switch (cmbMineBoosterShipName.Text ?? "")
            {
                case Public_Variables.Porpoise:
                case Public_Variables.Orca:
                    {
                        GangBurstBonus *= 1d + AttribLookup.GetAttribute(cmbMineBoosterShipName.Text, ItemAttributes.shipBonusICS2) / 100d * ShipSkillLevel;
                        break;
                    }
                case Public_Variables.Rorqual:
                    {
                        GangBurstBonus *= 1d + AttribLookup.GetAttribute(cmbMineBoosterShipName.Text, ItemAttributes.shipBonusORECapital2) / 100d * ShipSkillLevel;
                        break;
                    }
            }

            return GangBurstBonus;

        }

        // Calculates the range for the miner selected and boosts applied
        private double CalculateMiningRange(double BaseRange, string OreType, double BurstBonus)
        {
            double CalculatedRange;
            var Attriblookup = new EVEAttributes();
            int BaseShipLevel = Conversions.ToInteger(cmbMineBaseShipSkill.Text);

            // Calc range with bursts
            if (chkMineUseFleetBooster.Checked)
            {
                CalculatedRange = BaseRange * (1d + BurstBonus);
            }
            else
            {
                CalculatedRange = BaseRange;
            }

            if (OreType == "Ore")
            {
                CalculatedRange *= BaseShipLevel * Attriblookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.miningBargeBonusOreMiningRange) / 100d + 1d;
            }
            else if (OreType == "Ice")
            {
                CalculatedRange *= BaseShipLevel * Attriblookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.miningBargeBonusIceHarvestingRange) / 100d + 1d;
            }

            return CalculatedRange;

        }

        private enum CoreBonus
        {
            OreDroneMiningYield = 0,
            IceDroneHarvestingSpeed = 1,
            BurstStrength = 2
        }

        // Returns the bonus as a percentage for the industrial core for the type sent - only for orca and rorq
        private double GetIndustrialCorebonus(string ShipName, CoreBonus BonusType)
        {
            double ReturnBonus = 0d;
            var AttribLookup = new EVEAttributes();
            int CoreID;

            // Only return the bonus if it's on and we are using a booster
            if (chkMineUseFleetBooster.Checked & chkMineIndyCoreDeployedMode.Checked != false)
            {
                if ((ShipName ?? "") == Public_Variables.Rorqual)
                {
                    if (chkMineIndyCoreDeployedMode.CheckState == CheckState.Indeterminate)
                    {
                        CoreID = CapitalIndustrialCore2_ID;
                    }
                    else
                    {
                        CoreID = CapitalIndustrialCore1_ID;
                    }
                }
                else if ((ShipName ?? "") == Public_Variables.Orca)
                {
                    if (chkMineIndyCoreDeployedMode.CheckState == CheckState.Indeterminate)
                    {
                        CoreID = LargeIndustrialCore2_ID;
                    }
                    else
                    {
                        CoreID = LargeIndustrialCore1_ID;
                    }
                }
                else if ((ShipName ?? "") == Public_Variables.Porpoise)
                {
                    if (chkMineIndyCoreDeployedMode.CheckState == CheckState.Indeterminate)
                    {
                        CoreID = MediumIndustrialCore2_ID;
                    }
                    else
                    {
                        CoreID = MediumIndustrialCore1_ID;
                    }
                }
                else
                {
                    return ReturnBonus;
                }

                switch (BonusType)
                {
                    case CoreBonus.BurstStrength:
                        {
                            ReturnBonus = AttribLookup.GetAttribute(CoreID, ItemAttributes.industrialCoreBonusMiningBurstStrength) / 100d;
                            break;
                        }
                    case CoreBonus.IceDroneHarvestingSpeed:
                        {
                            ReturnBonus = AttribLookup.GetAttribute(CoreID, ItemAttributes.industrialCoreBonusDroneIceHarvesting) / 100d;
                            break;
                        }
                    case CoreBonus.OreDroneMiningYield:
                        {
                            ReturnBonus = AttribLookup.GetAttribute(CoreID, ItemAttributes.industrialCoreBonusDroneMining) / 100d;
                            break;
                        }
                }
            }

            return ReturnBonus;

        }

        // Returns the cycle time of the mining laser cycle time sent
        private double CalculateMiningCycleTime(double BaseCycleTime, double GangBurstBonus)
        {
            double TempCycleTime;
            var AttribLookup = new EVEAttributes();

            int BaseShipLevel = Conversions.ToInteger(cmbMineBaseShipSkill.Text);
            int AdvShipLevel = Conversions.ToInteger(cmbMineAdvShipSkill.Text);

            // Get the adjusted time with bursts
            TempCycleTime = BaseCycleTime * (1d + GangBurstBonus);

            switch (cmbMineOreType.Text ?? "")
            {
                case "Ore":
                    {
                        // Frigate bonus
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.expeditionFrigateBonusMiningLaserDuration) / 100d * AdvShipLevel + 1d;
                        // Exhumer bonus
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.exhumersBonusOreMiningDuration) / 100d * AdvShipLevel + 1d;
                        // Role bonus
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.shipRoleBonusOreMiningDuration) / 100d + 1d;
                        break;
                    }

                case "Ice":
                    {
                        // Frigate bonus
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.miningFrigateBonusIceHarvestingDuration) / 100d * BaseShipLevel + 1d;
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.expeditionFrigateBonusIceHarvestingDuration) / 100d * AdvShipLevel + 1d;
                        // Mining Barge and Exhumer bonuses
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.miningBargeBonusIceHarvestingDuration) / 100d * BaseShipLevel + 1d;
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.exhumersBonusIceHarvestingDuration) / 100d * AdvShipLevel + 1d;
                        // Role bonus
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.shipRoleBonusIceHarvestingDuration) / 100d + 1d;

                        // For Ice, check for duration reduction bonus, implant, and upgrades
                        if (cmbMineGasIceHarvesting.Enabled)
                        {
                            // Apply the ice harvesting bonus
                            TempCycleTime *= (double)Conversions.ToDecimal(cmbMineGasIceHarvesting.Text) * AttribLookup.GetAttribute(16281, ItemAttributes.iceHarvestCycleBonus) / 100d + 1d;
                        }

                        // Apply the upgrades
                        if (cmbMineMiningUpgrade.Enabled == true & (cmbMineMiningUpgrade.Text ?? "") != Public_Variables.None)
                        {
                            // Replace the percent if it's in the string so we can take the 9 or 10% bonus easier
                            string TempUpgradeText = cmbMineMiningUpgrade.Text.Replace("%", "");
                            int TextStart = Strings.InStr(TempUpgradeText, "(");
                            int TextLength = Strings.InStr(TempUpgradeText, ")") - TextStart - 1;
                            TempCycleTime *= Math.Pow(1d + Conversions.ToDouble(TempUpgradeText.Substring(TextStart, TextLength)) / 100d, Conversions.ToInteger(cmbMineNumMiningUpgrades.Text)); // Diminishing returns
                        }

                        // Inherent Implants 'Yeti' Ice Harvesting IH-1001
                        switch (cmbMineHighwallImplant.Text ?? "")
                        {
                            case "'Yeti' IH-1001":
                                {
                                    TempCycleTime *= 1d + AttribLookup.GetAttribute(27103, ItemAttributes.iceHarvestCycleBonus) / 100d;
                                    break;
                                }
                            case "'Yeti' IH-1003":
                                {
                                    TempCycleTime *= 1d + AttribLookup.GetAttribute(22570, ItemAttributes.iceHarvestCycleBonus) / 100d;
                                    break;
                                }
                            case "'Yeti' IH-1005":
                                {
                                    TempCycleTime *= 1d + AttribLookup.GetAttribute(22571, ItemAttributes.iceHarvestCycleBonus) / 100d;
                                    break;
                                }
                        }

                        // Apply the rig bonus if selected
                        if (cmbMineMiningRig1.Text == "Ice Harvesting")
                        {
                            // 12% cycle reduction
                            TempCycleTime = TempCycleTime * (1d + AttribLookup.GetAttribute(32819, ItemAttributes.iceHarvestCycleBonus) / 100d);
                        }

                        break;
                    }

                case "Gas":
                    {
                        // Frigate bonuses
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.miningFrigateBonusGasCloudHarvestingDuration) / 100d * BaseShipLevel + 1d;
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.expeditionFrigateBonusGasHarvestingDuration) / 100d * AdvShipLevel + 1d;

                        // Mining Barge and Exhumer bonuses
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.miningBargeBonusGasHarvestingDuration) / 100d * BaseShipLevel + 1d;
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.exhumersBonusGasHarvestingDuration) / 100d * AdvShipLevel + 1d;

                        // Role bonus
                        TempCycleTime *= AttribLookup.GetAttribute(cmbMineShipName.Text, ItemAttributes.shipRoleBonusGasHarvesterDuration) / 100d + 1d;

                        // Gas Harvesting Duration Implants Eifyr and Co. 'Alchemist' Gas Harvesting GH-801
                        switch (cmbMineHighwallImplant.Text ?? "")
                        {
                            case "'Alchemist' GH-801":
                                {
                                    TempCycleTime *= 1d + AttribLookup.GetAttribute(27240, ItemAttributes.durationBonus) / 100d;
                                    break;
                                }
                            case "'Alchemist' GH-803":
                                {
                                    TempCycleTime *= 1d + AttribLookup.GetAttribute(27238, ItemAttributes.durationBonus) / 100d;
                                    break;
                                }
                            case "'Alchemist' GH-805":
                                {
                                    TempCycleTime *= 1d + AttribLookup.GetAttribute(27239, ItemAttributes.durationBonus) / 100d;
                                    break;
                                }
                        }

                        break;
                    }

            }

            return TempCycleTime;

        }

        // Updates the booster checks 
        public void UpdateMiningBoosterObjects()
        {

            // Laser Op
            if (chkMineForemanLaserOpBoost.Checked & chkMineForemanLaserOpBoost.CheckState == CheckState.Indeterminate) // Show T2
            {
                chkMineForemanLaserOpBoost.Text = "Mining Foreman Link T2 - Laser Optimization Charge";
                chkMineForemanLaserOpBoost.ForeColor = Color.DarkOrange;

                if (File.Exists(Path.Combine(Public_Variables.UserImagePath, "43551_32.png")))
                {
                    pictMineLaserOptmize.Image = Image.FromFile(Path.Combine(Public_Variables.UserImagePath, "43551_32.png"));
                }
                else
                {
                    pictMineLaserOptmize.Image = null;
                }

                pictMineLaserOptmize.Update();
            }

            else
            {
                chkMineForemanLaserOpBoost.Text = "Mining Foreman Link - Laser Optimization Charge";
                chkMineForemanLaserOpBoost.ForeColor = Color.Black;

                if (File.Exists(Path.Combine(Public_Variables.UserImagePath, "42528_32.png")))
                {
                    pictMineLaserOptmize.Image = Image.FromFile(Path.Combine(Public_Variables.UserImagePath, "42528_32.png"));
                }
                else
                {
                    pictMineLaserOptmize.Image = null;
                }

                pictMineLaserOptmize.Update();
            }

            // Range 
            if (chkMineForemanLaserRangeBoost.Checked & chkMineForemanLaserRangeBoost.CheckState == CheckState.Indeterminate) // Show T2
            {
                chkMineForemanLaserRangeBoost.Text = "Mining Foreman Link T2 - Mining Laser Field Enhancement Charge";
                chkMineForemanLaserRangeBoost.ForeColor = Color.DarkOrange;

                if (File.Exists(Path.Combine(Public_Variables.UserImagePath, "43551_32.png")))
                {
                    pictMineRangeLink.Image = Image.FromFile(Path.Combine(Public_Variables.UserImagePath, "43551_32.png"));
                }
                else
                {
                    pictMineRangeLink.Image = null;
                }
            }
            else
            {
                chkMineForemanLaserRangeBoost.Text = "Mining Foreman Link - Mining Laser Field Enhancement Charge";
                chkMineForemanLaserRangeBoost.ForeColor = Color.Black;

                if (File.Exists(Path.Combine(Public_Variables.UserImagePath, "42528_32.png")))
                {
                    pictMineRangeLink.Image = Image.FromFile(Path.Combine(Public_Variables.UserImagePath, "42528_32.png"));
                }
                else
                {
                    pictMineRangeLink.Image = null;
                }

                pictMineRangeLink.Update();
            }

        }

        // Processes the industrial core checks
        private void UpdateIndustrialCoreCheck()
        {

            if (chkMineIndyCoreDeployedMode.Checked & chkMineIndyCoreDeployedMode.CheckState == CheckState.Indeterminate) // Show T2
            {
                chkMineIndyCoreDeployedMode.Text = "Industrial Core II Active";
                chkMineIndyCoreDeployedMode.ForeColor = Color.DarkOrange;
            }
            else if (chkMineIndyCoreDeployedMode.Checked & chkMineIndyCoreDeployedMode.CheckState == CheckState.Checked) // Show T1 
            {
                chkMineIndyCoreDeployedMode.Text = "Industrial Core I Active";
                chkMineIndyCoreDeployedMode.ForeColor = Color.Black;
            }
            else
            {
                // Inactive
                chkMineIndyCoreDeployedMode.Text = "Industrial Core Inactive";
                chkMineIndyCoreDeployedMode.ForeColor = Color.Black;
            }

            if (chkMineIndyCoreDeployedMode.Checked == true)
            {
                lblMineIndustrialReconfig.Enabled = true;
                cmbMineIndustReconfig.Enabled = true;
            }
            else
            {
                lblMineIndustrialReconfig.Enabled = false;
                cmbMineIndustReconfig.Enabled = false;
            }

        }

        // Calculates the cost for one hour of heavy water for boosting with a Rorqual
        private double CalculateIndyCoreDeployedCost(int IndustrialReconfigSkill, int ShipSkill)
        {
            string SQL;
            SQLiteDataReader readerHW;
            double HWUsage = 0d;
            var AttribLookup = new EVEAttributes();
            int CoreTypeID = 0;

            // Look up usage for the module selected by the ship
            if (chkMineIndyCoreDeployedMode.Checked & chkMineIndyCoreDeployedMode.CheckState == CheckState.Indeterminate)
            {
                // Checked T2
                switch (cmbMineShipName.Text ?? "")
                {
                    case Public_Variables.Porpoise:
                        {
                            CoreTypeID = MediumIndustrialCore2_ID;
                            break;
                        }
                    case Public_Variables.Orca:
                        {
                            CoreTypeID = LargeIndustrialCore2_ID;
                            break;
                        }
                    case Public_Variables.Rorqual:
                        {
                            CoreTypeID = CapitalIndustrialCore2_ID;
                            break;
                        }
                }
            }
            else if (chkMineIndyCoreDeployedMode.Checked)
            {
                // Checked T1
                switch (cmbMineShipName.Text ?? "")
                {
                    case Public_Variables.Porpoise:
                        {
                            CoreTypeID = MediumIndustrialCore1_ID;
                            break;
                        }
                    case Public_Variables.Orca:
                        {
                            CoreTypeID = LargeIndustrialCore1_ID;
                            break;
                        }
                    case Public_Variables.Rorqual:
                        {
                            CoreTypeID = CapitalIndustrialCore1_ID;
                            break;
                        }
                }
            }

            if (chkMineIndyCoreDeployedMode.Enabled == true)
            {
                HWUsage = (int)Math.Round(AttribLookup.GetAttribute(CoreTypeID, ItemAttributes.consumptionQuantity));
            }
            else
            {
                HWUsage = 0d;
            }

            // Users can set Industrial Reconfig to 0 - this is 0 cost or not calculating cost
            if (IndustrialReconfigSkill == 0)
            {
                return 0d;
            }

            // Skill at the operation of industrial core modules.  
            // 50-unit reduction in heavy water consumption amount for module activation per skill level.
            HWUsage -= IndustrialReconfigSkill * 50;

            // Capital Industrial Ships skill bonuses:
            // -5% reduction in fuel consumption for industrial cores per level
            HWUsage -= -(HWUsage * 0.05d * ShipSkill);

            // Look up the cost for Heavy Water
            SQL = "SELECT PRICE FROM ITEM_PRICES WHERE ITEM_NAME = 'Heavy Water'";
            Public_Variables.DBCommand = new SQLiteCommand(SQL, Public_Variables.EVEDB.DBREf());
            readerHW = Public_Variables.DBCommand.ExecuteReader();

            double ReturnValue = 0d;

            if (readerHW.Read())
            {
                // Return cost for one hour (cycle is 5 minutes)
                ReturnValue = HWUsage * readerHW.GetDouble(0) * 12d;
            }
            readerHW.Close();

            return ReturnValue;

        }

        private bool MiningShipSelected()
        {
            if ((cmbMineShipName.Text ?? "") == Public_Variables.Porpoise | (cmbMineShipName.Text ?? "") == Public_Variables.Orca | (cmbMineShipName.Text ?? "") == Public_Variables.Rorqual)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        // The Ore structure to display in our grid for mining
        public struct MiningOre
        {
            public long OreID;
            public string OreName;
            public double OreUnitPrice;
            public double RefineYield;
            public string CrystalType;
            public double OreVolume;
            public double IPH;
            public double UnitsPerHour;
            public double OreUnitsPerCycle;
            public double ResidueProbability;
            public double ResidueVolumeMuliplier;
            public double DroneYield;
            public int UnitsToRefine;
            public string RefineType;
            public string Space; // Location
            public string BeltType; // What type of ore it is - Moon, Ice, Ore
            public double CycleTime;
        }

        // For sorting a list of Mining Ore

        public class MiningOreIPHComparer : IComparer<MiningOre>
        {

            public int Compare(MiningOre p1, MiningOre p2)
            {
                // swap p2 and p1 to do decending sort
                return p2.IPH.CompareTo(p1.IPH);
            }

        }

        private void cmbMineMiningUpgrade_SelectedIndexChanged(object sender, EventArgs e)
        {
            if ((cmbMineMiningUpgrade.Text ?? "") == Public_Variables.None)
            {
                cmbMineNumMiningUpgrades.Enabled = false;
            }
            else
            {
                cmbMineNumMiningUpgrades.Enabled = true;
            }
        }

        private void lstMineGrid_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lstMineGrid.SelectedIndices.Count != 0)
            {
                // Set the cycle time for the line selected
                lblMineCycleTime.Text = lstMineGrid.SelectedItems[0].SubItems[11].Text;
            }
        }

        private void chkMineRefinedOre_CheckedChanged(object sender, EventArgs e)
        {
            if (chkMineRefinedOre.Checked & chkMineRefinedOre.Enabled)
            {
                gbMineRefining.Enabled = true;
            }
            else
            {
                gbMineRefining.Enabled = false;
            }
            UpdateProcessingSkills();
        }

        #endregion

    }
}